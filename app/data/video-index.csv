video_id,datetime,title,transcript,title_embedding-0,title_embedding-1,title_embedding-2,title_embedding-3,title_embedding-4,title_embedding-5,title_embedding-6,title_embedding-7,title_embedding-8,title_embedding-9,title_embedding-10,title_embedding-11,title_embedding-12,title_embedding-13,title_embedding-14,title_embedding-15,title_embedding-16,title_embedding-17,title_embedding-18,title_embedding-19,title_embedding-20,title_embedding-21,title_embedding-22,title_embedding-23,title_embedding-24,title_embedding-25,title_embedding-26,title_embedding-27,title_embedding-28,title_embedding-29,title_embedding-30,title_embedding-31,title_embedding-32,title_embedding-33,title_embedding-34,title_embedding-35,title_embedding-36,title_embedding-37,title_embedding-38,title_embedding-39,title_embedding-40,title_embedding-41,title_embedding-42,title_embedding-43,title_embedding-44,title_embedding-45,title_embedding-46,title_embedding-47,title_embedding-48,title_embedding-49,title_embedding-50,title_embedding-51,title_embedding-52,title_embedding-53,title_embedding-54,title_embedding-55,title_embedding-56,title_embedding-57,title_embedding-58,title_embedding-59,title_embedding-60,title_embedding-61,title_embedding-62,title_embedding-63,title_embedding-64,title_embedding-65,title_embedding-66,title_embedding-67,title_embedding-68,title_embedding-69,title_embedding-70,title_embedding-71,title_embedding-72,title_embedding-73,title_embedding-74,title_embedding-75,title_embedding-76,title_embedding-77,title_embedding-78,title_embedding-79,title_embedding-80,title_embedding-81,title_embedding-82,title_embedding-83,title_embedding-84,title_embedding-85,title_embedding-86,title_embedding-87,title_embedding-88,title_embedding-89,title_embedding-90,title_embedding-91,title_embedding-92,title_embedding-93,title_embedding-94,title_embedding-95,title_embedding-96,title_embedding-97,title_embedding-98,title_embedding-99,title_embedding-100,title_embedding-101,title_embedding-102,title_embedding-103,title_embedding-104,title_embedding-105,title_embedding-106,title_embedding-107,title_embedding-108,title_embedding-109,title_embedding-110,title_embedding-111,title_embedding-112,title_embedding-113,title_embedding-114,title_embedding-115,title_embedding-116,title_embedding-117,title_embedding-118,title_embedding-119,title_embedding-120,title_embedding-121,title_embedding-122,title_embedding-123,title_embedding-124,title_embedding-125,title_embedding-126,title_embedding-127,title_embedding-128,title_embedding-129,title_embedding-130,title_embedding-131,title_embedding-132,title_embedding-133,title_embedding-134,title_embedding-135,title_embedding-136,title_embedding-137,title_embedding-138,title_embedding-139,title_embedding-140,title_embedding-141,title_embedding-142,title_embedding-143,title_embedding-144,title_embedding-145,title_embedding-146,title_embedding-147,title_embedding-148,title_embedding-149,title_embedding-150,title_embedding-151,title_embedding-152,title_embedding-153,title_embedding-154,title_embedding-155,title_embedding-156,title_embedding-157,title_embedding-158,title_embedding-159,title_embedding-160,title_embedding-161,title_embedding-162,title_embedding-163,title_embedding-164,title_embedding-165,title_embedding-166,title_embedding-167,title_embedding-168,title_embedding-169,title_embedding-170,title_embedding-171,title_embedding-172,title_embedding-173,title_embedding-174,title_embedding-175,title_embedding-176,title_embedding-177,title_embedding-178,title_embedding-179,title_embedding-180,title_embedding-181,title_embedding-182,title_embedding-183,title_embedding-184,title_embedding-185,title_embedding-186,title_embedding-187,title_embedding-188,title_embedding-189,title_embedding-190,title_embedding-191,title_embedding-192,title_embedding-193,title_embedding-194,title_embedding-195,title_embedding-196,title_embedding-197,title_embedding-198,title_embedding-199,title_embedding-200,title_embedding-201,title_embedding-202,title_embedding-203,title_embedding-204,title_embedding-205,title_embedding-206,title_embedding-207,title_embedding-208,title_embedding-209,title_embedding-210,title_embedding-211,title_embedding-212,title_embedding-213,title_embedding-214,title_embedding-215,title_embedding-216,title_embedding-217,title_embedding-218,title_embedding-219,title_embedding-220,title_embedding-221,title_embedding-222,title_embedding-223,title_embedding-224,title_embedding-225,title_embedding-226,title_embedding-227,title_embedding-228,title_embedding-229,title_embedding-230,title_embedding-231,title_embedding-232,title_embedding-233,title_embedding-234,title_embedding-235,title_embedding-236,title_embedding-237,title_embedding-238,title_embedding-239,title_embedding-240,title_embedding-241,title_embedding-242,title_embedding-243,title_embedding-244,title_embedding-245,title_embedding-246,title_embedding-247,title_embedding-248,title_embedding-249,title_embedding-250,title_embedding-251,title_embedding-252,title_embedding-253,title_embedding-254,title_embedding-255,title_embedding-256,title_embedding-257,title_embedding-258,title_embedding-259,title_embedding-260,title_embedding-261,title_embedding-262,title_embedding-263,title_embedding-264,title_embedding-265,title_embedding-266,title_embedding-267,title_embedding-268,title_embedding-269,title_embedding-270,title_embedding-271,title_embedding-272,title_embedding-273,title_embedding-274,title_embedding-275,title_embedding-276,title_embedding-277,title_embedding-278,title_embedding-279,title_embedding-280,title_embedding-281,title_embedding-282,title_embedding-283,title_embedding-284,title_embedding-285,title_embedding-286,title_embedding-287,title_embedding-288,title_embedding-289,title_embedding-290,title_embedding-291,title_embedding-292,title_embedding-293,title_embedding-294,title_embedding-295,title_embedding-296,title_embedding-297,title_embedding-298,title_embedding-299,title_embedding-300,title_embedding-301,title_embedding-302,title_embedding-303,title_embedding-304,title_embedding-305,title_embedding-306,title_embedding-307,title_embedding-308,title_embedding-309,title_embedding-310,title_embedding-311,title_embedding-312,title_embedding-313,title_embedding-314,title_embedding-315,title_embedding-316,title_embedding-317,title_embedding-318,title_embedding-319,title_embedding-320,title_embedding-321,title_embedding-322,title_embedding-323,title_embedding-324,title_embedding-325,title_embedding-326,title_embedding-327,title_embedding-328,title_embedding-329,title_embedding-330,title_embedding-331,title_embedding-332,title_embedding-333,title_embedding-334,title_embedding-335,title_embedding-336,title_embedding-337,title_embedding-338,title_embedding-339,title_embedding-340,title_embedding-341,title_embedding-342,title_embedding-343,title_embedding-344,title_embedding-345,title_embedding-346,title_embedding-347,title_embedding-348,title_embedding-349,title_embedding-350,title_embedding-351,title_embedding-352,title_embedding-353,title_embedding-354,title_embedding-355,title_embedding-356,title_embedding-357,title_embedding-358,title_embedding-359,title_embedding-360,title_embedding-361,title_embedding-362,title_embedding-363,title_embedding-364,title_embedding-365,title_embedding-366,title_embedding-367,title_embedding-368,title_embedding-369,title_embedding-370,title_embedding-371,title_embedding-372,title_embedding-373,title_embedding-374,title_embedding-375,title_embedding-376,title_embedding-377,title_embedding-378,title_embedding-379,title_embedding-380,title_embedding-381,title_embedding-382,title_embedding-383,transcript_embedding-0,transcript_embedding-1,transcript_embedding-2,transcript_embedding-3,transcript_embedding-4,transcript_embedding-5,transcript_embedding-6,transcript_embedding-7,transcript_embedding-8,transcript_embedding-9,transcript_embedding-10,transcript_embedding-11,transcript_embedding-12,transcript_embedding-13,transcript_embedding-14,transcript_embedding-15,transcript_embedding-16,transcript_embedding-17,transcript_embedding-18,transcript_embedding-19,transcript_embedding-20,transcript_embedding-21,transcript_embedding-22,transcript_embedding-23,transcript_embedding-24,transcript_embedding-25,transcript_embedding-26,transcript_embedding-27,transcript_embedding-28,transcript_embedding-29,transcript_embedding-30,transcript_embedding-31,transcript_embedding-32,transcript_embedding-33,transcript_embedding-34,transcript_embedding-35,transcript_embedding-36,transcript_embedding-37,transcript_embedding-38,transcript_embedding-39,transcript_embedding-40,transcript_embedding-41,transcript_embedding-42,transcript_embedding-43,transcript_embedding-44,transcript_embedding-45,transcript_embedding-46,transcript_embedding-47,transcript_embedding-48,transcript_embedding-49,transcript_embedding-50,transcript_embedding-51,transcript_embedding-52,transcript_embedding-53,transcript_embedding-54,transcript_embedding-55,transcript_embedding-56,transcript_embedding-57,transcript_embedding-58,transcript_embedding-59,transcript_embedding-60,transcript_embedding-61,transcript_embedding-62,transcript_embedding-63,transcript_embedding-64,transcript_embedding-65,transcript_embedding-66,transcript_embedding-67,transcript_embedding-68,transcript_embedding-69,transcript_embedding-70,transcript_embedding-71,transcript_embedding-72,transcript_embedding-73,transcript_embedding-74,transcript_embedding-75,transcript_embedding-76,transcript_embedding-77,transcript_embedding-78,transcript_embedding-79,transcript_embedding-80,transcript_embedding-81,transcript_embedding-82,transcript_embedding-83,transcript_embedding-84,transcript_embedding-85,transcript_embedding-86,transcript_embedding-87,transcript_embedding-88,transcript_embedding-89,transcript_embedding-90,transcript_embedding-91,transcript_embedding-92,transcript_embedding-93,transcript_embedding-94,transcript_embedding-95,transcript_embedding-96,transcript_embedding-97,transcript_embedding-98,transcript_embedding-99,transcript_embedding-100,transcript_embedding-101,transcript_embedding-102,transcript_embedding-103,transcript_embedding-104,transcript_embedding-105,transcript_embedding-106,transcript_embedding-107,transcript_embedding-108,transcript_embedding-109,transcript_embedding-110,transcript_embedding-111,transcript_embedding-112,transcript_embedding-113,transcript_embedding-114,transcript_embedding-115,transcript_embedding-116,transcript_embedding-117,transcript_embedding-118,transcript_embedding-119,transcript_embedding-120,transcript_embedding-121,transcript_embedding-122,transcript_embedding-123,transcript_embedding-124,transcript_embedding-125,transcript_embedding-126,transcript_embedding-127,transcript_embedding-128,transcript_embedding-129,transcript_embedding-130,transcript_embedding-131,transcript_embedding-132,transcript_embedding-133,transcript_embedding-134,transcript_embedding-135,transcript_embedding-136,transcript_embedding-137,transcript_embedding-138,transcript_embedding-139,transcript_embedding-140,transcript_embedding-141,transcript_embedding-142,transcript_embedding-143,transcript_embedding-144,transcript_embedding-145,transcript_embedding-146,transcript_embedding-147,transcript_embedding-148,transcript_embedding-149,transcript_embedding-150,transcript_embedding-151,transcript_embedding-152,transcript_embedding-153,transcript_embedding-154,transcript_embedding-155,transcript_embedding-156,transcript_embedding-157,transcript_embedding-158,transcript_embedding-159,transcript_embedding-160,transcript_embedding-161,transcript_embedding-162,transcript_embedding-163,transcript_embedding-164,transcript_embedding-165,transcript_embedding-166,transcript_embedding-167,transcript_embedding-168,transcript_embedding-169,transcript_embedding-170,transcript_embedding-171,transcript_embedding-172,transcript_embedding-173,transcript_embedding-174,transcript_embedding-175,transcript_embedding-176,transcript_embedding-177,transcript_embedding-178,transcript_embedding-179,transcript_embedding-180,transcript_embedding-181,transcript_embedding-182,transcript_embedding-183,transcript_embedding-184,transcript_embedding-185,transcript_embedding-186,transcript_embedding-187,transcript_embedding-188,transcript_embedding-189,transcript_embedding-190,transcript_embedding-191,transcript_embedding-192,transcript_embedding-193,transcript_embedding-194,transcript_embedding-195,transcript_embedding-196,transcript_embedding-197,transcript_embedding-198,transcript_embedding-199,transcript_embedding-200,transcript_embedding-201,transcript_embedding-202,transcript_embedding-203,transcript_embedding-204,transcript_embedding-205,transcript_embedding-206,transcript_embedding-207,transcript_embedding-208,transcript_embedding-209,transcript_embedding-210,transcript_embedding-211,transcript_embedding-212,transcript_embedding-213,transcript_embedding-214,transcript_embedding-215,transcript_embedding-216,transcript_embedding-217,transcript_embedding-218,transcript_embedding-219,transcript_embedding-220,transcript_embedding-221,transcript_embedding-222,transcript_embedding-223,transcript_embedding-224,transcript_embedding-225,transcript_embedding-226,transcript_embedding-227,transcript_embedding-228,transcript_embedding-229,transcript_embedding-230,transcript_embedding-231,transcript_embedding-232,transcript_embedding-233,transcript_embedding-234,transcript_embedding-235,transcript_embedding-236,transcript_embedding-237,transcript_embedding-238,transcript_embedding-239,transcript_embedding-240,transcript_embedding-241,transcript_embedding-242,transcript_embedding-243,transcript_embedding-244,transcript_embedding-245,transcript_embedding-246,transcript_embedding-247,transcript_embedding-248,transcript_embedding-249,transcript_embedding-250,transcript_embedding-251,transcript_embedding-252,transcript_embedding-253,transcript_embedding-254,transcript_embedding-255,transcript_embedding-256,transcript_embedding-257,transcript_embedding-258,transcript_embedding-259,transcript_embedding-260,transcript_embedding-261,transcript_embedding-262,transcript_embedding-263,transcript_embedding-264,transcript_embedding-265,transcript_embedding-266,transcript_embedding-267,transcript_embedding-268,transcript_embedding-269,transcript_embedding-270,transcript_embedding-271,transcript_embedding-272,transcript_embedding-273,transcript_embedding-274,transcript_embedding-275,transcript_embedding-276,transcript_embedding-277,transcript_embedding-278,transcript_embedding-279,transcript_embedding-280,transcript_embedding-281,transcript_embedding-282,transcript_embedding-283,transcript_embedding-284,transcript_embedding-285,transcript_embedding-286,transcript_embedding-287,transcript_embedding-288,transcript_embedding-289,transcript_embedding-290,transcript_embedding-291,transcript_embedding-292,transcript_embedding-293,transcript_embedding-294,transcript_embedding-295,transcript_embedding-296,transcript_embedding-297,transcript_embedding-298,transcript_embedding-299,transcript_embedding-300,transcript_embedding-301,transcript_embedding-302,transcript_embedding-303,transcript_embedding-304,transcript_embedding-305,transcript_embedding-306,transcript_embedding-307,transcript_embedding-308,transcript_embedding-309,transcript_embedding-310,transcript_embedding-311,transcript_embedding-312,transcript_embedding-313,transcript_embedding-314,transcript_embedding-315,transcript_embedding-316,transcript_embedding-317,transcript_embedding-318,transcript_embedding-319,transcript_embedding-320,transcript_embedding-321,transcript_embedding-322,transcript_embedding-323,transcript_embedding-324,transcript_embedding-325,transcript_embedding-326,transcript_embedding-327,transcript_embedding-328,transcript_embedding-329,transcript_embedding-330,transcript_embedding-331,transcript_embedding-332,transcript_embedding-333,transcript_embedding-334,transcript_embedding-335,transcript_embedding-336,transcript_embedding-337,transcript_embedding-338,transcript_embedding-339,transcript_embedding-340,transcript_embedding-341,transcript_embedding-342,transcript_embedding-343,transcript_embedding-344,transcript_embedding-345,transcript_embedding-346,transcript_embedding-347,transcript_embedding-348,transcript_embedding-349,transcript_embedding-350,transcript_embedding-351,transcript_embedding-352,transcript_embedding-353,transcript_embedding-354,transcript_embedding-355,transcript_embedding-356,transcript_embedding-357,transcript_embedding-358,transcript_embedding-359,transcript_embedding-360,transcript_embedding-361,transcript_embedding-362,transcript_embedding-363,transcript_embedding-364,transcript_embedding-365,transcript_embedding-366,transcript_embedding-367,transcript_embedding-368,transcript_embedding-369,transcript_embedding-370,transcript_embedding-371,transcript_embedding-372,transcript_embedding-373,transcript_embedding-374,transcript_embedding-375,transcript_embedding-376,transcript_embedding-377,transcript_embedding-378,transcript_embedding-379,transcript_embedding-380,transcript_embedding-381,transcript_embedding-382,transcript_embedding-383
SXwC9fSwct8,2024-01-11T15:10:59Z,Ultimate Docker Compose Tutorial,"in this video you will learn everything you need to know to get started with using Docker compose we'll go over what it is exactly what problems Docker compose was designed to solve its common use cases and of course we will do some Hands-On demos to learn actually using Docker compose in practice I am super excited to teach you all this so let's jump into it now in order to understand Docker compos you need to First understand docker and have some basic experience with it if you don't I recommend you pause and watch my Docker crash course first and then continue with this one because Docker compost is essentially a tool that is supposed to manage and work with Docker containers so you need to understand that part first so that you understand the context for learning Docker compost so in the docker video I break down what the containers are what images are what problems Docker solves and what use case it it has dockerizing your application with Docker file and all the concepts you need to understand Docker itself so based on that knowledge we can Now understand why Docker compos was created along with Docker and when we want to use it now applications are composed of many different parts you can have apis databases any Services your application depends on and even within the application you may have a microservice application which is basically an application broken down into multip micro applications or microservices and when you're creating containerized applications all of these different application components must be deployed and run together because they have dependencies on each other so basically you have a set of containers which are running different services and applications within them that need to run together that need to talk to each other and so on so Docker compose is basically a tool that allows you to Define and run multiple services and applications that belong together in one environment so simply put if you want to deploy multiple Docker containers where each container may have its different configuration options you can use Docker compose to do this to manage these containers way more easily now this is just a general definition to give you some idea of what Docker compose is but of course we want to understand this with specific examples and specific demonstration so that you really understand these Concepts and the actual use cases of using doer compose and not just a general abstract explanation of what it is and because of that we're going to jump right into that demo where I'm going to explain the concepts the use cases using those demonstrations so let's get started as a first step we're going to start two Services as Docker containers using just the docker command so we're not going to use Docker compos as a first step so we can see and compare the before after States first we're going to create a Docker Network where these two containers will run and talk to each other using just the container name and then we're going to start two containers one is going to be a mongodb container and another one is going to be Express container which is basically a UI for the mongodb database very simple use case and we're going to run both containers using Docker run commands so that's our first very simple demonstration let's go ahead and do that so I'm going to switch to a terminal because we're going to execute those docket run commands on the terminal and you probably see this is a fancy fun looking terminal that I have been using since recently and this is an application or a terminal app called warp which is actually a sponsor of this video I actually played around with warp and love using it it's free it's easy to install on your computer so I will be using warp throughout the entire day demo because it also helps highlight some of the commands and stuff better so it's going to be easier for you guys to follow what I'm showing you however if you want to install warp yourself on your computer you can go ahead and check out the link to get started in the video description where I'm going to provide all the relevant links for this crash course including the warp installation so to run our Docker containers of course we need to have Docker installed and running so I'm going to start up Docker and then we can start the containers so the docker service is up and running let's go ahead and create the docker Network first so I'm going to do Docker Network and since we're going to run mongodb and Express containers we can call this network  Network and let's create and now if I do Docker Network LS so basically list all the networks available these are the default ones basically that you get out of the box when you install Docker and this is the Network that we just created awesome so the network is there now let's run our two containers and if you know Docker if you followed my Docker crash course basically you know all this stuff Docker run and we're going to execute this in the background and we have the and Express image documentation so we can actually reference this so first I'm going to define the port uh mongodb's default Port is $27 07 so we're going to map that to the same port so we we're going to bind that to the same port on the host then we're going to define those two environment variables to basically set the admin or the root user and password so we're going to copy those and we're going to call this admin and this is some password we're going to set this to super secret so all these should be actually be a refresher from Docker we also want to specify that it should run in this network network so we're going to do Network run in this one we're also going to name our container instead of having Docker just create a random container name so we're going to call this DB and finally we need to specify the image right and this is the name of the image and that's basically our Docker command so I'm going to execute and this will fetch or pull the latest image from dockerhub repository and run it in a detached mode perfect so we should have have our mongodb container running and now let's start Express container and I can actually bring up my previous command and we're going to adjust it for the  Express right here we see that  Express is running on port 8080 so that's what we're going to set here there you go we also have different environment variables so basically Express is just a UI for mongodb and in order for us to use it it needs to connect and authenticate with mongodb so we need to provide it the credentials as well that we set for mongodb database and we're passing those also as environment variables but in this case the environment variables are named differently so that's what we're using referring to the official documentation which you always should do to get the most up toate data and you also see the default values for those environment variables the port is correct because that's what we binded it to on our host and mongod to be server which is going to be the mongod to be container name in our case it's different because we called our container mongod beam so we're going to set this environment variable as well so right here I'm going to add this and we're going to set these to mongodb let's not forget the backwards slash here so the ports are correct the environment variables are correct we are going to run it also in the Network we're going to name this Express so that's going to be the name of the container and let's see what the actual name of the image is just going to copy that so that I don't make spelling mistake and that's it let's execute this as well and seems like it started without any problems let's see perfect it's running and now to test that it was actually able to connect without any issues to the mongodb database container we're going to access it in our browser so we opened it on Port 881 on our host and it is asking for basic authentication in the browser and we can actually get those in the locks let's do that do logs of Express and here we have the credentials so admin pass should work and there you go so that's a test and a proof that it was able to connect to our database since we didn't have any connection errors here and we're able to access the application here so this was basically just to demonstrate how you would start containers that belong to each other so Express container actually depends on mongodb because we don't need it without the database in the background so kind of start containers that belong together that should run together using just plain Docker and also starting them in the same network so they can talk to each other in that isolated virtual Network now obviously these are just two containers but if we have microservice application with 10 different services that has a messaging service maybe two databases that it belongs to maybe those databases have their own UI services that we want to run in addition so now these are lots of containers that we need to start and manage using just plain Docker commands and now imagine if you need to stop those containers because you don't want to have them running all the time or you want to make changes and restart them again this is going to be a lot of manual tedious work and you don't want to execute these commands all the time on the command line terminal especially when you have tens of containers so you want an easier way to manage to stop start configure containers that you want to start together and that's exactly where Docker compose comes into the picture so Docker compos basically makes running multiple Docker containers with all this configuration that we just defined on those containers so you have the environment variables you have ports maybe you have multiple ports on the same container same application that you want to open maybe you want to configure additional volumes for example for data persistence so that's the main use case of Docker compose so with Docker compose basically you have a file a yaml file where you define all this configuration a list of contain ERS or services that you want to start together and all their configuration in one central place in a file that you can modify configure and use to start and stop those containers so let's see how the file looks like and how these Docker run commands actually map to the docker compost so how can we migrate or map all of these and write a Docker compost file that starts those two containers with exactly the same configuration that we defined here so this is a Docker run command of the mongod beam that we executed previously so basically with Docker compos file what we can do is we take the whole command with this configuration and map it into a file so we have that command defined in a structured way so if you have let's say 10 20 Docker containers that you want to run for your application and they all need to talk to each other and interact with each other you can basically write all the Run commands for each container in a structured way in Docker compose and Define the entire configuration there and this is how the structure in Docker compose will actually look like so the first two lines are required attributes of Docker compose file with the first line we basically Define the version of Docker compose which is the latest version that should be compatible with the docker compose that you have installed locally so the latest Docker compose tool installed on your computer will be able to read the latest Docker compose file version and then we have the services and Docker compose is super simple Services is basically an attribute where you can list all the services or all the containers that you want to run as part of this doer compos file so in this case the first service we want to Define is mongodb and that Maps actually to The Container name or rather this is going to be part of the container name when the services are created as Docker containers and for each service like Mong TB we have all the configuration for that specific container so the first one is obviously image because we are building the container from the image so we need to know which image that container is going to be built from and of course you can specify version Tech here next to the name the next one is the list of ports because you can open multiple ports on a container if there are multiple processes running inside the container but mostly you would just have one so this is where we Define the port mappings so mapping a container port to the host so just like in Docker command the first Port refers to the host the second one refers to the port inside container then we have the environment variables listed under an environment attribute like this and this is actually how the structure of Docker compose looks like for one specific command now let's actually add the second container command for Express and how that Maps into our Docker compost file so again we have the service which we can call Express and by the way the service names are completely up to you you can call them whatever you want just like the container names you can call the containers whatever you want and under that Express we have the same exact configuration options we have the image which refers to Express image again you can have a TCH here if you want to have a specific one then we have the port and all the environment variables that we defined with Docker run command under the environment attribute and this is how Docker compos will look like with multiple Services defined inside so basically Docker compos is just a structured way to contain very normal common Docker commands and of course it's going to be easier for you to edit this file if you want to change some variables or if you want to change the ports or if you want to add more services with those services and as part of everything as code Trend dock compose is basically a code that defines how your services should run within a file that you can check in to a code repository and multiple people can work on it together compared to a command that you just execute manually on your computer with individual Docker run commands the final thing here which you may already noticed is the network configuration is not defined in the docker compost so we didn't map that part from the docker run commands so this Monga Network that we created we don't have to explicitly create or Define it in Docker compost because Docker compose will actually take care of creating a shared network for all the containers from from the services list that it's going to run when we execute this file so we don't have to create the network specifically and then specify that all the containers run in that Network Docker compose will automatically take care of it and we're actually going to see that in action right away so now let's actually go and create a Docker compos file in a code editor so in this projects directory so basically where I'm in the terminal I created this mongos services. yl file which is my Docker compos file with those two Services defined here so exactly the same code that you just saw we have our credentials all our environment variables defined and since this is a yl format please make sure that your indentations are correct because yl is a very simple language but it's very strict on indentation so the services need to be on the same level and then inside that service you need to have correct indentation for the configuration attributes so now compared to the docker commands it's going to be easier for me to go here to this file first of all see what services I'm running with what configuration edit those make any changes add any new services that I want to run and now let's actually execute this Docker compos file and see how it works back to my warp terminal I'm actually going to stop all the containers because we want to start them using Docker compost so that's the first one let's stop them we can actually remove them and we can also remove the dock Network and there you go so we have a clean State no containers running and now how do we execute a Docker compost file with Docker compost good news is if you have Docker installed on your computer that means you automatically also have Docker compose installed so you don't have to do that separately that means we should have Docker compose command already available as part of Docker and Docker compos takes one attribute which is the file name Services there you go and the command which is up which basically means go through the docker compost file provided here and Run start all the services configured right here so let's execute this and we're going to see the result awesome so now there are a couple of interesting things that I want to point out and highlight in the output that we got and also explain some of the interesting Concepts behind so let's go through them one by one I'm going to scroll all the way up to the beginning of the output which is right here when we executed Docker compose command the first one is I mentioned that Docker compose takes care of creating a dedicated Network for all the containers and here we see in the output that it actually created Network called projects uncore default so this is the name of the network and it's going to run those two containers in that Network so if I open another terminal and if I do Docker Network LS we're going to see projects default network was created another interesting thing to point out is the container names for those two containers so in the docker compose we actually called those services mongodb and Express however as you see Docker compose actually added a prefix projects and a suffix at the end to each service so this is basically the folder that contains the docker compos file where the docker compos file is located as you see right here so Docker compose always takes the name of the folder where the docker compose file is executed and it uses it as a prefix of the container and then you have one as a suffix so we have one instance of each container and that's how the containers are called and we can also check our containers and here you see the names projects mongodb 1 another interesting thing to point out is that you see that the logs of those two containers are actually mixed so we have the mongod be logs Express then mongod be again and so on because we're starting both containers at the same time so if you had 20 Services defined here they will all start at the same time and you will see the logs basically just mixed together on Startup however when you have multiple Services where some Services actually depend on the others in our case Express depends on mongodb because it cannot establish a connection the initial connection with the service until mongodb is fully up and running so we may have such dependencies or we may have an application our custom web application that also needs to connect to the database when we actually start the application to fetch some initial data and so on however if the database is not up and running when the application starts the application will fail with an error because it won't be able to connect to the database because it's not ready for the connection yet and you may have lots of such dependencies when you're running multiple Services as part of one application and this is something that you can Define in Docker compose with a depends on attribute so you can explicitly say this service actually needs to wait for another service or container to be fully up and running until this container is created with a very simple dependson attribute so basically we can say the express service depends on and we can have multiple dependencies so for example we can say an application depends on two different databases to start plus an authentication Service so all of those should be up and running until we start the application because otherwise it's not going to be able to connect to those on the initial startup so dependon takes a list of the services and it basically says wait until all the dependent services are fully up and run running before you start this service so we can fix it very easily using this attribute and now since we have both Services up and running again I'm going to refresh here and we should see Express accessible from the browser and we can actually do something here so we can change something in the database so for example I can create a mydb database and inside that I can create my collection collection I'm very bad with with names and not very creative so that's all we got we have my DB and my collection and this actually creates those in the actual mongodb database cool and if I go back to the terminal we should actually see all these change logs from Express and in mongodb basically logs new entries in the database that it created cool now what do we do if we want to stop those containers or maybe we want to change some configuration in do compose and restart those containers right now since we have the dock compos process running in the terminal we're going to need to do contrl c to basically break out of the process and this is going to stop both of the containers however just like with Docker run commands we have the detached mode we can actually run Docker compose in the detached mode like this so we'll start the containers in the background however now if we want to stop the containers we could stop them using Docker stop commands and providing the ID of the container however again if we have 20 containers running this is not going to be a efficient way to do it and with do compose it's also very simple actually instead of up we do down and what this will do if we have 20 Services defined here that are running as containers it's going to go through all of those and it will actually not only stop those containers but also remove them so now if I do Docker PS a so this shows running and stopped containers so all the containers in any state you see that we have no containers because they have been removed completely and you also see the network itself was removed so basically with Docker composed down you have a very easy way to clean up the entire state so you don't have any leftovers of containers and networks that you created previously everything will be completely removed however when you're running containers and when you make changes like we did in the database for testing you may want to retain those changes the state or the data in those containers so you don't want to completely remove the containers you just want to stop them and then restart them and as you've learned in the docker crash course containers are ephemeral they have no persistence so all the data is gone when you remove the container because by default it doesn't have any persistence unless you configure that persistence with volumes however if you just stop the containers and restart them you will still have the state and data because the container itself was not removed it actually stayed locally so to demonstrate that let's do up again and with Docker compos you can execute stop command which simply stops the containers and if I do docker PSA you see that the containers are still available locally they're just not running they're in an exited status and we can start them again using Docker compose start command and if we refresh our mydb database and collection are gone we can create them again like this we can restart using Docker compose and the data should still be there so that's basically the difference between up and down commands compared to start and stop and obviously both have their different use cases and one more thing since we are executing Docker compose commands very often like this one for example we can actually go ahead and bookmark this like this so if we have too many commands in the history for example and if we are scrolling around which basically creates this visual marker and you can just click inside and it jumps directly to that command we can then copy that command and execute here perfect so now before we move on to the next part of this demo where we connect our own custom application to the mongodb database and run it also as part of Docker compos service let's go to the database and in our new collection let's actually create a new document that our application is going to need it's going to be a very simple document let's add two more attributes here so we're going to have let's call this my ID again as you see I'm very uncreative with names so this is going to be an ID that we can reference in addition to this generated ID and then we're going to have the actual data which is going to be a string and we're just going to write here some Dynamic data loaded from DB so when we load this from our application we know that it's coming from the database so I'm going to save this document in the collection you see it was created here here are the values the generated ID my ID literally my ID and this data um text okay and we're going to make this a little bit more interesting so we're going to use a custom JavaScript application which is a super simple application with just one file that simply connects to the mongodb database and displays the data in the browser so we can see some of the concepts in action and we're going to containerize our JavaScript application and run it as part of the docker compos services and of course I'm going to provide the link to the git repository where this JavaScript application is hosted in the the video description so you can just clone it locally to follow along and by the way you will also find the docker compost file in that repository so all the code that we write in this demo will be there so I have cloned my own application locally in the projects I've called it Docker compos crash course so let's switch inside and to show you how simple the application is I have opened it in the visual studio code so I don't have the docker compos here yet this is the entire application we basically have the server JS which is a node.js backend and index.html which has the style the JavaScript code which is basically just one function and the HTML code in one file so the simplest app ever created so first of all you don't need to understand any part of this code we're just going to concentrate on the configuration and the dockerization part part of this app so even if it's simple app you don't need to understand the code but just to run through the logic on a high level this backand basically connects to the database logic we have this index.html file which shows two lines of data we have some static data which is hardcoded in the file itself and then we have data that is supposed to come from a database so this is empty so we're going to set it dynamically from the data that we get from the database which is going to be this data right here and the way we do that is in this JavaScript section when we load this index HTML page it basically the front end basically sends a request to our server JS backand and it says fetch the data and in server JS we accept that request right here we connect to the database base using this logic right here and now that we are using my DB and my collection as the database and collection name that's why we created them in the database and it connects to this collection and it basically grabs the element that has this key value pair inside my ID one so it's going to get this data here from the collection and it's going to send that the whole object back to the front end as a response and then we're going to grab the data attribute from that response that's the data this is the value of the data and we're going to set it as the value for this second line so that's how the whole thing is going to work and in order to connect to the database because remember we actually set username and password on mongodb so our application needs to have that same username and password just like the  Express container had to have those credentials so we are providing those also as environment variables so just like Express had to receive those values as environment variables our application is also going to receive those as environment variables with these names so Mong to be username M Tob password and we use those to connect to the database that's the entire logic so now our goal is to take this application to build a Docker container out of it using the docker file blueprint which is right here also very simple simple because it's a nodejs application we use node as a base image uh we basically take the code that we have here in the app folder we copy it into the image we run npm install to download the dependencies inside the image and then we just start the application using node command which comes from here and server.js file which is this file right here so it starts the application on Port 3000 and logs this as a first log of the application so we want to use Docker file and again you learn Docker file in the docker crash course how to use it so all this should be familiar to you so we want to build our custom JavaScript application as a container and run it as part of Docker compose along with mongodb and Express Services that's the goal how do we do that first of all we need to copy that Docker compos that we created into this application code and remember another interesting point to highlight here Docker compose is part of the application code so developers work on Docker compose just like they work on Docker file and other parts of the application code which is the best practice to have all this logic together in one repository instead of scripts and commands spread on laptops and computers of different developers everything is in a central place so we created the this Docker compose file in the projects folder and we want to copy this into this folder so let's do a simple copy there you go and here we have our Services yl. compost file and as I said we want to add our application as a third service which is going to run as a container service but we don't have the image yet so we need to build the image as well in do compost what you can actually do you can Define both in one configuration so we can build and then start the container with Docker compose so right here I'm going to add the service for our nodejs application and let's call this my app because great with names and instead of image because we want to build that image first we're going to Simply provide build attribute and the build context which is current directory and this basically points to where the docker file is located as well as the entire build context for that image and the rest of the configuration is going to be the same as for other services so we have the ports in our case we're starting this application on Port 3000 so that's what we're going to Define right here so Port 3000 inside the container we're going to bind it on 3,000 on our host and as we saw we have the environment variables defined here as well so we need to set those so that our application will be able to connect to the database using those credentials and that's basically the entire configuration this will build our node.js application image using Docker file as a blueprint for the image and it will start it as a container on this port and pass in those environment variables that our application will read here and use it to connect to the database now we don't have to configure depend on here because the application doesn't actually connect to the database when it starts up so this is the startup logic so here we don't have any connection it only connects to the database when we load the application in the front end in the browser this function gets executed or this script gets executed and because of that we don't need to do depends on here and now let's go back to the terminal let's first of all see whether we have containers running let's get our Command to stop those containers so we're not going to remove them because we need the database collection and the data inside for our application and now I'm going to go into the docker compose crash course folder where we have the new Docker compose and I'm going to execute Docker compose up and let's execute and as you see it is actually building the new Docker image from the Noe base image and that was actually pretty fast and now we should have all three containers running let's check that and we have really bad names for our containers because the name of the folder is very descriptive large name which was used as a prefix for containers but that's fine and this were created from scratch so our previous containers with this prefix are not actually running instead it created the new ones and that brings me to another concept which is you can actually over IDE the value that is used as a prefix so maybe you want to reuse the same containers but you have moved the docker compost file to another location so let's actually remove those containers that we just started like this so now we only have those two and the way we can override is use using a flag on Docker compose so we can add an additional flag here minus P or also project name so essentially the name of the folder is assumed to be the project name so we can overwrite that project name value using this flag and we can call this projects which was the previous one like this and let's start the container let's do drps as you see our old instances of mongodb and Express were restarted instead of new ones being created plus the network called projects default that was already there and that means if I refresh this we still have our MB and my collection and the data inside for our application which means if I visit the application on Local Host 3000 which should see our awesome application and Let me refresh this once again so we can see the network traffic here we refresh so this was the fetch data request which we execute right here that basically returns this object that we created here from in the database back to the front end so if we go to preview or our response we see this object with my ID one this is the ID from the database and the data some Dynamic data loaded from DB and we're using that to set this line right here so if I actually went there and changed this like this and let save I'm going to refresh again you see that now we get this updated data from the database so the entire connection Works our application is connected to the database and displays that information right here now I mentioned that dock compose is part of the application code which means it gets committed and stored in a git repository so that everyone can work on it it's available for the entire team if a new engineer joins the team and they download the code they have docu compos so they know know exactly what services are running as part of that application and they can easily start that locally however that also means that it's really bad that we are hardcoding our secret credentials in the docker compost file because the best practice for security is that you shouldn't hardcode any sensitive data in the application code so it doesn't end up in the git repository and even if you remove it later if you accidentally checked it in and removed it it's still going to in the commit history so you shouldn't have any hardcoded values here so how do we solve this because we need those credentials to be passed on to Services well for that we can actually use variables or placeholders in Docker compost instead of the actual values and we can set the values of those variables as environment variables on the operating system so let's see how it works first of all we're going to remove all those hard-coded values and instead we're going to define the variables in Docker compos which has a syntax of dollar sign and then curly braces and inside that we can name the variable whatever we want I'm going to call this  admin user because it's the admin user in mongod to be and by the way this could be lowercase you can call this really what you want but I'm using a standard environment variable name convention here with all upper cases so we have the admin user let's call this admin pass for password and we're going to reuse use those everywhere which is another advantage of using variables because if you change those values like if you change the password value for example you just have to change it or set it once and it automatically gets updated everywhere so now this do compost does not have any hardcoded sensitive data and it's safe to check it in the G repository however we still need to set those actual values so to test that let's go back to the terminal first of all I'm going to stop those stop the containers so we can test that everything works and on the first Docker compos command execution we get a warning that says the variables are not set the containers were stopped however we need to set those as variables in our terminal session so we set them here export admin user let's set the other one like this and the same way as we did with up command we actually need to specify which containers we're stopping so by default it's going to look for containers that start with this name the name of the folder so we need to overwrite that projects tag again and there you go and I'm actually going to bookmark this one as well like this and if we refresh we should see that the pages are not working because the containers are stopped and then let's start them again and if we start them again with those environment variables set everything should work same as before let's wait there you go now I want to mention here that Docker compos actually has a concept of Secrets which is another functionality to manage the secrets especially when you're running do compos in a production environment which is exactly for this use case where you need to pass in credentials or any sensitive data to the services defined in Docker compose so you can use Docker compose Secrets as an alternative to this method basically awesome we have just learned the fundamentals of docker compose and more importantly you understand its core use case and by the way I want to highlight the importance of learning tools like Docker and Docker compos or generally cloud and devops Technologies because nowadays it is becoming more and more needed for software developers to learn those tools to become more valuable in their roles especially in the current tense job market where we have layoffs and companies hiring less as more and more companies are adopting devops it is a great way to Stand Out Among developers who only focus on programming and are not interested to learn new Concepts and tools that are being adopted in the industry so I think it's definitely more important than ever to educate yourself keep learning and with devops or Cloud engineering skills you will definitely be ahead of 90% of developers in fact most of our devop boot camp students are actually software developers or software Engineers since many companies do not have a separate devops engineer role but often their responsibility lies on senior developers to set up the devops processes like release pipelines for example so even if you are a junior software engineer learning devops and Cloud skills and technologies will absolutely accelerate your career to a senior engineer so if you want to get a complete education on devops to take over devops tasks at your work then definitely check out our devops boot camp you will learn various Technologies from zero to an advanced level to be able to build real world Davos processes at your job and if you need some guidance before you can also contact us there with your questions so check out the information below and let's move on to the next part so now we are building and running our JavaScript application as a container along with mongodb service and the mongodb UI but usually that's a testing environment as you learn in the docker crash course eventually you want the JavaScript application your custom application container to be stored centrally in a Docker registry or rather the image to be stored in Docker registry so we can start and deploy it as a container on the end environment on a actual deployment server where end users will access it so we need to build the image and push that to the repository like a dockerhub repository or whatever other Docker repository want and now the interesting question is after we push the image to private Docker repository how do we reference our Custom Image from our private Docker repository in Docker compose and also note that when we run this on an actual deployment server we're going to copy the docker compose on that server where we have Docker and Docker compose installed and when we run this Docker compost file or execute this it will go through all the services and it will pull all the images defined here and run them as containers with all this configuration so we pull the official images from docker H public repository and any custom images from the private repositories so let's actually see how it works it's actually very very easy and again building image pushing it to the repository the whole thing you should already know it from the docker course so this should be a refresher for you so let's actually see that in action right here so first of all I'm going to log into my dockerhub account and I'm actually going to create a new private repository in dockerhub like this let's call this my app because it's generic I may use it for some other demonstration later so there you go and now we're going to build our image using the docker file and we're going to push that image to this specific private repository so let's execute those commands I'm going to build using Docker build command I'm going to tag this and this is again a refresher from Docker course we need to take the image with the name of the repository so that Docker knows on push command which repository to push that image to so that's going to be the entire name so the image name itself includes the repository name and we're just going to tag it with a simple 1.0 and we need to provide the build context which is the current directory where Docker file is located and that's basically it let's execute again super first let's list all the images so we can see what we have built locally and there you go this is our image with an image tag and this is exactly the image we want to push now to the private reposer and you know when we want to push or pull from a private repository we need to be logged in to that repository so we need to do Docker login and the username is actually your dockerhub username name and dockerhub user password and this is actually different for other Docker repositories so if you have a ECR or some other Docker repository the process may be different with dockerhub it's very simple that's why I use it for the demos mostly so we are now logged in to dockerhub and what I can do now is basically push that image that we just created using simple Docker push and the image full name with the tag and there you go and if I refresh we should see one tag here 1.0 for our my app image repository perfect and one thing I wanted to show you here is that whenever you are building and pushing an image you basically have the same commands all the time for the specific action you build the image you log in if you're not logged in already you push the image and so on and I have actually used a feature called workflows in workp for these kind of use cases which can be really helpful if you want to if you have a set of commands that you always need for the same type of workflow you can basically Define that as one unit so you can group those commands in one unit called the workflow and you can save it here and whenever you need that you can just execute all those commands with one click which I personally found super cool so in warp drive you have some options here you create a new workflow and I'm going to call this Docker push and here you can list the different commands basically so let's do Docker login and we have username which was this one right here and obviously we don't want to provide a password hardcoded here so we're going to pass that as very variable or argument and we're going to read that from the standard input again this is a refresher from Docker this is how should use Docker login so you don't type in the password directly and with worp you can actually use arguments like this so whenever you run this command or list of commands before it runs it will actually tell you how you should fill out this argument so we're going to use an AR arent here and then after Docker login we're going to do Docker build like we did with an image tag we can also make this an argument let's make this an argument number two and then push that like this you can also set default values let's actually do 1.0 here and this way you don't have to type out all the commands for the same workflow so let me check all these commands so we need a build context at the end and the rest looks pretty good and let's save the workflow and the way it works is now I have the workflow right here and whenever I need that workflow to execute I just click on it and it fills out the terminal basically with all these commands and it highlights the the arguments that I need to set so I'm actually going to put my password here as an argument and then let's say we want 1.1 as a second argument and we can execute all the commands like this and this will actually have pushed another tag with 1.1 so this is a cool feature that you can use on warp to make your life a little bit more convenient and that means now we have our image with two different Texs in a private Repository and now if we go back to the dock compost we don't need to build it locally we can again this is convenient for testing because when you're testing on a local environment as a software developer as an engineer you may want to just do very quick local changes in a Docker file or in application test it quickly and you don't want to be building and pushing and pulling image all the time so this is a very good functionality for local testing however on an end environment obviously we need to Define an image that comes from a repository maybe we have scanned that image already and made sure that it's secure and properly configured and so on and now we want to actually use it and how do we reference our Custom Image from a private repository in Docker compose very simple basically do it just like any other image in dockerhub or any other repository like this with a specific image tag that is available let's do 1.0 and how will Docker compos be able to pull that image from a private repository or basically authenticate with the private repository to pull the image it actually uses the same Docker login that we use to do Docker push so Docker login basically creates after successful login authentication with the docker Hub it actually creates a Docker Json file locally that creates the authentication credentials or tokens in that file and Docker compos in the background is using Docker to run those containers so it's going to be the exact same process pulling or pushing the images from Docker compose so that means if you have done Docker login already to that repository then you should be able to pull any images defined in Docker compose from that repository that means that's the configuration this should work now in order to test that let's actually stop our containers so they're all stopped and I'm actually going to remove the application container because we want to simulate that the container is recreated from the new image that we pull and now if we do up again in DET mode and as you see my app image was pulled and the container my app was started from that if we check the running containers we see that this is the image that was used to create this container awesome and again we can check that our application still works and there you go that's how we can reference our Custom Image from a Docker repository in the docker compose and in case when you're executing those commands so let's say we're doing Docker build and you forget one of the arguments or use a wrong flag and so on first of all you get an error but you can also do a troubleshooting feature within the terminal to actually give you a pretty good tips and notes on what the error actually is because sometimes we make spelling mistakes sometimes we forget an argument or whatever so it could be helpful for a tool to actually tell you what the actual problem is so you can fix it and warp has this AI assistant which is pretty cool so for this specific error if I open this warp AI which you can see on every command block so you have this bookmark and you have this warp AI so if I click on this it actually autog generates the question question because it knows that this is an error and you can ask it how to fix it so you can modify your question or example and if I hit enter here it gives me an answer that the docker build command requires an argument which should be the path to the docker file and gives me an example with the correct one so change the directory that has Docker file and then execute this command which has dot at the end so I found this feature also pretty cool which means if any of the commands give you an error while you're following this demo you can actually use this to find out what the error is about and and ideally how to fix it so this is going to help you troubleshoot your issues and finally I want to actually add a few very interesting and important Concepts regarding docu compose and kind of what the next steps are so this final small section may be really really interesting for you so basically as you see the main use case of Docker composed was to have a central place to manage containers that were supposed to run together like your application and all the services that it depends on and we configure all the environment variables or any other configuration for those services in that one file and also start them in one isolated Docker Network and it makes it super easy for us to clean up all the resources so Engineers took Docker and they containerized their applications to a whole new scale that was not a standard before and Docker was especially perfect to use as a host for microservice applications where you have even more applications and more containers now running in one environment and again if you don't know about microservices I have a separate video about them but essentially it's when you have all the services needed to run one application but split into separate micro applications or services and they can be scaled independently and run independently as independent containers so Docker was a perfect host for that so we ended up with lots of applications lots of microservices applications with hundreds or thousands or tens of thousands of containers that is pretty much a standard nowadays such a scale actually led to Docker compost actually not being able to handle such large scale of containers and more importantly Engineers will have to still manually manage running and operating those containers with do compose like if containers die or crash or have connectivity issues ETC you have to manually detect and then debug and restart the services now Docker compose actually made some improvements on that there tags like restart and so on but it's still a lot of operational effort to run the containers with this kind of scale where you have thousands of them using Docker compose and that's where kubernetes kind of came into the picture to solve exactly these two main issues initially scaling to thousands or tens of thousands of containers with kubernetes you can basically merge hundreds of servers into one huge server to deploy all the containers that belong to the same application in that environment they will all run as if they were running on the same server so it naturally makes it easier to scale your applications and to run thousands of instances and the second one was the automatic operations or making the operations of applications easier or also called kubernetes Auto healing feature which basically manages starting and restarting containers if they crash and has mechanisms to manage operations of a large number of containers in an automated way when manual effort isn't it's just impossible or not feasible anymore and that led to C is becoming so popular so Docker compose is kind of like a intermediary step if you have smaller set of containers but with today's standards when you want to work with very complex applications with a large scale then Docker compose has its limits so that's where kubernetes basically comes into the picture so if you're learning this containerized containerization and container orchestration Concepts then I would actually recommend to use this road map of learning the docker using the docker crash course then learning the docker compose with this course like you did and then you can move on to the kubernetes and if you want to learn kubernetes I also very conveniently have a kubernetes crash course to get you started in kubernetes very easily so if you want to get started with that you can check out any of the many videos that I have on my YouTube channel but I would recommend to start with the kubernetes crash course so I hope you learned a lot of new Concepts you obviously learned Docker compose as a new tool new technology thank you for watching till the end let me know in the comments how this video actually helped you in your work or maybe in your job application I'm always happy to hear and read that feedback from our viewers to know that my videos are helpful in actual job environment you can also share any other tips and learnings about dock compose that you have from your practical experience so that other viewers can read and benefit from it as well and with that thank you for watching and see you in the next video",-0.041817449033260345,-0.003349442034959793,0.03529070317745209,0.02256752923130989,0.015989789739251137,-0.040791094303131104,-0.06278901547193527,0.005942353513091803,-0.04361005872488022,0.06771920621395111,-0.018254971131682396,-0.024155430495738983,0.006433353293687105,-0.04030616208910942,0.00597015954554081,-0.025118140503764153,0.05453880876302719,-0.016970966011285782,0.04318062588572502,-0.0015943461330607533,-0.1254117488861084,0.01823573000729084,-0.05153735727071762,-0.0033770997542887926,0.041141897439956665,0.04833616316318512,-0.05098099634051323,0.004439440090209246,0.07277791947126389,-0.020818252116441727,0.0003638291673269123,0.04932277649641037,0.11281602084636688,0.021648535504937172,-0.002224229509010911,0.08219598233699799,0.07711289077997208,0.01659361645579338,-0.054924532771110535,-0.09552640467882156,-0.03528520464897156,-0.054390497505664825,-0.03483649715781212,-0.047229666262865067,-0.039909783750772476,-0.06864087283611298,-0.04643469303846359,-0.12945358455181122,0.02436475269496441,0.07425609230995178,-0.12227978557348251,-0.09540921449661255,-0.030230091884732246,-0.02831530198454857,0.03745800629258156,0.04326456040143967,-0.017145581543445587,0.07236918061971664,0.0063768369145691395,-0.020791122689843178,-0.0424962118268013,-0.025337187573313713,-0.016667693853378296,0.007898984476923943,0.07117149233818054,-0.043788645416498184,-0.0009378799004480243,0.056850239634513855,-0.013723043724894524,0.012206287123262882,-0.006925695575773716,-0.016283918172121048,-0.09034411609172821,-0.045193616300821304,0.019289422780275345,-0.0010672988137230277,-0.022746337577700615,-0.045785412192344666,-0.10584563761949539,0.07442927360534668,0.012346303090453148,0.009174033999443054,0.004114334471523762,-0.020977124571800232,-0.03936536982655525,0.052238818258047104,-0.009988953359425068,-0.01246827282011509,0.01941731758415699,-0.03184480592608452,0.05745166540145874,-0.04222065582871437,-0.004680048208683729,0.012368783354759216,0.058173295110464096,0.01729927398264408,-0.08575909584760666,-0.04246637225151062,0.012467111460864544,0.03583354875445366,-0.024663418531417847,-0.04503598436713219,0.026669787243008614,-0.10221554338932037,0.07892215996980667,-0.07384740561246872,0.034224435687065125,0.012502419762313366,-0.004232416860759258,-0.01128893718123436,0.02341032586991787,-0.052215058356523514,-0.07020755857229233,-0.025422070175409317,-0.041195861995220184,0.017637858167290688,0.07756506651639938,-0.08726721256971359,-0.0007533518364652991,0.0074480758048594,0.021927732974290848,0.04285436496138573,0.02034727856516838,0.016289182007312775,-0.02178666926920414,-0.037247560918331146,-0.0014812333974987268,4.370226265193215e-34,0.09703750163316727,-0.06690990179777145,0.0779983326792717,0.06730951368808746,0.18882635235786438,-0.02386598289012909,0.06401535123586655,0.00778600201010704,-0.06189965829253197,-0.0018400478875264525,0.01588214933872223,0.041716791689395905,-0.033178865909576416,0.1122901514172554,-0.0011509236646816134,-0.12318648397922516,-0.04582127183675766,0.03655748814344406,0.012017643079161644,-0.06987673044204712,0.006662348285317421,-0.0355551578104496,-0.003795062657445669,-0.08643252402544022,0.031738534569740295,0.08696892857551575,0.03935142233967781,0.011645175516605377,0.015054300427436829,-0.0056308903731405735,-0.042723700404167175,-0.05115649104118347,-0.0650097206234932,0.04722323641180992,-0.048943132162094116,0.0018202400533482432,-0.03653612360358238,0.042322639375925064,-0.055581413209438324,0.010894792154431343,-0.039523348212242126,-0.0612555593252182,-0.03574635833501816,0.00367183331400156,0.030358457937836647,-0.03215016424655914,0.013238340616226196,0.1051153913140297,0.12059479206800461,0.0384514220058918,0.029861606657505035,-0.04106714576482773,-0.0556667223572731,0.04183916002511978,-0.028351977467536926,0.0618387795984745,-0.04453856870532036,0.0258648581802845,0.0030195859726518393,-0.029425278306007385,-0.09843172132968903,0.0073901694267988205,-0.058435700833797455,0.02623174525797367,0.022806042805314064,0.06589240580797195,-0.04915228113532066,0.024996096268296242,0.07374202460050583,0.06484655290842056,-0.011151693761348724,0.01571277156472206,0.030264968052506447,0.016884155571460724,-0.03173092007637024,-0.011017877608537674,-0.06672394275665283,-0.06521912664175034,0.044733211398124695,0.06134752929210663,-0.07460491359233856,0.08575554192066193,-0.027729028835892677,0.08196227997541428,-0.024909066036343575,-0.022492000833153725,0.08594050258398056,0.09537150710821152,0.01516013965010643,0.05038135498762131,0.009504340589046478,-0.03966432064771652,0.010617722757160664,-0.05053836479783058,-0.03023996204137802,-1.8269046472350355e-33,0.009687612764537334,-0.03293965384364128,-0.07039406150579453,0.051659610122442245,0.031460605561733246,0.023999327793717384,0.06872444599866867,0.03945142403244972,0.0017138151451945305,-0.05188955366611481,-0.006631669122725725,0.10239558666944504,0.05999987572431564,0.04800882190465927,-0.16331937909126282,0.04466542601585388,-0.05485956370830536,0.008203568868339062,0.05837000906467438,-0.03363041579723358,0.029216840863227844,-0.0008448302396573126,0.09650234878063202,-0.017377596348524094,-0.036913610994815826,-0.06724671274423599,0.12962496280670166,0.02646937407553196,-0.0679536908864975,0.022566843777894974,0.059288494288921356,0.04350156709551811,0.031616996973752975,0.01022593304514885,0.01865009404718876,0.04597035050392151,-0.03714266046881676,0.09877517819404602,-0.043327391147613525,-0.02269039861857891,0.0028101883362978697,-0.055108316242694855,-0.05597979947924614,-0.008556399494409561,0.016034353524446487,-0.037985365837812424,0.005644719582051039,-0.007574358023703098,-0.007307339925318956,0.033633653074502945,-0.011814060620963573,-0.11428635567426682,0.03520950302481651,-0.04896226525306702,-0.008068653754889965,-0.05584496259689331,0.029172664508223534,0.008850726298987865,-0.012640176340937614,0.002671274123713374,0.09958403557538986,-0.00782023649662733,0.024087848141789436,0.014571603387594223,0.059960562735795975,-0.013563787564635277,-0.08638384193181992,0.030919168144464493,-0.08849290758371353,0.015337788499891758,0.04572515934705734,-0.012273476459085941,0.044830095022916794,0.018459502607584,0.09305759519338608,-0.03057909570634365,0.019333280622959137,0.06172899901866913,0.03286706283688545,-0.02094573713839054,-0.015416240319609642,0.04319703206419945,-0.03286890685558319,-0.06031019240617752,-0.01783863641321659,-0.015086185187101364,0.10091264545917511,0.03259958699345589,0.011945804581046104,0.010251287370920181,-0.033205561339855194,0.053495995700359344,0.00043587651452980936,0.08930078893899918,-0.012495274655520916,-1.4542664850125675e-8,0.003994227387011051,0.0012327845906838775,-0.08773735910654068,0.01952592097222805,-0.020010778680443764,0.016144132241606712,0.09027951955795288,-0.03979083523154259,-0.016156045719981194,0.02205316163599491,-0.03696677088737488,-0.051106248050928116,-0.027953004464507103,-0.010101715102791786,0.07796573638916016,0.04807894676923752,0.024322833865880966,0.011329947039484978,-0.05731436237692833,-0.11459460854530334,-0.009488983079791069,0.01028031948953867,0.06271016597747803,-0.11219318956136703,0.014478162862360477,0.06138882040977478,0.03845162317156792,0.01900160312652588,-0.008135165087878704,-0.03616615757346153,0.023210370913147926,0.033254045993089676,-0.05854141339659691,-0.014616084285080433,-0.027651218697428703,0.007300843019038439,-0.027517089620232582,-0.03721503168344498,-0.03557803854346275,0.010737604461610317,-0.06096312403678894,-0.03625834733247757,-0.017083242535591125,-0.10544394701719284,-0.03599720820784569,0.021710896864533424,0.024279115721583366,0.026915330439805984,-0.05246095359325409,0.10511366277933121,0.03468998894095421,-0.02812412567436695,0.027838435024023056,-0.00833096168935299,0.08175697922706604,0.05215426906943321,0.009681952185928822,0.0507650226354599,0.06986688077449799,-0.0017210845835506916,0.007811766117811203,0.15853682160377502,0.011542572639882565,0.058016374707221985,-0.024875188246369362,-0.03125639259815216,0.04172840714454651,-0.025628283619880676,-0.010637551546096802,-0.0337701290845871,-0.005510146263986826,0.07106804102659225,-0.029015567153692245,0.024545244872570038,-0.03670321777462959,-0.03449838608503342,0.03708057478070259,-0.01785670965909958,0.016641121357679367,-0.051803845912218094,0.06902102380990982,-0.024710576981306076,-0.0334092378616333,-0.0107605354860425,-0.027239779010415077,0.039718352258205414,-0.06127505749464035,0.030947577208280563,-0.07787269353866577,0.09363328665494919,-0.03372934088110924,-0.03590177744626999,0.039958562701940536,-0.0038271250668913126,0.02463064156472683,0.04736461490392685,0.08519522845745087,0.02451821230351925,-0.0682087317109108,0.10410083085298538,0.0972580537199974,-0.03635518625378609,-0.03583570569753647,-0.08969578891992569,-0.029164716601371765,-0.052278775721788406,-0.050666406750679016,-0.07107993960380554,0.00863431766629219,-0.03631969541311264,-0.023269031196832657,-0.1036318987607956,0.027071135118603706,0.044501423835754395,-0.10558424890041351,-0.0650470107793808,-0.06297200918197632,-0.047249481081962585,0.008850835263729095,0.049473442137241364,0.041601307690143585,0.062000881880521774,-0.042862650007009506,-0.05283156782388687,-0.042355816811323166,-0.018163258209824562,-0.028415611013770103,0.030674900859594345,0.14194872975349426,-0.07783429324626923,-0.040634095668792725,0.06003303825855255,0.05205191299319267,-0.07435716688632965,-0.05130444094538689,0.016224723309278488,-0.022866347804665565,-0.012080992572009563,-0.07057549059391022,-0.009737283922731876,-0.0003228259738534689,0.018501823768019676,-0.08603331446647644,0.04028462991118431,0.09677358716726303,0.11947359144687653,-0.017926841974258423,-0.004431216977536678,-0.10048361867666245,0.02180076204240322,-0.0005388563149608672,0.02956262230873108,0.012121135368943214,-0.05574559047818184,0.07383403927087784,-0.013730366714298725,0.01896999403834343,0.0250273197889328,0.1646534949541092,0.03516711667180061,-0.05142238363623619,-0.011745911091566086,0.018249215558171272,0.02754809334874153,0.020984912291169167,-0.03271368145942688,0.029451945796608925,-0.08780340850353241,0.0490771122276783,-0.06385436654090881,-0.0021045079920440912,-0.010225403122603893,0.03851920738816261,-0.007533441763371229,0.024038515985012054,-0.028481248766183853,-0.08453595638275146,-0.03150874003767967,-0.001017198315821588,0.033837173134088516,0.006780329626053572,-0.07597576826810837,0.04346649348735809,0.012605707161128521,0.01846509799361229,-0.005964594427496195,0.052475932985544205,-0.03873296082019806,0.01434353832155466,-0.105692058801651,-0.009348077699542046,3.978529323309158e-33,0.046094704419374466,-0.043239135295152664,0.0725281685590744,0.13679713010787964,0.14297540485858917,-0.03410061076283455,0.07737801223993301,0.038387905806303024,-0.006890343502163887,-0.03738821670413017,0.06816878914833069,0.032697517424821854,-0.010257899761199951,0.12363049387931824,-0.022708402946591377,-0.08590388298034668,-0.05834073945879936,-0.016945678740739822,0.02630186267197132,-0.04400112107396126,0.01282733678817749,-0.057288676500320435,0.014041366055607796,0.0032934830524027348,0.08764910697937012,0.024428872391581535,-0.019864266738295555,-0.023632191121578217,-0.033901397138834,-0.00612271623685956,0.003685325849801302,-0.0526864156126976,-0.08549822121858597,0.040561262518167496,-0.010183047503232956,-0.0010335238184779882,-0.031664878129959106,0.004489590413868427,-0.0814630463719368,-0.04845085367560387,-0.026978882029652596,-0.0312323160469532,-0.03969506546854973,0.0506078340113163,0.007174298167228699,-0.043088290840387344,-0.0010366359492763877,0.011089378036558628,0.026902448385953903,0.05835811421275139,0.05743585154414177,-0.06005880609154701,-0.05188725143671036,0.04789658263325691,-0.0377889908850193,0.06153544411063194,-0.003306992119178176,-0.06877105683088303,0.018936630338430405,-0.009288787841796875,-0.07191631942987442,0.010448966175317764,-0.05498115345835686,0.03832337260246277,0.02761378139257431,0.10273542255163193,-0.04114091396331787,0.049720700830221176,0.07089557498693466,0.0524345263838768,-0.011168302036821842,-0.009436811320483685,-0.03957361727952957,0.01933371089398861,0.018750382587313652,0.02476564049720764,-0.017144793644547462,-0.07279079407453537,-0.017695419490337372,0.06068098917603493,0.013648873195052147,0.03535797446966171,-0.06402353942394257,0.003206660272553563,-0.12747232615947723,-0.0267511997371912,0.09763484448194504,0.06395076215267181,0.04629466310143471,0.0037912954576313496,0.06416299194097519,-0.001385029056109488,-0.04956989735364914,-0.0032196594402194023,0.006549719721078873,-6.7536558558556e-33,-0.03605816513299942,0.050766777247190475,-0.11174855381250381,0.01983320154249668,0.016311699524521828,-0.03112582117319107,0.037427205592393875,-0.013781420886516571,0.030615516006946564,-0.07929950952529907,-0.135771706700325,0.07217661291360855,0.026842106133699417,0.07679452002048492,-0.14890366792678833,0.03251834213733673,-0.04964121803641319,0.01812770403921604,0.006993824616074562,-0.028253715485334396,0.008109834976494312,0.02169959619641304,-0.0027028615586459637,-0.0603095181286335,-0.07087937742471695,-0.027666103094816208,0.015156088396906853,0.026622939854860306,0.025104161351919174,0.04413606598973274,0.08680050820112228,-0.016838438808918,0.09673064947128296,0.01241263933479786,-0.020734595134854317,0.03413200005888939,-0.07517803460359573,0.028115374967455864,0.030118901282548904,-0.10337802022695541,0.05068536847829819,-0.034814655780792236,-0.01954585500061512,-0.044003330171108246,-0.03345808759331703,-0.07274296879768372,-0.04440135136246681,0.03471463918685913,0.031461697071790695,0.024631692096590996,-0.01927928254008293,-0.05267489328980446,0.004735616501420736,-0.05380789935588837,0.0010213798377662897,-0.06050004065036774,0.02269650250673294,0.0034479761961847544,-0.043715912848711014,0.010372762568295002,0.017728516831994057,-0.004823348484933376,0.01156425941735506,0.06559015810489655,0.027074243873357773,-0.10038967430591583,-0.04767951741814613,-0.00926974881440401,-0.09512800723314285,0.04718266800045967,-0.0003272717585787177,-0.02384069561958313,0.01707444153726101,-0.026496268808841705,0.02651975303888321,-0.06407015025615692,-0.016696136444807053,0.08287117630243301,-0.013420574367046356,-0.00634933402761817,-0.007261767517775297,-0.001777873607352376,0.015216545201838017,-0.020120767876505852,-0.007960804738104343,0.03384393826127052,0.10246499627828598,-0.011400916613638401,-0.0018999810563400388,0.007661483250558376,-0.005705154500901699,0.05075497925281525,0.003795645898208022,0.08708759397268295,0.004427480511367321,-5.069897213161312e-8,-0.020206594839692116,-0.04856618493795395,-0.025468194857239723,0.06204652786254883,-0.026970095932483673,0.06362844258546829,0.07110027223825455,0.005519127938896418,0.0028602255042642355,0.048315033316612244,-0.09688830375671387,-0.06671939045190811,-0.07114975154399872,-0.037347257137298584,0.05807659775018692,0.09252243489027023,0.027992285788059235,-0.02730356529355049,-0.037800807505846024,-0.07037793099880219,0.025314878672361374,-0.058389779180288315,0.00882539339363575,-0.020397771149873734,0.01677709072828293,0.046823207288980484,0.0667407214641571,0.03394712135195732,-0.03829844668507576,-0.022053150460124016,0.023700566962361336,0.03885867819190025,-0.03306405618786812,-0.008198650553822517,-0.02246602438390255,-0.005774193909019232,-0.01547278929501772,-0.06011371314525604,-0.01786026731133461,-0.018854528665542603,-0.07358680665493011,-0.047955963760614395,0.040750227868556976,-0.07362203299999237,-0.03811338171362877,0.01858513243496418,-0.021890640258789062,-0.0232651736587286,-0.01627182587981224,0.10576881468296051,0.030552346259355545,0.018378937616944313,0.004761326126754284,0.03903467580676079,0.07432588934898376,0.06468703597784042,-0.012460426427423954,0.046436939388513565,0.11875142902135849,0.027869433164596558,-0.015953073278069496,0.14371664822101593,0.04912063106894493,0.019166814163327217
gLJdrXPn0ns,2023-12-07T15:01:28Z,DevSecOps Tutorial for Beginners | CI Pipeline with GitHub Actions and Docker Scout,"Welcome to this
DevSecOps Crash course. After an extremely successful
launch of our complete DevSecOps bootcamp, which so many of you
were interested in and so many companies
are already using to upskill their engineers. After seeing this immense
interest in this topic, I wanted to create a DevSecOps
crash course for those who want to get an idea of what that is, to get a basic understanding
of DevSecOps concepts, DevSecOps tools, and get their very first hands
on experience with actual practical implementation
of DevSecOps. So in this crash course, we're going to go through
the fundamentals of what DevSecOps is, as well as see some hands
on examples with a demo project. So you get an understanding
of it. And then if it spikes
your interest, you can decide if you want
to actually enroll and do a full DevSecOps bootcamp
to learn this extremely demanded skill set
and basically just get way ahead in your career.
So let's get started. Security is important at all levels of software development lifecycle.
In the application itself, the application's
runtime environment and underlying infrastructure, which could be on premise
or cloud platform. And it's important to the level
that when companies fail to properly secure things
and they get hacked or some data gets leaked,
et cetera. Where their user data or company
data gets compromised, or their systems get attacked
and aren't accessible anymore, the price they pay
for that is way more expensive than actually
implementing the security. And it's expensive, both financially but also
reputation wise. And of course, that means all companies
should implement security. However, it is pretty difficult
and there are two biggest challenges companies
have in terms of security and what may be
the reason why they fail to actually implement
the security. First of all, often feature development
and providing business value is more incentivized
because that's what brings in customers. That's what provides the direct
value for users. And very simply, that's what brings in money
for the business. So security is like
a necessary evil. You don't get so much
reward and pat on the back for implementing great security. But if a security
incident happens, you get real punishment. So security stays
an afterthought in application development
or even infrastructure configuration
process. The second issue is, even if you and your
team are dedicated to implementing great security, you still have a challenge
because the application systems themselves are becoming
more and more complex. Think about the modern
tech stack. In our application systems, we have a large
containerized microservices application that is running
in Kubernetes cluster on cloud platform, using tons of different
services with data persistence in ten different
types of databases. You may have like a
primary database, a SQL database, NoSQL database,
a caching or memory database, and so on, and tens of external
services that your application may be talking to.
Additionally, we have a streamlined CI CD
pipeline that deploys to the cluster. Imagine how many entry
points and how large of an attack surface such
a complex system has that may allow different
types of attacks. These levels could be within
the application itself. So your own code or third party
applications and libraries that allow for SQL injection,
for example, or cross-site scripting
or forging requests from clients or even worse,
from servers, then you may have security
issues within your application container
image like the image operating system layer,
the image configuration, all these different third
party operating system packages that you may need
in that container environment that may have
security vulnerabilities. Now that container will
have to run somewhere like Kubernetes cluster. So here we have
the security challenges. Like is the access to the
cluster security. Is server publicly accessible
or only from within the internal network? Have you opened any unneeded
ports on worker nodes that allow access into the
cluster nodes directly? Now that's just outside
the cluster. What about inside the cluster?
Once an attacker is inside, do they have wide open
network where thousands of pods can all
talk to each other freely? Can the control plane
processes be easily accessed from within
the cluster? Is the pod two pod
communication encrypted, and so on. Now Kubernetes is not just
floating around on the air, right? It's running
on actual infrastructure. Let's say it's a cloud
infrastructure on AWS. So now the security continues
over to the servers. Then the underlying
infrastructure. Are people able to ssh into the
worker nodes directly. If they can do that, they could potentially access
the Kubernetes processes on that server directly, or the container processes
or even cloud processes running
on those servers. Or what if access is generally
are badly managed, like permissions are not
strict enough, and credentials are spread
around the company on different platforms
and developers machines, so attacker may easily access
them on other internal systems. Continuing with the CI CD
pipeline itself, what about CD accessing your
cluster to make deployment updates? What permissions does your CD
tool have? Is it able to delete
components in all Kubernetes namespaces? So basically if an attacker
hacked into one system like ci CD platform, will they attacker then get
access to credential? Stored in your CD platform
to your private repositories. Kubernetes cluster. Account basically all
the platforms that it connects to. And if yes. What permissions do
those credentials have? Are they restricted or can
they do a lot more damage. And we can go on and on with
these security questions around different
tools and platforms and so on. We'd like secret
management tools, credential rotation
certificates and so on. But I think you got the point. Security is complex
because the systems have become complex. Security is. Afterthought means
that those potential security issues get analyzed
after the main work is done. And there are two problems
with this approach. First of all, this creates long iterations
and slows down the release process compared
to if we checked and found security issues earlier during
the development process itself. And second, when you're checking all
security at once of 50 new features and bug fixes and 50
configuration changes, you may more easily oversee
stuff because you have way more things to test, and more issues may slip
into production as a result. Also, naturally, you have high chance of human
error when this kind of checks are done manually and less
frequently compared to the automated approach. Now you remember my simplified definition of DevOps.
Basically, what it really comes down
to eventually is anything, any tool or concept use
to remove any bottlenecks on the way of releasing
and delivering changes to the end user fast
and with minimal bugs. And this applies whether
it's application or infrastructure changes.
So naturally, if security is a bottleneck
in that release process, that should become part
of DevOps issue that we have to eliminate this showstopper. So DevOps naturally
should include security. But as I often say, reality in theory or how
it's supposed to be are two different scenarios.
So in practice, it's so happened that DevOps
left out the security, it focused on development
and even bug fixes and efficiency and speed
in those areas. But security teams and external
pen tests stayed in later steps, not streamline, not automated,
and still done mostly manually. So as a reminder to kind
of highlight the importance or bring back
the importance of security in DevOps,
the DevSecOps concept emerged. And as you know, DevOps affects entire software
development lifecycle too. So DevSecOps is naturally
taking that overarching security and integrating
it in all DevOps steps from start
to finish, along with application tests,
build steps and so on. So the responsibility of fixing
security issues and secure implementation still lies
with individual teams and different engineering
roles who have the expertise in those specific areas. But DevSecOps creates
an overstretching process and automated steps
that measure what's called the security posture
across your systems, basically giving us a visibility
of how secure our systems are. So how does DevSecOps do this? Automation is the key
here as well, just like it is in DevOps.
So with DevSecOps, we automate checking
and validating all these layers of security
in different parts of the software
development lifecycle. And there are tools
and technologies to run those automated tests. So what are those automated
checks and where in the release pipeline
are they? Edit first we want to check
security of our code. Do we allow for SQL
injection because we're sanitizing user input? Are we using weak
or outdated encryption algorithms to encrypt
user passwords. So all these checks that we're
doing in our code to validate for any such
security vulnerabilities is called
static application security testing, or Sast, where various SAS tools
will validate the static code for any of these issues. So it basically scans
the code base for known patterns of allowing
SQL injection, cross-site scripting, and so on, and common coding mistakes
that could lead to such security issues. And in the DevSecOps
bootcamp itself, we cover the individual security
issue types in detail. So you actually understand
what a SQL injection looks like, what it is, exactly what a cross-site
scripting is, what client or server
side request forgery is, and so on. And we even learn how to fix
some of those issues in code. So instead of just having
an abstract idea, just in theory, you actually see hands on how
it looks like and how it can be fixed in the code itself. Now we also want to check our
code for any hard coded secrets. And this happens way too
often that developers forget to remove API keys
that they use for testing, or hardcoded passwords
for database connection, maybe. And they basically end
up in git repository in the commit history, and secret scanning tools can
be used to go through the code and identify any hard
coded secrets like access tokens, API keys,
or various platforms, any credentials, certificates,
and so on. Again, in the bootcamp, we go into detail
and learn various use cases of when this happen, as well as how to use
these tools as pre-commit hooks so they don't even
end up in the code repository. Commit history because they get
validated before the developer can commit the changes. Now,
apart from our own code, we also want to check whether
the code from other people that we use in our
application has any such issues, like libraries, frameworks that we're
using as dependencies. They are code as well, right?
That other engineers wrote. So those engineers may
also write insecure code just like our engineers. And this is called software
composition. And. Allergies or SCA. So we use SCA tools to scan
all our application dependencies for any
publicly known, already discovered
vulnerabilities. And we identify whether
we're using any outdated versions of third party software
with security issues. And again, here we have a whole
section in the bootcamp. Or explain how these
publicly known vulnerabilities are documented
and where are they accessible, how the SCA tools actually
go through these dependencies and identify any
issues, how to analyze them. Once you found that you
have such vulnerabilities and more
importantly, how to actually
fix those issues. Now these are all static checks.
So we're checking the code base. But there are some security
issues that can only be caught
when the application is actually running. And this is called dynamic
application security testing or Dest, which is a testing method
that basically evaluates a running application
to identify different vulnerabilities.
Again, this could be SQL injection
or manipulating URLs with different parameters
to get data that you are not
authorized to see. So the Does tools basically
send various requests to the application
and they observe how the application responds, what data it returns
to those requests. And this way they can identify
any potential security weaknesses in the application. We also want to validate
the image artifacts that we're producing.
Again, there are tools that scan
the image layers to find any security issues on the
container runtime level. For example, are we using
a root user? Are we using a deprecated
vulnerable operating system package? Are we using a bloated
image with lots of tools that we don't actually need. So we are increasing the attack
surface and risk unnecessarily. So there are all these tools
out there that help us automate these type of security checks.
And again, in DevSecOps bootcamp, we basically go into details
and very importantly, the practical application
of introducing and implementing those tools. One of those concepts
important in the practical usage of the tools
is managing what's called the false positives, as well as how to visualize
the scan reports and analyze them
in vulnerability management tool. We basically combine all
the reports from different tools and see what issues
you have in your application, with what severity levels, where exactly in the application
are those issues, and some recommended options
of how to fix those. Understanding what's called
the quiz and CVEs that are a big part
of analyzing and fixing the discovered issues. And also what's very
important to me is to reference the real world
projects and understanding wherever relevant, whether there is a
difference between how the things should work,
the theoretical part, and how these tools are actually
used in real life scenarios. Things like how to balance
the additional checks that increase
the pipeline duration, and when to run separate
nightly builds for full scans, for example. So I go into detail in this kind
of examples in the boot camp. So these automated security
checks are done in multiple phases of release and can
start as early as pre commit, even before the developer
has committed the code. And the CI CD pipeline
was triggered. So it gives us fast feedback
on any security issues we may be introducing in our systems, through changes in code or
in infrastructure configuration. This is called shifting security
to the left, because another important fact
is that the later in the release stage we discover
security issues, the more expensive it is
to fix it. So instead of reactively
fixing issues in production and patching them, we are proactively reducing
the possibility that they end up
in the production in the first place. Now, talking about reactively
checking for security issues in your systems, I want to give a shout
out to chef, the sponsor of this video, which is one of the important
tools for security and compliance automation
as part of DevSecOps. If you've been in DevOps
long enough, you probably already know
that chef is a well-established
and widely used technology in the industry. Chef compliance provides
packaged CIS benchmark profiles, and these profiles can be easily
customized to support your organization's specific security
and compliance requirements. You can schedule those
compliance scans for single or multiple environments, and you can run them
regularly or on demand to basically automatically
detect and notify about any configuration, drift,
or errors in your environments. For example, running a profile that checks
that 44 controls are set properly and two
of the controls fail because of a misconfigured.
API server dot Yaml. To remediate
this misconfiguration, chef can automatically reset
the controls to the proper configuration based
on the profile. Chef uses the concept
of cookbooks, which provide flexible recipes
with template and attributes files to specify the correct
values for the cube API server Yaml. Using a simple chef
knife command, we can confirm the managed
Kubernetes control plane has the correct cookbook
and recipe in the run list. When the chef compliant skin
is run again, the Kubernetes system meets all
of the necessary requirements. And by the way, the whole Kubernetes security
compliance checks and CIS benchmarks themselves
are super interesting topics which you also
learn with practical use cases in our DevSecOps bootcamp.
So as you see, DevSecOps is a huge exciting
topic where on top of the DevOps, which is already
a huge thing, you explicitly integrate
security implementation in your engineering processes. So large
processes automated. That means lots of tools
and concepts involved. So 1 or 2 hours is really just
a drop in this large DevSecOps ocean to learn
all about it. So I try to take out
this part from the entire DevSecOps bootcamp to teach
about the fundamentals, and I have carefully
created the demo to give you the basics to get started
and see the benefits of DevSecOps, and get the understanding
of how the entire DevSecOps can be implemented
in an organization. So now enough with the theory.
Let's get to the practical part. We're going to be working with one project for the entire demo, and that is an open source
project from OS Foundation, which is a Python based project. And this application
is intentionally vulnerable so that it can serve as a demo
for various security scans. So we can actually see
the security vulnerabilities discovered
by those scanning results. So that's the project
that we're going to use. Since it is Python specific, we're going to see how
to select and then use various scanning tools based
on the language or tech stack that an application is using. And in order to work
with this project, I actually forked the project
and made my own copy. So we can start from a clean
state without any skins whatsoever. So I removed all
the pipeline code, I made a couple of adjustments
and we can build the demo step by step from the start. And I'm going to link
both of these repositories in the video description.
So you can easily follow along. So in this demo we're going
to build a pipeline a release pipeline
that is going to have security checks
for this application. So we're going to build
a DevSecOps pipeline. And we're going to do
that with GitHub actions. Since we are on GitHub. If you don't know
GitHub actions, I actually already have a crash
course on GitHub actions. So you can watch this video
first to learn the basics and get some
foundational knowledge. Of course, I'm going to explain some
details as well in this video, but that should give
you a starting point. And as I said, I do not have any pipeline code
in this project, so we're going to build
it from scratch. So here you see we have a tab called actions. So if I go here and you actually
learn this in the crash course, you have some templates
that you can start with. So instead of writing the GitHub
actions file from scratch, you can just go with one
of the templates. And templates are based
on the tech stack of your application. And as you see
it actually detected what we are using
in this application. And it is suggesting us
to use either Python template or Docker image
template and so on. And we're actually going
to build this pipeline from scratch. However, I still want to show you how
the template will look like. So for example, if we choose a continuous
integration template with Pylint since we're
going to be building continuous integration pipeline. So CI pipeline actually
and if I click on configure this will do two things. First one is in my
project it will automatically create
a dot GitHub folder. So this was not there before. And inside that it will
create workflows folder. And then pylint dot Yaml file. So this path will be
automatically created. This is the location where
GitHub actions detects a pipeline code automatically. So we can automatically
trigger it and run it. And the second thing
is that it generates a boilerplate code
for the continuous integration pipeline. And this
is what it looks like. Again, if you go through my
GitHub actions tutorial you will understand the syntax as well. So basically we could take
over this template code. But I want to show how
to build it from scratch. So first of all I'm going
to rename this to main dot Yaml. So we're going to build multiple
steps in that pipeline. And second of all I'm
just going to mark all of these and just remove. So we're going to start
from scratch. And as you learn in the GitHub
actions course the application
release pipeline, whether it's a CI or CI, CD pipeline is one of the
GitHub workflows. That's why we have these
workflows folder. We can name our pipeline
workflow in our main dot Yaml file. So I'm going
to call it CI. And then we want to configure
when this pipeline will get triggered. And we wanted to get
triggered on push. And you can actually specify
which branches you want to trigger this pipeline for.
So for example, if I had multiple
other branches, except for the main, I can say I only want these
pipeline to trigger. For. A list of specific branches,
whatever that is. However, because this is a continuous
integration pipeline, it makes sense to always run it, no matter whether it's a main
branch or feature branch. So that means we can. Basically say whenever there
is a push in the repository, no matter which branch that is, we always want to run
this pipeline. And now we can start writing
or adding our jobs. And this is going to be
a list of security scan jobs that we're going to run
against our application. And the first one we're
going to be adding is going to be assessed job. So we're going to run static
application security tests on our Python application.
So let's call it Sast skin. And we're going to use
a tool called bandit, which is a popular tool
specifically for Python applications to run static
application security tests. Now, as you know already, I always repeat that the tools
are not as necessary as knowing
the concepts. So you could theoretically
use whatever tool you want. However, of course, when you compare the tools
and evaluate them, you have to consider
a couple of criteria. So first of all, the adoption,
right? If it's largely used
by a community, there are a lot of people
who are contributing to this project. If it's an open
source project, for example, then that is definitely
a plus for the project, because you don't want to be
one of the few engineers who is using a tool that nobody
else is using or knows about. Another one is, of course, how easy it is to integrate
to use the tool. Is there already official
Docker image for the tool? So basically this simple
criteria should be enough to decide what tool to use,
because beyond that, like the specific features
and so on do not matter as much because most of the
tools are pretty similar. They can be configured
in a very similar way. So for most common use
cases they should work pretty much the same. So bandit is a very popular
tool for Python specifically. And it's also pretty
easy to use and that's why I chose that one. But again you can choose
whatever you want. You can also choose multiple
tools for the same job. So you can actually
have 2 or 3 different tools that do sass scanning. And basically you can compare
the results and see maybe one of the tools
finds vulnerabilities that others were not
able to detect. That is a common
practice as well. So let's go ahead and write
our script to use bandit. Again, you learn in the course
that within a job you have multiple steps or actions
that you want to execute during the job. So let's configure all
those steps. So first of all let's
add a description or name. We are running bandit skin. We also want to specify that we want to run it on an ubuntu machine. Because then the installation of the tool Cetera will depend on which operating system we are executing the job or the steps on. So we want an Ubuntu Runtime
environment for our job, and now we can write
those steps. We're going to start by checking out the code, obviously.
So again, as you learn in the course, the jobs get executed on fresh
new environments, on GitHub hosted machines, and you can choose
what operating system that machine should have. And that means it's a fresh
new machine. It doesn't know anything
about your application. It doesn't have any tools
that you need pre-installed on them. So you have to explicitly
install things on it. Plus check out your application
code so you have that available. And obviously we want to scan
our application code. So we want to have the code
on that machine where the job is going
to execute. So check out the code and we're
going to use an action here. Called check out. Version two, and this will take care
of checking out our repository code.
The second step will be. To set up Python on this job
environment. As I said, no tools are pre-installed, so we have to explicitly install
anything that we need for the job. And we need Python because
bandit is a Python package. So we're going to install
it using Python's package manager called pip. So we have to install
Python first. Or basically prepare the Python
installation and setup. And again, for this kind of common
regular use cases they are actions. So we're going to use
one of those actions. That is called setup Python. With this version
for the action, and we can specify a version
of the Python that we want to set up use,
which is logical, because whenever we are
installing a tool, obviously we want to have
an option to specify which version of the tool
we want, right. So we're going to define
Python version 3.8. That's the version
we want to use. And by the way we can find
those actions here as well to see what attributes
and parameters you can use. So if I search for setup
Python there we go. This is the action. And you can see all
the attributes that you can set here. So Python installation
is done here. Now we want to actually
install bend it so we can execute the bended skin right. So as I said it's a
Python package. So we're going to install
it with Python's package manager. So it's going to be
install bend it. And for this we're going
to actually run a command directly on our ubuntu machine
where the job is executed using pip install
bandit command. Super easy
and straightforward right. And finally we want to run
the bandit command or bandit skin. With a command called bandit.
Minus R dot. So this basically scans
everything in the current folder. So this is a location where
we are pointing bendit to. We're saying everything
in this current folder. All the files that it contains
should be scanned recursively. So whatever folders
we have here, subfolders that contain
Python files, all of that should be scanned. Very simple and straightforward
as you see. And the folders or the code
that we have available has been checked out with the first step. So that means the application
code will be on the machine. And after installing bandit
we can just run bandit scan against that entire
application code. So it will check and scan
every single file in the application code
and give us the results. And this is how you set
up and run a security scan. And now we want to commit
those changes. And as I said because we have
this Yaml file in GitHub or GitHub slash
workflows folder, GitHub will automatically
detect this location. And it will know there is a
workflow to automatically execute on code push. So this will trigger our zest
scan job. So let's do that. Commit the change I'm going
to work directly in the main branch for simplicity
for our demo. So let's go ahead and do that. And if I switch to actions
as you see the workflow is already running.
It's in progress. So let's wait for its execution. So run bandit scan
job was executed. And if I go inside, we're going to see
the execution results. And as you see, the job failed. And that is good
because it means the bandit scan actually
found security vulnerabilities in our
Python application. And it failed the job marking
our application is not releasable, which is the purpose
of security scans. Right. So let's go ahead and check
out the results. And right here in the run
bandit scan logs you see the test results listed
with some detailed information. If I scroll all the way down, you see all those are possible
security issues that it detected. And right here we have a summary
that says how many lines of code it scanned and how
many issues it detected. And one helpful thing that the
tool also gives us is it doesn't only tell us, hey, there is a security issue
or possible security issue here, but it also marks it with
the severity level because not all issues
are equally important or equally risky. And that's why we need
to differentiate between them. So we have the severity
level that basically says these are some issues, but they are low severity
so they won't cause as much damage. And they are high
severity issues. So this could be a more risky, highly exploitable
security issue. And this is an important
metadata about the findings because as you see, we have way more low severity
issues than high severity issues. And in practice this creates
a lot of noise and distraction from the actual severe issues. So usually in DevSecOps
we want to configure the scanning tools
to only focus on high severity or medium
severity issues, especially when we are first
introducing these scans to the team, because we imagine we're going
to the developers and saying, now we're going to start
scanning the application, and if there are any
security issues, you have to fix them. And the tool finds hundreds
of security issues, most of them low severity level, so developers don't have
much value from the scan, and they don't know
how to handle these hundreds of security issues.
Right. So this may create a lot
of unneeded effort and just destruction
without bringing much value to the team. You won't be too popular
with developers if you do that. Instead. If you show hey, we ran this and it detected
two severe issues that's manageable for the developer
team and proves the usefulness of the skin
to the developers that aren't fully bought
in the DevSecOps concept yet, and the tools can be tweaked
to teach them or to configure them to only focus on what's
important and mature those tools to the level that we 100%
can rely on their findings. Another metadata
that we are getting here along with the severity
level is confidence. So confidence is basically
the tools level of confidence about the discovery itself. So it found a high issue
with low confidence means it may be an issue. But the tool itself
is not 100% sure that it detected
the issue properly. So it could be a false positive. So for example here we have
an issue that is medium severity.
But the confidence is low, which means the tool
is not actually confident that the issue is and actually
issue with medium severity. So that could be a false
positive. And as I said, we can configure the tool
to ignore everything that is low severity or low confidence
and just concentrate on the important findings. And all security scanning tools
have that configuration option. As I said, most of them work
in a similar way. So let's configure bandit
to ignore and not display any low severity issues as well
as issues with low confidence. And for all these tools,
of course, you have the official
documentation pages where you can see the command
options and how to tweak and configure those
tools to your specific needs for your application.
And right here, as you see, it has an option to configure
what level of severity we want to focus on and
what confidence level want to focus on, and let the tool ignore
anything else. So we're going to use
these options to tweak our bandit configuration. So going back to the repository
this is our workflows folder. And let's. Edit or bend it command
with this configuration. So basically we're going
to tell bend it to only focus on medium and high
level issues and only medium and high confidence findings. So we're going to add
those two options. So we're going to copy them. Add them here. Take this one and that's it. Basically that's
the configuration. Let's commit the changes again. Let the pipeline run. The bandits again failed again.
However, now let's see how many issues
it actually printed out so the summary stays the same. So we get the information
about how many issues we have. However, the logs themselves, you see we only have medium
and high severity issues with high or medium confidence.
Right. So our list of. Findings have. Decreased, which means this is more
manageable for the developers now. So they can actually go
through this and analyze those issues one by one, because they're just a handful
of them. And again, if you're just
starting out. So this is the very first
introduction of DevSecOps tools to your project team. You can even start with only
high security issues. And once you have those fixed,
then move on to medium findings. As the next step, we're going to configure
our bandit scan to produce a reports file and to
provide all the findings of the scans
in the reports file, instead of just displaying them
in the job logs. Again, we can find
that configuration here we have two options for that. First
of all is the output file. So that's going to be the name
of the report file. We can name it whatever we want. And the second one is the format
of that report. So you can produce reports
in multiple formats. This could be CSV, HTML, Json,
XML, whatever. And note that all of these
formats are meant for machine consumption
and not human consumption, which means there are actually
tools where you can upload these scanning reports, where you can visualize in a
nice UI and analyze your findings there in one place. And I'm going to explain
that in detail later in the demo. But for now,
let's produce those reports. So we have the findings
in the reports file. So we're going to export
it in Json format. So let's go ahead and do that. It's going to be
EF or format Json. And we're going to produce
an output. Or output file. And let's call this benefit
report. Dot Json. And as I said, the purpose of generating
a report file is so that we can take
that report's file that has the findings inside
and we can fit it or upload it to a vulnerability
management tool such as Defect Dojo, that will then consume
that file and display all the contents of it in a nice
UI and a nice list with all the information
about the finding, the description,
the fix recommendations, and so on. Whatever the tool
basically provides, which makes the analyzing
and fixing of those issues way easier.
And as I said, if you run the pipeline
multiple times a day, if you have multiple tools, you have to have a central
place where you can view and manage all those findings, or the team of developers can
view all those findings in one place, as well as compare
the findings between the pipeline runs
in a vulnerability management tool
because you can't manage them through the logs.
So this is a very central, very important part
how to upload reports and how to consume them, how to analyze those
issues in Defect Dojo, which is one of the most
popular vulnerability management tools for DevSecOps. And you learn all of these
in the DevSecOps bootcamp. So right now we are generating
the report. However, to make it possible to download
that report, we have to create an artifact
or the job artifact that will be uploaded for the pipeline at
the end of the pipeline execution.
And for that, we want to have another step
to upload that artifact and make
it available for download for us. So let's call
this upload artifact. And there is an action for that,
of course, because it's a very common use
case or common step. It's called upload. Artifact.
Again, you can check what the latest
version is. And we can provide the name of the artifact. So how it should be called
when it's exported. Let's call it banded findings. And of course we need to tell
it which artifact to export. Now, as I said, the jobs in GitHub actions run
on isolated, fresh new machines that spin
up for that specific job. All the steps get executed there
on that machine, and when the job is done,
the machine gets thrown away. Everything that we
generated there, including the reports file,
everything is gone. Right? So that means
we upload artifact. We're taking the file
that we generated on that machine. It's going to be thrown
away after the job is done. And we're going to say you take
that file and upload it as an artifact so we can have
it available after the pipeline has run. So even when the machine
is gone, we still have
that file available. So the path points to the actual
file or folder on that machine. And this is just what we want
to call it. And they will make this file
available after the pipeline run. However, there is one more thing we need
to do for this to work, which is the way GitHub
actions works, is that whenever any
step in the job fails, the next steps will be skipped,
right? So for example, if the Python installation
didn't go through because of whatever reason
or the bandit installation, so this command failed, the next
steps will be skipped. Which makes sense, because usually this is an order
of executing the tasks where the next step
kind of relies on the previous one. And that means when the bandit
command fails, which it will fail
because we have security issues in the job,
this will not get executed. However, we want the findings
or the reports file to be uploaded with those findings. So even if it fails
and that means we have to explicitly tell GitHub
to execute this step always, which means whether the previous
step fails or succeeds, it doesn't matter. Always
execute this last step. So let's commit this. And now,
when the pipeline runs, we should have the bandit
report dot Json file available there. So let's
go back to actions. There you go. So the job failed.
And if I scroll down here. You see the artifact section? And now we have this bandit
findings artifact. I can show that it was not
available for the other jobs. So here we don't
have the artifacts. And this is the Json file. So in the zip file there
is bandit report dot json file. And here we have all
the information about those findings. Additionally to was displayed
in the logs. So that's how it looks like. As I said this is
for machine consumption or for those vulnerability
management tools where you can upload the reports file
and you can display those results in a UI. Awesome. So we have scanning
for our application code using bandit, which does
sass scanning. But we also learned that not
only the application code or the dependency code, but also the application
runtime environment, may have security
vulnerabilities that will allow the hackers
to hack into our systems. And since in the modern
application development, Docker and containers
have become a standard, the artifacts that we
are producing in our release pipelines
is Docker images and Docker image. As you have probably already
learned from my Docker videos, you know that it's built
with layers, so every single image
layer may actually have a security vulnerability.
An image layers, just as a reminder, are basically whenever
we're using a base image. Could be a Linux Alpine
base image, which is a lightweight
operating system layer. And then on top of that, we install a bunch of other
stuff like Python for our Python application
image or various operating system packages and tools. All of that basically add
as layers on top of each other. And just like in
application code, we have libraries
and dependencies with vulnerabilities. We may have operating system
packages and software with vulnerabilities. So we may actually be using
outdated images like base images or operating system
tools with security issues. And the same way we want
to scan the image to understand how secure
is the Docker image that we are building
for our application. And we have various tools
for scanning Docker images. And in this demo, I actually chose a Docker
native tool that actually part of Docker itself that is
called Docker Scout, that goes through the image
layers and scans for security issues. And it does that actually
on multiple levels. So let's add a job for Docker
Scout and see how vulnerable or how
secure our Docker images. And of course, to be able to scan a Docker
image we need to first build a Docker image. So we're going to extend
our current CI pipeline to build the Docker image. And then we're going to scan
that newly built Docker image. So let's go ahead and do that. So right here we're
going to add a new job. And this job will contain
the steps for building the image and then scanning that image. Now this could be
two separate jobs. So for example we can push
that image to a Docker repository. And in a separate job
we can pull that image from the repository and scan it.
However, to make this simpler, we're going to have one job
where the image is built on that job execution machine.
So we have the image available. We don't have to pull
it from anywhere. And then on the same machine
we're going to run scans against that image. So I'm going to call
this job image scan. And I can actually just copy this.
Configuration from here. Let's call these build.
Image and run image scan. We're going to run
on ubuntu latest. And here we're going
to define our steps. The first one is again going
to be checkout because we need our application
code with the Docker file to build the Docker image.
So we have the checkout step. Now for this job we actually
don't need Python. Instead we need Docker installed
on the machine where the job is executing
because we're going to execute docker build
command to build the image and later Docker scout command. So the same way we set up Python
in this machine for this job here we're going
to set up Docker. So let's create a step.
Let's call it set up Docker. And let's actually search
our marketplace for the action to install Docker. So. I'm going to look for set up
Docker and let's see what comes out. And we have
this one here. This is the location
of the action. So basically just
going to copy that. And paste it here.
And as I said, for any actions or any
steps that are very common, like installing
Python or Docker, they are prepackaged or ready
actions that you can just reference from the marketplace, which just makes the creation
of the pipeline easier. But of course, alternatively, you can just run a command
for installing Docker as well. I prefer to use this action
for the setups, just easier cleaner code, especially if something changes
in the installation of the tool. You don't have to worry
about that. And then of course you have
these parameters that allows you to specify additional stuff. So for example I want
to define Docker version for our installation. And I'm going to do that with
the width attribute. And. This is the Docker version. And I'm going to set it to one
of the latest Docker versions. Let's do 2010 seven. And that makes Docker
available on our job environment, which means we can now
execute Docker commands. And the first command will be
to build the image. And for that we're going to simply run docker build command.
And you know the drill. We need to specify the Docker
file as a blueprint for building the image. We can also specify
the name of the image so we can reference it later
when we want to scan the image. So we can call this my
app or Pi goat or whatever. And we can tag it with
the latest tag. And then we have to specify
the build context, which is the location
that Docker will take as a build context. And this is going to be
the current directory where the application code is. And that's our Docker build
command. Awesome. The next step will be
to scan that build image for any security issues. And as I said we're going to use
Docker Scout from Docker itself, which actually does a very
thorough scanning of the images on multiple
layers to find any security issues. And we can actually use two
different commands of Docker scout. One of them is called
quick view. Quick view command will
basically show you that your base image is outdated, and it will give
you a recommendation of how to update it to make
your image more secure. And then there is a more
extensive or more thorough scanning that you can do
with the Docker Scout CVS command. It basically gives
you a complete view of all the vulnerabilities
that your image contains. And just like the other
tools that we've used, you can tweak it and configure
it to add additional flags
to basically limit that you are only
interested in certain severity level and so on. So let's go ahead and add a step
for Docker Scout commands. So we're going to add
a step here. Let's call this Docker scout.
Skin. And we're going to run a command
here that basically is a multi-line command. And this syntax basically
allows us to write multiple commands one after another
instead of just single command. And here we're going to first
install the Docker scout command line tool. And then we're going to execute
Docker scout commands. And I'm going to copy the URL
which points to the installation. So this will basically
download the installer for Docker scout cli. So install scout dot s h
file will be created locally. Then we can execute
that installer file that shell script to actually
install Docker scout. And here we can then execute
Docker scout commands. As I said we can use both
commands for a quick view as well as to scan the complete
image for any vulnerabilities. So this is actually the main
command that scans the image. And that's what we
are executing. Now let's actually try to run
this and see what happens. So I'm going to commit
the changes and let's actually see the execution result. Again. You see that by default these
two jobs will actually be executed on two
different machines. That saves time because these
jobs can be executed in parallel
instead of waiting for the previous
jobs to execute. So your pipeline
is overall faster. So the job is running.
Let's wait for that. The image is being built. And we can also check the docker file. So this is a pretty simple
Docker file actually. We just have a couple
of commands. So each one of those commands
basically creates a new layer. And we may be configuring
the Docker environment or installing tools
that are vulnerable because they're outdated. And those things will be scanned
with the scanning tool. And the Docker scout scan
failed. And you see, the reason for that is because
we need to log in to Docker to execute
Docker scout. So we need to authenticate
with the Docker ID and email address. So that's what we need to set
to authenticate with Docker. So we can execute Docker
scout commands. And that leads to another
interesting concept in GitHub actions which is project secrets
or projects environment variables that you can
use to basically store secret or sensitive data.
As you know, in release pipelines, CI
pipeline or CI CD pipeline, you have to integrate
with multiple tools, right? So you are maybe pushing to a
Docker registry, maybe you are deploying
to an environment and you have to connect to these
platforms with credentials. Right? So you need a proper
way of storing those credentials. And obviously you don't want
to hardcode them in the code. Right. So in the settings
of the project you have security section. And in that security section
you have secrets and variables. So if I open that and
open actions. So these are where you can
create secrets and variables for GitHub actions workflows. And we're going to create
a new repository secret. So basically whatever secrets
and variables we create here will be available
as environment variables in the GitHub workflows. So you may have multiple
workflows for GitHub actions. And you can use these
secret values or variables in all your workflows. So here I'm going to create
variables secret variables for my Docker
user and Docker password. So basically these are the ones
that I use to log into Docker Hub. So if you don't have an account
you can just sign up here and you get your
Docker ID and Docker password. And I'm going to call
this repo user. You can call this whatever
you want. And this is my Docker ID. And now I'm going to create
repo password. And with the value
of my Docker password. So those two values are here, which means I can now reference
them in the pipeline or in my workflow. So going back
let's edit. So before we execute
the Docker scout commands we need to first
log in to Docker. And you probably already
know docker login command from various of my previous
tutorials where I have showed this. So a safer login
is not to provide password directly with password, but rather read it from
the command line. So we're going to do echo and. Our password variable
and the syntax for referencing environment
variables or project variables, repository secrets or repository
variables in GitHub. Actions is very simply
dollar sign and double curly braces like this. And inside that you have
secrets object that contains all the secrets
that you have defined here. Like this. So this is referencing
the value of the password. And then we are piping that to
Docker login command. So we have the username
which again we're going to reference like this. Repo user. And we're going to read
this password using. Password. Stdin standard input. So this is going to read
whatever we echoed here and that's it. We don't have to provide
the repository for Docker login because by default
it is Docker or docker.io. So this login command will
automatically go to Docker itself. And that's it. We are authenticating
with Docker. And after that we can execute
Docker scout commands. So now we're going to commit
those changes. And we're going to see
the results of Docker image scan our pipeline ran. So now let's actually check
the logs to see the findings. First of all you see
that the job is green. Let's see what it means. So we have the build Docker
image a new image was built and then we have
Docker Scout results. This is the login part. And this is basically
an output of Docker Scout quick view command
which basically gives you an overview of what image
you're using. What is the base image. That we have defined
in our Docker file that we are building on top of. And then it also tells us
whether our base image is outdated,
the size of the image. As you know from security
best practices of Docker, we don't want to use bloated, unnecessarily large images
because it just increases the attack
surface unnecessarily, especially if we don't use
or if we don't need most of the tools in that image
for our application and so on. So this is like a
quick overview. And this is a more detailed
overview of analyzing the image. And this is the Docker
scaled CVS command. And here you see a whole
list of the things it found which are a lot of issues.
So basically. For different tools that we're
installing or using in our Docker image.
For example, this one here, the curl package. Or this package with this specific version have all these vulnerabilities. And this is actually similar
to the dependency scan, because just like you
have libraries in your code that have
dependencies on other libraries and so on. So you have these
transient dependencies. Here we have a couple of tools
that we're installing. However, since we're using
this as a base image, which depends on another
base image that has some tools installed, Docker Scout basically goes
through all these image layers, including whatever base
image this one is built on, and it looks at the tools
that not only the tools that we're installing
on top of this image, but also whatever tools
this image itself comes with. And that's why we have
so many issues here. We have a pretty large list
of vulnerabilities that we found, because it basically went
through multiple layers all the way to the initial image, and we can actually check
that ourselves as well. So if we look for Python
image in Docker Hub. So this is the official Python image. And in text we basically look
for this text specifically. This one right here. As you see, Docker Hub itself shows
you this vulnerability scan results for the base image, and this one is also supported
by Docker Scout. And here you see the exact
breakdown of which packages in this specific image
are included and what vulnerabilities
those packages actually have. And as you see we have
curl Python open SSL. All of these are basically
part of this. And the thing is if we don't
need curl for example, or git in that image, then there's no need to use
this larger image as a base. Instead, we can use a slimmer, lightweight image with a less
libraries and less libraries automatically means less risk
for finding vulnerabilities, right? And this is
the Docker file that is used to create
this image that installs all those tools and so on. And again you have
this differentiation with critical high
level medium and low severity vulnerabilities. So you can kind of prioritize
and see if you have critical issues
which libraries are affected by those critical
issues and so on. So that's one thing using just
smaller images. But also this is one
of the older versions. The newer version
is already at 3.13. So of course upgrading
to a new version often would mean that some
of those issues and vulnerabilities
were actually fixed. But you can also
introduce new ones. So we're not going to go
into the remediation part. But this kind of scan basically
gives you a really good overview of whether
you are using an outdated image or whether
your image is too large. So you have lots of libraries
and packages inside which also have vulnerabilities. So you end up with a huge
list of security issues in your Docker image scan.
And also as we saw, we have this severity level
for each security finding. And we have 23 critical
issues and 267 low level issues or low severity issues, which means again this creates
a lot of noise. Look how large the list is.
That means, especially at the beginning
when it's the first time running an image scan for your
application your engineers probably don't want to deal
with, in this case, hundreds and hundreds
of vulnerabilities and just fix them so you can focus
on the critical and high ones. And then basically step by step, move on to the less critical
ones. So in this case, again, it makes sense
to configure Docker scout command to only print out. Those two severity level issues
and basically ignore the other ones.
And as you see here, you can even use
the Docker Scout recommendations command to give
you suggestions of how to fix those issues
that were discovered. And one more interesting
thing that I want to draw your attention to is that for
the issues that are discovered.
So for example, this one right here,
apart from the CV link, you also have the fixed
version attribute. So it tells you which version
you are using which is less than or smaller
than this version. And it tells you that there
is a version that has this vulnerability
fixed already, so you can upgrade to that one
to basically get rid of this security issue. And you also see that for some
issues the fix has not been done yet. So there is no safer
version for that for now. But again, many of these apply to the low
severity issues, which means we can now go
back to our workflow and configure Docker Scout
to basically just ignore all of those. So we don't have
this overwhelming list of issues, but we can kind of filter out
and just focus on the real issues and have them in the
logs. However, before we add these
configuration options directly here, I want to show you an
alternative option of running Docker Scout
commands with a ready GitHub action from the marketplace. And this is another good example
to show using the ready actions from the marketplace.
And of course, the main advantage of using
actions from here is always that it's high level,
it's more abstract, and it's just easier
to configure than directly working with the tool.
Less flexible sometimes, but if you just want to run
the tool with a couple of parameters and configuration, it's basically the easiest
way to get started. And if I look for Docker scout. You'll actually see that there
is one from Docker itself. So this is an official action, which is always good to use
the official ones. Now obviously the installation
of Docker Scout itself was pretty simple, as well as running the Docker
scout commands, so there is no requirement
or need to use action instead for simplicity
because it's pretty simple already.
But generally speaking, these ready actions make
it easier to use any tool with a high level configuration
so you don't have to worry about installing the tool.
You know, making sure that these curl
link is up to date and so on. So I just want to switch
to this one for demonstration. But to make sure you guys
still see this code snippet in the repository
when you follow along the demo, I'm actually just going
to comment this out. And I'm just going to create a new step. And this is going to use
the action. There you go. So this is Docker scout
action with this version. And then we have a couple
of configuration options. Obviously we need to configure
the login data just like we did here. So for that we have Docker Hub
user and Docker Hub password. So we're going to do
with and then we're going to set all those
parameters that we need. So Docker Hub user is going
to be. Referenced like this. Then we have Docker
Hub password, and I'm just copying this stuff
so that I don't make any spelling mistake. There you go. So we have
the login data. And finally we have the command
because we actually have to execute some kind of command.
And this is a list of commands. So we can basically execute
multiple Docker scout commands. We just need two of them.
So I'm just going to. List them here like this
separated by comma. And that's it. So this is basically exactly
the same as this part here. Looks a little bit
cleaner nicer. That's the only difference
in terms of what they do. However when I execute this we
will actually see one more difference of using
this action instead of running the Docker
scout commands like this, which is an improvement. So let's commit the changes
and let's wait for the job execution.
Okay. So our pipeline executed. So this is the one with Docker
scout action. And this is without. And let's
compare those two. So this is the workflow
with Docker scout action. And this is without. So if I scroll down here
we basically have our artifacts and some information
like annotations. And when we execute
it the build image and scan image with the official
Docker scout action. If I scroll down we see these. Visualization of results
in the user interface view itself. So instead of having to go
and check the logs, we can basically see
the entire thing. Here we see the breakdown
of what libraries got scanned, how many critical, high, etcetera issues
each library had, as well as the base
image and total summary of the entire image scan, which is actually pretty nice
because this makes it way easier to analyze and kind
of dig in into your image and what libraries you're using
and what you may need to update to fix those issues and so on.
So for example, you see all these libraries
actually do not have any critical issues,
so you can just ignore them, etcetera. So it gives
you this nice overview. So that could be another
advantage of using the Scout action. And finally
with that configuration let's now tweak our Docker Scout
action to only report critical and high level issues.
And also in addition to that, we want to create this report
file that we have generated for other tools.
So let's do those two changes. I'm going to edit
this again and again. If we check out the official
documentation to see what configuration
options we have. But this time for the Scout
action itself. And again if I bring
up the Scout action. We're going to see all the configuration options here.
However, if you want, for example a more detailed
overview with examples and so on, we can also search
it online. So this GitHub repository
for example that has Scout action gives you a more detailed
description of the inputs for different commands.
So this one for example. And as I said we only
want to focus on certain level of severities. And this is option
to configure that. So we have only severities. And we can basically just
choose or provide a comma separated list of what severity
levels we want to focus on. So I'm going to copy this.
And edit here as a parameter. And I'm going to choose
critical and high. So that takes care of ignoring
all the low and medium level issues. And we also want to configure
the report file. And we have this sorry file
which is a specific format. And again if I check this here
it basically expects a file name. So we can set this parameter
as well. And we can call this Scout
report. Dot. Serif and. Of course, we have to upload
that artifact as well so that it's available after
the workflow runs. And. Let's call these Docker Scout findings. And of course the name
of the report. And that's our configuration. Now with this we're going
to commit the changes and run the workflow again. And now up to this configuration, we see in the scan results
that only critical and high level vulnerabilities
were displayed by the tool and the list
of libraries that were scanned. We see that only those
that have either critical or high vulnerabilities
are displayed here. So we don't have this huge
list anymore, but we have rather manageable
list right now. So we can even limit that only
to critical issues. So we would basically be
working on fixing and updating these libraries here. And again, we still see the overview on all
levels of security issues, including low and medium.
However, the specific issues are only
limited to those two, so it's not
overwhelming anymore. And additionally, we also have these Docker Scout
findings which were exported as an artifact. And again we can download
it and import it in a vulnerability
management tool along with other reports. One more optimization we can
do with Docker Scout is to basically fail
the job when security vulnerabilities are found.
And again, if we go back
to the documentation, we see there is this exit
code parameter that is by default set to false. And we can set this exit
code to non zero value which will be unsuccessful
or error result which will fail the job. So again let's adjust
our configuration. And instead of default false,
I'm going to set it to true. And let's commit the change. And wait for the result. And if we check
our pipeline run, you see that our image
scan job is also red because we have security
issue findings in the result. So we optimized that as well.
Awesome. So our pipeline is doing
all the static code checks, is scanning the image artifact
that we are building for any vulnerabilities. And we're producing these
two different scan reports. And when you are implementing
DevSecOps in your organization you have to use
vulnerability management tools, because otherwise
it will be really inconvenient and hard to analyze
and fix the security issues, or to basically just see
the security posture of your application
and of your systems based on the security
scans that you are doing. So it kind of unnecessarily
making your work harder. And as I said, there are different
vulnerability management tools. One of the popular ones,
which is an open source project, is Defect Dojo, which is the tool I teach
in the DevSecOps bootcamp. And of course, every time we run
this workflow, it will produce new reports. That means you don't want to be
manually downloading these reports from each
workflow execution, and then importing that manually
in the dojo. Either you want to automate
that process because it just happens to often
and it's a repetitive task. So in the DevOps bootcamp,
of course, we want to learn things as they
are done in production in a proper way. So actually show how to write
a Python automation script that takes the reports
from each pipeline execution and automatically
connects to the Defect Dojo API, and automatically uploads
and imports those reports in the defect dojo.
And again, you can group that per
application version. So we have a history of scan
results and see whether your issues are increasing over time
or as you are fixing the issues, or they decreasing and getting
less over time. The second important
point is now that we've discovered the issues, those
issues need to be fixed, right. So first of all,
who fixes those security issues? Is it a DevSecOps engineer?
Is it a DevOps engineer? Security engineer?
The application team itself. So who is responsible for fixing
the issues in the code, fixing the issues
in the libraries, or upgrading the library
version so we don't use vulnerable, unsafe
or insecure libraries? Who fixes the Docker
image issues and so on. And this is important
to understand. To know how DevSecOps
is implemented, how the responsibilities
are divided among the team members in a practical, actual,
real time project. So in the DevSecOps bootcamp, we go into the topic
of dividing the roles and responsibilities
with DevSecOps principles, and also how
to pragmatically approach this in an organization
to implement DevSecOps and involve all of these
other roles in the implementation
process as well, and to kind of motivate
them to join in and not can resist against it. What's also super important
is we see different issue types like SQL injection,
vulnerable code, vulnerable third
party libraries, and how to fix those including
the transient dependencies. Same with the Docker
image scanning. How to fix security issues
found in your Docker image. And here it's important
to understand the CVEs in dependency scanning
and image scanning. So we go into detail in all
of those areas and learn how to analyze and find such issues. And then of course
fix those issues. And we actually use
completely different project and completely different
application in the bootcamp. So these Python application
on GitHub actions is just to demonstrate the basic
principles in DevSecOps. So we are actually not
repeating anything from this crash course
in the DevSecOps bootcamp. So this should already give
you a pretty good basis and understanding of DevSecOps. So you can actually
go ahead and start implementing this already.
However, you may want to know what the
next steps would be that DevSecOps also
encompasses and also more advanced scenarios. Diving deeper and really
getting to the production grade DevSecOps processes.
So of course, the obvious one is that
the continuous deployment part comes after
that we're deploying to servers on an
infrastructure will open up another world
of security concepts like cloud security,
infrastructure security, server administration, secure deployment to the servers
and so on. And as you know, in today's world, no DevOps topic is complete
without Kubernetes, which again, is its own separate world
of various different concepts that are security
relevant and security related. So starting from security,
handling, data encryption, network security within
the Kubernetes cluster, access control management, and. And DevOps and ops is anyways
about automation. So policy is code, cloud
infrastructure is code, compliance is code and so on. So there is a ton
of concepts and tools and topics involved
in DevSecOps that takes this whole thing to a completely
new next level. And that's exactly why
we have a complete bootcamp to teach
you all of this, because it's a huge subject. It's a very interesting
but very complex skill set. So you need a proper guide
with easy explanations, with real life production use
cases and examples to become really good at this subject.
So all these advanced topics, plus the monitoring and logging
on cloud level, on application level,
on Kubernetes, cluster level
for security specifically. So all of that is in
the bootcamp. That means if you need
this for your career, for your position, or if you work at a company
and your company or your projects actually need this, then DevSecOps bootcamp
that we created gives you complete picture
and complete skill set of everything you need to learn
and know about DevSecOps. We worked on this for almost
two years and there is way more content, and the topics and projects
are way more comprehensive than anything
that you can find out there. So as I said, if this is a topic
of interest for you, then I definitely recommend
our DevSecOps would come as a next step to completely
uplevel your career for just a fraction
of the price of what an engineer with this skill set will earn. So definitely check out
the information about the bootcamp in
the video description. But if you just needed
to get the conceptual understanding of DevSecOps,
understand what it is, and get your first practical
experience with DevSecOps, then I hope I was able
to give you exactly that. And this will help you in
your job, in your project. I'll be very happy
about that as well. And if it did, please let me know in the
comments what you liked about this, what value you get
out of this, and as well as share
it with other engineers who you think will also
benefit from this knowledge. And with that, thank you for watching
Till the End and see you in the next video.",-0.09614085406064987,0.007519991137087345,-0.0027672224678099155,-0.035708289593458176,0.009106788784265518,-0.10996021330356598,-0.031980566680431366,0.06124822795391083,-0.06774159520864487,0.07556361705064774,-0.05849941074848175,-0.08805061131715775,-0.001842706580646336,-0.03156624361872673,-0.03484305366873741,-0.02238325960934162,-0.010373881086707115,0.05062859505414963,0.045827846974134445,-0.06565480679273605,-0.04664101079106331,-0.014326588250696659,-0.03236044943332672,-0.037536848336458206,0.016660131514072418,-0.007553967647254467,-0.020090516656637192,-0.017231600359082222,0.0008256082655861974,-0.011004246771335602,0.058107830584049225,-0.008023739792406559,0.021851133555173874,-0.011734804138541222,0.08917015045881271,0.09860628098249435,0.12187467515468597,-0.08273740112781525,-0.0019524910021573305,-0.06339821219444275,0.034108929336071014,-0.03736444562673569,-0.047625038772821426,-0.009356931783258915,-0.0454692542552948,-0.05492992699146271,-0.07649113982915878,-0.08875560760498047,-0.02479390799999237,0.031785447150468826,-0.0026817515026777983,-0.15860825777053833,-0.025600913912057877,-0.004386476706713438,-0.01840176060795784,0.0018870566273108125,0.028280746191740036,0.01350168976932764,0.08805302530527115,-0.07874485105276108,0.022197334095835686,-0.03908673673868179,-0.045367032289505005,0.023521706461906433,0.020459938794374466,-0.007884225808084011,0.028130050748586655,0.05513209104537964,0.09134867042303085,-0.06252600252628326,-0.041280291974544525,-0.002482333453372121,-0.0339152030646801,-0.06860700994729996,0.018173029646277428,0.04227989912033081,0.004708751104772091,0.0453186109662056,-0.012185458093881607,-0.0503617487847805,-0.013649188913404942,0.024088094010949135,0.0024770922027528286,0.031010199338197708,-0.08259901404380798,0.08358685672283173,0.03825979307293892,0.04183245450258255,0.08314118534326553,0.006165051832795143,0.02455175668001175,-0.03400634229183197,-0.045291148126125336,0.02262859046459198,0.026834586635231972,-0.00942539144307375,-0.05989198386669159,-0.033578548580408096,-0.042466334998607635,0.020986784249544144,-0.04762628674507141,0.033052485436201096,0.06758566945791245,-0.14833669364452362,-0.0091415299102664,-0.014773935079574585,-0.03322494402527809,-0.018295815214514732,0.006119993049651384,0.005655947141349316,-0.05294478312134743,-0.03379422426223755,-0.019528774544596672,0.030990920960903168,0.045473527163267136,0.06446532905101776,0.00975162722170353,-0.04441826790571213,0.042789213359355927,-0.025326207280158997,0.07343878597021103,0.005801809020340443,-0.043439071625471115,-0.019174370914697647,-0.009934498928487301,0.037334144115448,-0.03363911807537079,8.519530305763881e-34,0.037261780351400375,-0.05488000065088272,0.0169381033629179,0.057329773902893066,0.17087632417678833,-0.09394768625497818,0.033608220517635345,-0.01968657597899437,-0.13850542902946472,0.03210616111755371,0.002968821907415986,-0.036426007747650146,-0.03592739999294281,0.10024945437908173,-0.04216703027486801,-0.1242765486240387,-0.043833982199430466,-0.016743279993534088,-0.004468489438295364,0.024037087336182594,0.005860447883605957,-0.048627033829689026,-0.04664773866534233,-0.034177329391241074,0.15945149958133698,-0.0009714620537124574,-0.036542072892189026,0.02847881056368351,0.041486918926239014,0.01380111649632454,-0.018567271530628204,0.022701337933540344,0.010554579086601734,0.013419394381344318,0.01708643138408661,-0.002532416954636574,0.0447809100151062,-0.021050918847322464,0.001072602579370141,0.037604305893182755,-0.006666080094873905,-0.034523677080869675,-0.031084977090358734,0.014452680014073849,0.08039385825395584,-0.053716257214546204,0.012391699478030205,-0.059766367077827454,0.11980149149894714,-0.012580396607518196,0.03216765448451042,-0.0029620868153870106,-0.03055761381983757,-0.027201537042856216,0.04400463029742241,-0.06581387668848038,-0.05821358412504196,-0.043953314423561096,0.001201916136778891,-0.008320027962327003,-0.04625413566827774,0.09016427397727966,-0.026021337136626244,0.015660464763641357,0.015125785022974014,-0.02022159844636917,-0.06500093638896942,0.08735646307468414,0.08133620023727417,0.058085594326257706,-0.05170002207159996,0.11075658351182938,0.02971670776605606,-0.06618204712867737,-0.02175907790660858,0.005038836505264044,0.01987200602889061,-0.003970559686422348,0.0347956158220768,0.014339164830744267,-0.021201249212026596,0.011377714574337006,-0.02441382221877575,0.053201545029878616,0.04739934206008911,-0.032163746654987335,0.004786977544426918,0.07185811549425125,-0.06277765333652496,0.0021804694551974535,0.022340767085552216,0.009252794086933136,-0.06419093906879425,-0.054969437420368195,-0.03797752410173416,-3.853884677793763e-33,0.047793030738830566,-0.025449238717556,-0.0816497653722763,0.06963283568620682,0.02216009423136711,0.016713881865143776,0.02550981566309929,-0.0812913030385971,0.11360016465187073,-0.05197015404701233,-0.0622226856648922,0.06877072900533676,-0.021143469959497452,0.03580435365438461,-0.046958182007074356,-0.04644116759300232,-0.08018024265766144,-0.04808419942855835,0.06282323598861694,0.003445220645517111,0.055064212530851364,0.10350818186998367,0.03164521977305412,-0.01704072393476963,-0.08211106061935425,-0.05946848914027214,0.013242434710264206,0.015494116581976414,-0.01660100929439068,-0.0216956939548254,0.028867095708847046,0.001382631016895175,-0.0028200512751936913,-0.003258767072111368,-0.04576496034860611,0.01581433042883873,0.031237637624144554,0.11451250314712524,0.040157221257686615,-0.013813633471727371,0.054629601538181305,-0.036238472908735275,-0.0736084058880806,-0.0948353186249733,-0.05620165169239044,-0.02667655237019062,0.07606078684329987,0.024915309622883797,-0.11615082621574402,0.029000673443078995,-0.017596451565623283,0.023868288844823837,-0.0733497142791748,-0.02296242117881775,-0.002028054092079401,-0.005399052985012531,0.07973121106624603,0.008870701305568218,-0.07652182877063751,0.02548443339765072,0.012227033264935017,-0.0004764694604091346,0.02755993977189064,0.026444923132658005,-0.021267471835017204,-0.020379139110445976,-0.07999593764543533,0.06987553834915161,-0.03294410929083824,0.0446106493473053,-0.029428981244564056,-0.012745474465191364,-0.01636505126953125,-0.049948856234550476,0.025162972509860992,-0.12240239977836609,-0.031121280044317245,0.004137824755162001,0.022329039871692657,0.039270106703042984,-0.01745072565972805,0.07018811255693436,-0.013685323297977448,0.005806121975183487,0.034672148525714874,0.09409262984991074,0.023951882496476173,0.031199336051940918,0.08036591857671738,0.0021794564090669155,-0.02349703572690487,-0.014031847007572651,0.01659829169511795,0.06245018169283867,-0.0008506972808390856,-2.2434605284615827e-8,0.04567325860261917,0.10108163952827454,-0.06893393397331238,0.040430985391139984,-0.006979547906666994,-0.02522108145058155,0.03959337994456291,0.04460427910089493,-0.04263642802834511,0.01982724480330944,-0.01579865999519825,0.0030196283478289843,-0.035810425877571106,-0.00779636250808835,0.0700916275382042,0.06559820473194122,0.018568413332104683,0.05388890951871872,-0.021152587607502937,-0.08215072005987167,-0.06217966601252556,0.043793972581624985,0.03126199543476105,-0.007032736204564571,-0.04179903864860535,0.05077328160405159,0.05270147696137428,0.01674545370042324,-0.042967282235622406,0.02017052285373211,0.06164771318435669,-0.0046429745852947235,-0.11122892051935196,-0.029570655897259712,0.0858016312122345,-0.0018587380181998014,-0.0073116677813231945,-0.02853710949420929,0.06764264404773712,0.016865769401192665,-0.053199123591184616,0.03427581489086151,0.014037690125405788,-0.038124796003103256,-0.13875216245651245,0.0840289369225502,0.006458566524088383,-0.029473768547177315,-0.015313143841922283,0.028782173991203308,0.04357479512691498,-0.0018983825575560331,-0.05615907162427902,0.07280342280864716,0.14544135332107544,0.1192004457116127,-0.000896075798664242,-0.016649071127176285,0.02028508111834526,0.044976044446229935,0.029249103739857674,0.046758174896240234,0.017199227586388588,-0.00717657757923007,-0.0018312674947082996,-0.032622043043375015,0.03407697007060051,-0.06329578161239624,0.03729499131441116,-0.045671071857213974,0.07703760266304016,0.09933211654424667,-0.019621500745415688,0.029641112312674522,-0.07565737515687943,-0.008425689302384853,0.027916239574551582,-0.02947389893233776,-0.03478133678436279,-0.0010915299644693732,0.061653636395931244,-0.010494965128600597,0.008852589875459671,0.036264464259147644,0.01364052202552557,-0.026011129841208458,-0.01848490908741951,-0.003530070185661316,-0.060988109558820724,0.04278107360005379,0.08617386966943741,0.018611034378409386,-0.020533017814159393,-0.02960619516670704,-0.0017404165118932724,-0.004230905789881945,-0.020212918519973755,0.001627520308829844,0.06588799506425858,0.008445855230093002,0.08657242357730865,-0.0697648748755455,0.007437833119183779,-0.04574756696820259,-0.08280206471681595,-0.014741454273462296,-0.04373440891504288,0.047118403017520905,-0.023298129439353943,-0.057929668575525284,0.024462148547172546,-0.05781380832195282,0.02251201495528221,-0.06414492428302765,0.06914858520030975,-0.0479053296148777,0.024507299065589905,-0.008176617324352264,-0.034651245921850204,-0.01550860982388258,0.0797409638762474,0.013872596435248852,0.018499014899134636,0.032377250492572784,-0.0027516940608620644,0.004232392180711031,-0.08693213760852814,0.027147220447659492,0.08078059554100037,0.030517594888806343,0.07060282677412033,0.02750585600733757,0.06563454866409302,-0.006011576857417822,-0.09598663449287415,-0.02938898280262947,0.028095565736293793,0.005235973279923201,-0.017954569309949875,0.028990115970373154,-0.007628838066011667,0.01974153146147728,0.03897674009203911,-0.08077970892190933,0.07103437930345535,0.09028220921754837,-0.08310680836439133,0.08083867281675339,-0.021862206980586052,0.02106611803174019,0.036175042390823364,0.05693960189819336,0.07216034084558487,0.05856866389513016,0.048367418348789215,-0.04522222280502319,0.045887403190135956,0.030658990144729614,0.07476258277893066,0.009017685428261757,0.033009082078933716,-0.09618063271045685,-0.021328454837203026,-0.03555731847882271,-0.05952958017587662,-0.0148224588483572,0.012249261140823364,-0.11685869097709656,-0.004009734373539686,0.003973514307290316,-0.003723179455846548,-0.05302076414227486,0.08396632969379425,0.007400973699986935,-0.04396678879857063,0.013796302489936352,-0.0268941018730402,0.06101846322417259,0.057480793446302414,0.015753939747810364,-0.09323589503765106,-0.03853573650121689,0.01892826519906521,0.05911798030138016,0.026157686486840248,0.04286365956068039,0.016724875196814537,-0.01923990622162819,0.006156149785965681,-0.025320909917354584,-0.054734718054533005,4.6565265468726217e-33,0.0035125515423715115,0.0008221031748689711,-0.0494316928088665,0.058398060500621796,0.10624270886182785,-0.11102912575006485,0.008785205893218517,0.07937272638082504,-0.07533065229654312,0.08120331168174744,-0.004246442578732967,-0.06289862096309662,0.033915527164936066,0.01823674701154232,0.04250423610210419,-0.024549242109060287,-0.07008801400661469,0.025207173079252243,-0.03804197534918785,0.035028230398893356,-0.05842012166976929,-0.09935959428548813,0.04310060665011406,-0.024671142920851707,0.12783434987068176,-0.01613094098865986,-0.06272817403078079,0.09952636808156967,0.09598138928413391,0.030542714521288872,-0.07966458052396774,0.020679164677858353,-0.06517501175403595,0.014421539381146431,0.021973293274641037,-0.006979316007345915,-0.02000807411968708,-0.028273891657590866,-0.007195733953267336,-0.04019145295023918,-0.055738065391778946,-0.011432955041527748,-0.01564781181514263,0.002517395419999957,0.08310418576002121,-0.02310735359787941,0.034086015075445175,-0.10524508357048035,-0.01725468784570694,-0.05225144326686859,-0.151971697807312,-0.03536122292280197,0.030681846663355827,-0.06926204264163971,-0.038885850459337234,-0.023027336224913597,0.03828207030892372,-0.1254270374774933,-0.03229349106550217,0.07134852558374405,-0.08705805242061615,0.08767758309841156,-0.017185300588607788,-0.012113208882510662,-0.0250241681933403,-0.06390251964330673,0.0008151766960509121,0.012780005112290382,0.025935204699635506,-0.03824125975370407,-0.04392467066645622,0.016378067433834076,0.0074314852245152,-0.08071224391460419,-0.04572255164384842,-0.003948038909584284,0.07155822962522507,0.051051683723926544,-0.037506017833948135,0.037216849625110626,0.04783444106578827,0.0005487988819368184,0.004533969797194004,-0.015995124354958534,-0.011256393976509571,0.10066317021846771,0.016131171956658363,-0.010076717473566532,-0.04527302831411362,0.07329000532627106,-0.051238052546978,-0.10916879773139954,0.02590603195130825,0.00040041093598119915,-0.013908431865274906,-6.930655183046697e-33,-0.0013235628139227629,-0.017362572252750397,-0.11089442670345306,0.004480808973312378,0.036161117255687714,-0.0433865562081337,-0.046095214784145355,-0.02486429549753666,0.033114418387413025,-0.026923038065433502,-0.08204366266727448,0.011794417165219784,0.023655591532588005,0.026427287608385086,-0.05408082902431488,-0.104864202439785,-0.04481842741370201,-0.03291117399930954,0.04860822111368179,0.03221036493778229,0.010182758793234825,0.09537635743618011,-0.05213049799203873,-0.053430452942848206,0.0068098497577011585,-0.01418638788163662,-0.08431928604841232,0.04972900077700615,-0.0017977176466956735,0.009066331200301647,0.09038148820400238,-0.014925573952496052,0.02231086790561676,0.017481401562690735,-0.05614926293492317,-0.009214108809828758,0.03398708999156952,-0.0351191945374012,0.04870470613241196,-0.0209871344268322,0.10118481516838074,0.020100252702832222,-0.02801060490310192,-0.08902055025100708,0.03731752559542656,-0.015850454568862915,0.01117920782417059,0.0719430223107338,0.03026994690299034,-0.04044996201992035,0.007419714704155922,0.00891747698187828,-0.0054861074313521385,0.023828035220503807,0.03375672176480293,-0.005694815889000893,0.0763363167643547,-0.02633524313569069,-0.055168211460113525,0.06668511033058167,-0.01548525970429182,0.003135447623208165,0.06996484845876694,0.07637081295251846,0.00004602952321874909,0.010868231765925884,-0.04015752300620079,0.06697571277618408,-0.10865441709756851,0.06751303374767303,-0.08067533373832703,0.0024281826335936785,-0.03109557367861271,-0.05502902343869209,-0.023681113496422768,-0.09318011999130249,-0.04762386158108711,-0.036486297845840454,-0.10036338865756989,0.005673727486282587,0.02927236445248127,-0.031138157472014427,-0.11328663676977158,0.10054280608892441,-0.015886226668953896,0.03437644988298416,-0.018330156803131104,-0.021284915506839752,0.05456824600696564,-0.06369516253471375,-0.10372857004404068,-0.019098369404673576,-0.032147206366062164,0.038150545209646225,-0.03127826377749443,-6.096126980992267e-8,0.04907289147377014,0.04456286504864693,-0.03584926202893257,-0.026905536651611328,0.062354981899261475,-0.014600764960050583,-0.03004937432706356,-0.015806831419467926,-0.006625509820878506,0.0738632008433342,-0.022656040266156197,-0.024943994358181953,-0.0857640877366066,0.018041931092739105,-0.007544233463704586,0.03793109208345413,0.011529933661222458,0.08089254796504974,-0.02722453884780407,-0.0649179145693779,0.05547601729631424,-0.041345443576574326,0.01781322993338108,0.06361274421215057,0.043628059327602386,-0.008234224282205105,0.09160756319761276,-0.044023532420396805,0.010384105145931244,0.06049136817455292,-0.04953625425696373,-0.028227852657437325,0.012756101787090302,0.021636536344885826,0.0432753749191761,0.031779978424310684,-0.017025265842676163,0.02934999018907547,0.11589315533638,0.058463919907808304,-0.06377065181732178,0.050354957580566406,0.06858670711517334,0.0019930966664105654,-0.08662182092666626,0.047006674110889435,-0.06750297546386719,0.02461283467710018,0.044925443828105927,0.017983851954340935,-0.03333531692624092,-0.0004070789727848023,-0.051681458950042725,0.11410114169120789,0.07847737520933151,0.09818731993436813,-0.014634895138442516,-0.043839532881975174,0.021277880296111107,0.08686122298240662,-0.049068633466959,0.029442831873893738,0.007969113998115063,0.01201688777655363
pg19Z8LL06w,2023-02-15T15:08:45Z,Docker Crash Course for Absolute Beginners [NEW],in this video I will teach you all the main concepts of Docker including getting your first hands-on experience with it so if you have to use Docker at work or if you need to learn Docker to level up your engineering skills and need to get started fast and understand all the main Concepts and learn basics of how to work with Docker this crash course is exactly right for you first we'll start by explaining what Docker is why was it even created basically what problems it solves in engineering and how it helps in software development and deployment process so you will understand exactly why Docker is such a big deal and why it has become so popular and widely used in IT projects and as part of a virtualization solution Docker being an improvement over virtual machines or the next Evolution step I will also explain the difference between virtual machine and Docker and what are the advantages of Docker in this comparison after we've understood why we want to use Docker in the first place we will install Docker and learn how to actually work with it we will learn the concepts of Docker images containers Docker registry public and private Registries and we will run containers locally based on some of the images available on Dockers public registry called Docker Hub we will also learn the concept of creating your own images and learning about a Docker image blueprint called Docker file and of course we will see all these in action and learn all the docker commands for pulling images running containers building your own Docker image Etc we will also learn about versioning images with image text and finally after you've learned how to work with Docker I will also explain with graphical animations how Docker fits in the big picture of software development and deployment process so by the end of this video you will feel way more confident about your knowledge and understanding in Docker and and can easily build on that Foundation knowledge to become a Docker power user if you want to and under the video description I will provide some resources to learn even more about Docker and become more advanced in it but before we jump right in it seems like many of you watching the videos on our channel are still not subscribed so if you're getting some value out of the free tutorials I put out regularly on this channel be sure to subscribe not to miss any future videos or tutorials I would also be happy to connect with you on my other social media accounts where I post behind the scenes content weekly updates and so on so hope to connect to you there as well well I'm super excited to teach you all these so let's get into it let's start with the most important question what is Docker why was it even created and what problem does it solve in simple words Docker is a virtualization software that makes developing and deploying applications very easy much easier compared to how it was done before Docker was introduced and Docker does that by packaging an application into something called a container that has everything the application needs to run like the application code itself its libraries and dependencies but also the runtime and environment configuration so application and its running environment are both packaged in a single Docker package which you can easily share and distribute now why is this a big deal and how are applications actually developed and deployed before Docker was introduced let's see that to understand the benefits of Docker more clearly so how did we develop applications before containers usually when you have a team of developers working on some application they would have to install all the services that application depends on or needs like database Services Etc directly on their operating system right for example if you're developing a JavaScript application and you need a postgresql database maybe you need a redis for caching mosquito for messaging like you have a microservices application now you need all these Services locally on your development environment so you can actually develop and test the application right and every developer in the team would then have to go and install all those Services configure and run them on their local development environment and depending on which operating system they're using the installation process will be different because installing postgresql database on Mac OS is different from installing it on a Windows machine for example another thing with installing Services directly on an operating system following some installation guide is that you usually have multiple steps of installation and then configuration of the service so with multiple commands that you have to execute to install configure and set up the service the chances of something going wrong and error happening is actually pretty high and this approach or this process of setting up a development environment for a developer can actually be pretty tedious depending on how complex your application is for example if you have 10 services that your application is using then you would have to do that installation 10 times for each service and again it will differ within the team based on what operating system each developer is using now let's see how containers solve some of these problems with containers you actually do not have to install any of the services directly on your operating system because with Docker you have that service packaged in one isolated environment so you have postgresql with a specific version packaged with its whole configuration inside of a container so as a developer you don't have to go and look for some binaries to download and install on your machine but rather you just go ahead and start that service as a Docker container using a single Docker command which fetches the container package from internet and starts it on your computer and the docker command will be the same regardless of which operating system you're on and it will also be the same regardless of which service you are installing so if you have 10 services that your JavaScript application depends on you would just have to run 10 Docker commands for each container and that will be it so as you see Docker standardizes the process of running any service on your development environment and makes the whole process much easier so you can basically focus and work more on development instead of trying to install and configure services on your machine and this obviously makes setting up your local development environment much faster and easier than the option without containers plus with the docker you can even have different versions of the same application running on your local environment without having any conflict which is very difficult to do if you are installing that same application with different versions directly on your operating system and we will actually see all of this in action in the demo part of this video now let's see how containers can improve the application deployment process before containers a traditional deployment process would look like this development team would produce an application artifact or a package together with a set of instructions of how to actually install and configure that application package on the server so you would have something like a jar file for Java application or something similar depending on the programming language used and in addition of course you would have some kind of database service or some other services that your application needed also with a set of instructions of how to configure and set it up on the server so that application could connect to it and use it so development team would give that application artifact or package over to the operations team and the operations team would handle installing and configuring the application and all its dependent services like database for example now the problem with this kind of approach is that first of all you need to configure everything and install everything again indirectly on the operating system which I I mentioned in the development context that is actually very error prone and you can have various different problems during the setup process you can also have conflicts with dependency versions where two services are depending on the same library for example but with different versions and when that happens it's going to make the setup process way more difficult and complex so basically a lot of things that can go wrong when operations team is installing and setting up application any services on a server another problem that could arise from this kind of process is when there is a miscommunication between the development team and operations team because since everything is in a textual guide like an instruction list of how to configure and run the application or maybe some kind of checklist there could be cases where developers forget to mention some important step about configuration and when that part fails the operations team have to go back to developers and ask for more details and input and this could lead to some back and forth communication until the application is successfully deployed on the server so basically you have this additional communication overhead where developers have to communicate in some kind of textual graphical whatever format how the application should run and as I mentioned this could lead to issues and miscommunications with containers this process is actually simplified because now developers create an application package that doesn't only include the code itself but also all the dependencies and the configuration for the application so instead of having to write that in some textual format and document they basically just package all of that inside the application artifact and since it's already encapsulated in one environment the operations people don't have to configure any of this stuff directly on the server so it makes the whole process way easier and there is less room for issues that I mentioned previously so the only thing now that operations team need to do in this case is to run a Docker command that gets the container package that developers created and runs it on the server the same way operations team will run any services that application needs also as Docker containers and that makes the deployment process way easier on the operation side now of course the operations team will have to install all and set up the docker runtime on the server before they will be able to run containers but that's just one-time effort for one service or one technology and once you have Docker runtime installed you can simply run Docker containers on that server now at the beginning I mentioned that Docker is a virtualization tool just like a virtual machine and virtual machines have been around for a long time so why did Docker become so widely adopted what advantage is it has over virtual machines and what is the difference between the two for that we need to see a little bit of how Docker works on a technical level I also said that with Docker you don't need to install Services directly on operating system but in that case how does Docker run its containers on an operating system now in order to understand all this let's first look at how an operating system is made up operating systems have two main layers you have the operating system kernel and the operating system Apple locations layer and kernel is the part that communicates with the hardware components like CPU memory storage Etc so when you have a physical machine with all these resources and you install operating system on that physical machine the kernel of the operating system will actually be the one talking to the hardware components to allocate resources like CPU memory storage Etc to the applications then running on that operating system and those applications are part of the applications layer and they run on top of the kernel layer so kernel is kind of a middleman between the applications that you see when you interact with your computer and the underlying Hardware of your computer and now since Docker and virtual machine are both virtualization tools the question is what part of the operating system they actually virtualize and that's where the main difference between Docker and virtual machines actually lie so Docker virtualizes the applications layer this means when you run a Docker container it actually contains the applications layer of the operating system and some other applications installed on top of that application layer this could be a Java runtime or python or whatever and it uses the kernel of the host because it doesn't have its own kernel the virtual machine on the other hand has the applications layer and its own kernel so it virtualizes the complete operating system which means that when you download a virtual machine image on your host it doesn't use the host kernel it actually puts up its own so what is this difference between Docker and virtual machine actually mean first of all the size of the docker packages or images are much smaller because they just have to implement one layer of the operating system so Docker images are usually a couple of megabytes large virtual machine images on the other hand can be a couple of gigabytes this means when working with Docker you actually save a lot of disk space you can run and start Docker containers much faster than virtual machines because virtual machine has to put up a kernel every time it starts while Docker container just reuses the host kernel and you just start the application layer on top of it so while virtual machine needs a couple of minutes to start up Docker containers usually start up in a few milliseconds the third difference is compatibility so you can run virtual image of any operating system on any other operating system host so on a Windows machine you can run a Linux virtual machine for example but you can't do that with Docker at least not directly so what is the problem here let's say you have a Windows operating system with Windows kernel and its application layer and you want to run a Linux based Docker image directly on that Windows host the problem here is that Linux based Docker image cannot use the windows kernel it wouldn't need a Linux kernel to run because you can run a Linux application layer on a Windows kernel so that's kind of an issue with Docker however when you're developing on Windows or Mac OS you want to run various Services because most containers for the popular services are actually Linux based also interesting to note that Docker was originally written and built for Linux but later Docker actually made an update and developed what's called Docker desktop for Windows and Mac which made it possible to run Linux based containers on Windows and Mac computers as well so the way it works is that Docker desktop uses a hypervisor layer with a lightweight Linux Distribution on top of it to provide the needed Linux kernel and this way make running Linux based containers possible on Windows and Mac operating systems and by the way if you want to understand more about virtualization and how virtual machines work and what a hypervisor for example is you can watch my other video where I explain all of that in detail so this means for local development as an engineer you would install Docker desktop on your Windows or Mac OS computer to run Linux based images which as I mentioned most of the popular Services databases Etc are mostly Linux based so you would need that and that brings us to the installation of Docker in order to do some demos and learn Docker in practice you would first need to install it so in order to install Docker you just go to their official page for installation guide and follow the steps because Docker gets updated all the time the installation changes so instead of me just giving you some comments that may work now but we'll get updated in the future you should always refer to the latest documentation for installation guide for any tool so if we search for Docker desktop installation click on one of those links like install on windows so that's the docker desktop the tool that I mentioned that solves this problem of running Linux based images on a different operating system but it actually includes a lot of other things when you install it so what are you exactly installing with Docker desktop and you see exactly what's included in there so basically get the docker service itself it's called Docker engine that's the main part of the docker that makes this virtualization possible but when we have a service we need to communicate with that right so we need a client that can talk to that service so Docker desktop actually comes with a command line interface client which means we can execute Docker commands on a command line to start containers to create containers start stop them remove them Etc and do all kinds of things and it also comes with a graphical user interface client so if you're not comfortable working with command line you can actually use the graphical using interface where you can do all these things but in a nice user-friendly UI so you get all these things when you install Docker desktop basically everything that you need to get started with Docker and of course depending on which operating system you're on you're going to choose that one Mac windows on Linux so let's click on one of those and you basically just follow the instructions you have some system requirements you have to check things like the the version of your Mac OS how much resources you're going to need and you also have the options for Mac with Intel or Mac with apple silicon so you can toggle between those and basically just choose the guide that matches your computer specifications and once you have that check the system requirements go ahead and click on one of those in my case I have mac with Intel chip so I would click on this one and that's actually the docker desktop installer so if I click it's going to download this DMG image and once it's downloaded you basically just follow the steps described here right you double click on it open the application and so on and same for Windows if your windows you basically click on this one and download Docker desktop for Windows and make sure to check the system requirements and kind of prepare everything you need for starting Docker generally for latest versions of Windows Mac or whatever operating system it should be pretty easy and straightforward to install Docker so go ahead and do that once you're done with installation you can simply start the service by searching Docker and if I click on it you will see right here that it's actually starting up Docker service for Docker engine and there you go it's running and this view here that you're seeing this window is actually the graphical user interface of Docker that I mentioned so that's the client that you can use to interact with the docker engine so you have a list of containers running currently so there's no list same with images if I switched images I have cleaned up my environment so I'm starting with scratch with empty State just like you so we're ready to start using Docker But first you may be wondering what are images and that's what I'm gonna explain next because it's a very important Concept in docker now mentioned that Docker allows to package the application with its environment configuration in this package that you can share and distribute easily so just like an application artifact file like when we create a zip or tar file or a jar file which you can upload to a artifact storage and then download on the server or locally whenever you need it and then package or artifact that we produce with Docker is called a Docker image so it's basically an application artifact but different from jar file or from other application artifacts it not only has the compiled application code inside but additionally has information about the environment configuration it has the operating system application layer as I mentioned plus the tools like node npm or Java runtime installed on that depending on what programming language your application was written in for example you have a JavaScript application you would need node.js and npm to run your application right so in the docker image you would actually have node and npm installed already you can also add environment variables that your application needs for example you can create directories you can create files or any other environment configuration whatever you need around your application so all of the information is packaged in the docker image together with the application code and that's the great advantage of Docker that we talked about and as I said the package is called an image so if that's an image what is a container then well we need to start that application package somewhere right so when we take that package or image and download it to server or your local computer laptop we want to run it on that computer the application has to actually run and when we run that image on an operating system and the application inside starts in the pre-configured environment that gives us a container so a running instance of an image is a container so a container is basically a running instance of an image and from the same image from one image you can run multiple containers which is a legitimate use case if you need to run multiple instances of this same application for increased performance for example and that's exactly what we were seeing here so we have the images these are the application packages basically and then from those images we can start containers which we will see listed right here which are running instances of those images and I also said that in addition to the graphical user interface we get a command line interface client Docker client that can talk to Docker engine and since we installed Docker desktop we should have that Docker CLI also available locally which means if you open your terminal you should be able to execute Docker commits and Doc recommends we can do anything for example we can check what images we have available locally so if I do Docker images that will give me a list of images that I have locally which in this case I don't have any which we saw in the graphical user interface and I can also check the containers using a command docker occur PS and again I don't have any running containers yet now before moving on I want to give a shout out to Ned Hopper net Hopper's Cloud platform called kubernetes application operations offers an easy way for devops teams to deliver manage upgrade connect secure and monitor applications in one or more kubernetes clusters with this platform they basically create this virtual Network layer that connects multiple environments for example if you have multiple Cloud platforms and multiple kubernetes clusters even your own on-premise data center where your application gets deployed you can connect all these in one virtual Network so you can deploy and operate your kubernetes workloads as if it was in one cluster or one infrastructure environment and the GitHub Centric approach they use offers the visibility to know who did what and when for both your infrastructure and application so with net Hopper Enterprises can automate their operations and instead of building an own platform devops teams can focus on what matters the most which is releasing more application features faster so check them out you can actually sign up for a free account and take it for a spin to see if net Hopper is the right solution for you now it's clear that we get containers by running images but how do we get images to run containers from let's say we want to run a database container or redis or some log collector service container how do we get their Docker images well that's where Docker Registries come in so there are ready Docker images available online in image storage or registry so basically this is a storage specifically for Docker image type of artifacts and usually the company is developing those services like redis mongodb Etc as well as Docker Community itself will create what's called official images so you know this mongodb image was actually created by mongodb itself or the docker community so you know it's an official verified image from Docker itself and Docker itself offers the biggest Docker registry called Docker Hub where you can find any of these official images and many other images that different companies or individual developers have created and uploaded there so if we search for Docker hub right here you see Docker Hub container image Library and that's how it looks like and you don't actually have to register or sign up on Docker Hub to find those official images so anyone can go on this website and basically browse the container images and here in search bar you can type any service that you're looking for for example redis that I mentioned and if I hit enter you will basically see a list of various radius related images as well as the ready service itself as a Docker image and here you have this batch or label that says Docker official image for example for the reddish image that we are going to choose here you see that it is actually maintained by Docker Community the way it works is that Docker has a dedicated team that is responsible for reviewing and Publishing all content in the docker official images and this team works in the collaboration with the technology creators or maintainers as well as security expert words to create and manage those official Docker images so this way it is ensured that not only the technology creators are involved in the official image creation but also all the docker security best practices and production best practices are also considered in the image creation and that's basically the description page with all the information about how to use this Docker image what it includes Etc and again as I said Docker Hub is the largest Docker image registry so you can find images for any service that you want to use on Docker Hub now of course technology changes and there are updates to Applications those Technologies so you have a new version of redis or mongodb and in that case a new Docker image will be created so images are versioned as well and these are called image tags and on the page of each image you actually have the list of versions or tags of that image listed right here so this is for redis and if I search for postgres for example foreign you will see different image tags for postgres image also listed here so when you're using a technology and you need a specific version you can choose a Docker image that has that version of the technology and there is a special tag that all images have called latest so right here you see this latest tag or here as well in the recent text so latest tag is basically the latest the last image that was built so if you don't specify or choose a version explicitly you basically get the latest image from the docker Hub so now we've seen what images are and where you can get them so now the question is how do we actually get the image from Docker Hub and download it locally on our computer so we can start a container from that image so first we locate the image that we want to run as a container locally for our demo I'm going to use an nginx image so go ahead and search for nginx which is basically a simple web server and it has a UI so we will be able to access our container from the browser to validate the container has started successfully that's why I'm choosing nginx and here you have a bunch of image tags that you can choose from so the second step after locating the image is to pick a specific image tag and note that selecting a specific version of image is the best practice in most cases and let's say we choose version 1.23 so we're choosing this tag right here and to download an image we go back to our terminal and we execute docker pull comment and we specify the name of the image which is nginx so you have that whole command here as well so that's basically the name of the image that you have written here so that's nginx and then we specify the image tag by separating it with a column and then the version 1.23 that's what we chose that's the whole command so Docker client will contact Docker Hub and it will say I want to grab the nginx image with this specific tag and download it locally so let's execute and here we see that it's pulling the image from the image registry Docker Hub and the reason why we don't have to tell Docker to find that image on Docker Hub is because Docker Hub is actually the default location where Docker will look for any images that we specify right here so it's automatically configured as a location for downloading the images from and the download happened and now if we execute Docker images command again as we did here we should actually see one image now locally which is nginx with an image tag 1.23 and some other information like the size of the image which is usually in megabytes as I mentioned so we have an image now locally and if we pull an image without any specific tag so we do this basically Docker pull name of the image if I execute this you see that it is pulling the latest image automatically and now if I do Docker images again we're going to see two images of nginx with two different texts right so these are actually two separate images with different versions cool now we have images locally but obviously they're only useful when we run them in a container environment how can we do that also super easy we pick the image we already have available locally with the tag so let's say we want to run this image as a container and we execute Docker run command and with the name of the image and the tag super easy and let's execute and that command actually starts the container based on the image and we know the container started because we see the logs of nginx service starting up inside the container so these are actually container logs that we see in the console so it's launching a couple of scripts and right here we have start worker processes and the container is running so now if I open a new terminal session like this and to Docker PS I should actually see one container this one here in the running container list and we have some information about the container we have the ID we have the image that the container is based on including the tag when it was created and also the name of the container so we have the ID and name of the container this is the name which Docker actually automatically generates and assigns to a container when it's created so it's a random generated name now if I go back here you see that these locks the container logs actually are blocking the terminal so if I want to get the terminal back and do Ctrl C exit the container exits and the process actually dies so now if I do Docker PS you will see that there is no container running but we can start a container in the background without it blocking the terminal by adding a flag called minus D which stands for detached so it detaches the docker process from terminal if I execute this you see that it's not blocking the terminal anymore and instead of showing the logs from nginx starting up inside the container it just locks out the full ID of the container so now if I do Docker PS here in the same terminal I should see that container running again and that's basically the ID or the part of the this full ID string shown here but when we start a container in the background in a detached mode you may still want to see the application logs inside the container so you may want to see how did nginx start up what did it log actually so for that you can use another Docker command called Docker locks with the container ID like this and it will print out the application logs from the container now in order to create the container the nginx container we first pull the image and then we created a container from that image but we can actually save ourselves the pull command and execute run command directly even if the image is not available locally so right now we have these two images available locally but in the docker run command you can actually provide any image that exists on Docker Hub it doesn't necessarily have to exist locally on your computer so you don't have to pull that first so if I go back we can actually choose a different image version let's choose 1.22 Dash Alpine so this image tag which we don't have locally or of course this can be completely different service it doesn't matter so basically any image that we don't have locally you can run directly using Docker run command so what it does is first it will try to locate that image locally and if it doesn't find it it will go to Docker Hub by default and pull the image from there automatically which is very convenient so it does both in one command basically so it downloaded the image with this tag and started the container and now if we do Docker PS we should have two containers running with different nginx versions and remember I said Docker solves the problem of running different versions of the same application at once so that's how simple it is to do that with Docker so we can actually quit this container and now again we have that one nginx container with this version now the important question is how do we access this container well we can't right now because the container is running in the closed Docker Network so we can't access it from our local computer browser for example we need to First expose the container to our local network which may sound a little bit difficult but it's super easy so basically we're going to do what's called a port binding the container is running on some Port right and each application has some standard port on which it's running like nginx application always runs on Port 80 radius runs on Port 6379 so these are standard ports for these applications so that's the port where container is running on and for nginx we see the ports under the list of ports here application is running on Port 80 inside the container so now if I try to access nginx container on this port on Port 80 from the browser and let's try to do that we're eating and hit enter you see that nothing is available on this port on localhost so now we can tell Docker hey you know what bind that container Port 80 to our local host on any port that I tell you on some specific Port like 8080 or 9000 it doesn't actually matter so that I can access the container or whatever is running inside the container as if it was running on my Local Host Port 9000 and we do that with an additional flag when creating a Docker container so what we're going to do is first we're going to stop this container and create a new one so we're going to do Docker stop which basically stops this running container and we're going to create a new container so we're going to do Docker run nginx the same version and we're going to find it in the background in detached mode now we're going to do the port binding with an additional flag minus p and it's super easy we're telling Docker the nginx application Port inside container which is 80. please take that and find that on a host localhost on Port whatever 9000 for example right that's the port I'm choosing so this flag here will actually expose the container to our local network or localhost so these nginx process running in container will be accessible for us on Port 9000. so now if I execute this let's see that container is running and in the port section we see a different value so instead of just having 80 we have this port binding information so if you forgot which Port you chose or if you have 10 different containers with Docker PS you can actually see on which Port each container is accessible on your Local Host so this will be the port so now if I go back to the browser and instead of localhost 80 we're going to type in localhost 9000. and hit enter there you go we have the welcome to nginx page so it means we are actually accessing our application and we can see that in the logs as well Docker locks container ID and there you go this is the log uh that nginx application produced that it got a request from MEC or Mac OS machine Chrome browser so we see that our request actually reached the nginx application running inside the container so that's how easy it is to run a service inside container and then access it locally now as I said you can choose whatever Port you want but it's also pretty much a standard to use the same port on your host machine as the container is using so if I was running a MySQL container which started at Port 3306. I would bind it on localhost 3306. so that's kind of a standard now there's one thing I want to point out here which is that Docker run command actually creates a new container every time it doesn't reuse the container that we created previously which means since we executed Docker run command a couple of times already we should actually have multiple containers on our laptop however if I do Docker PS I only see the running container I don't see the ones that I created but stopped but those containers actually still exist so if I do Docker PS with a Fleck a and execute this gives you actually a list of all containers whether they are running or stopped so this is the active container that is still running and these ones are the stopped ones it even says exited 10 minutes ago six minutes ago whatever so we have four containers with different configuration and previously I showed you Docker stop command which basically stops an actively running container so we can stop this one and now it will show it as a stopped container as well exited one second ago but the same way you can also restart a container that you created before without having to create a new one with Docker run command so for that we have a Docker start and that takes the ID of the container and starts the container again and again you can start multiple containers at once if you want like this and they have two containers running now you saw that we use ID of the container in various Docker commands so to start the container to restart it to check the logs Etc but ID is hard to remember and you have to look it up all the time so as an alternative you can also use container name for all these commands instead of the ID which gets auto-generated by Docker but we can actually rewrite that and we can give our containers a more meaningful names when we create them so we can stop those two containers using the ID or the name like this so these are two different containers one with the ID one with name and we're going to stop both of them there you go now when we create a new container we can actually give it a specific name and there is another flag for that which is dash dash name and then we provide the name that we want to give our container let's say this is a web app so that's what we're going to call our container and let's execute if I do Docker PS you see that the name is not some auto-generated random thing but instead our container is called web app so now we can do Docker locks and name of our container like this now we've learned about Docker Hub which is actually what's called a Public Image registry which means those images that we used are visible and available for public but when a company creates their own images of their own applications of course they don't want it to be available publicly so for that there are what's called private Docker Registries and there are many of them almost all Cloud providers have a service for private Docker registry for example AWS is ECR or elastic container registry service Google Azure they all have their own Docker Registries Nexus which is a popular artifact storage service has Docker registry even Docker Hub has a private Docker registry so on the landing page of Docker Hub you saw this get started form so basically if you want to store your private Docker images on Docker Hub you can actually create a private registry on Docker Hub or even create a public registry and upload your images there so that's why I actually have an account because I have uploaded a couple of images on Docker Hub that my students can download for different courses and there is one more concept I want to mention related to registry which is something called a repository which you also often hear Docker repository Docker registry so what is the difference between them very simply explained AWS ECR is a registry so basically that's a service that provides storage for images and inside that registry you can have multiple repositories for all your different application images so each application gets its own repository and in that repository you can store different image versions or tags of that same application the same way dockerhub is a registry it's a service for storing images and on Docker Hub you can have your public repositories for storing images that will be accessible publicly or you can have private repositories for different applications and again you can have repository dedicated for each application so that's a side note there if you hear these terms and Concepts and you know what is the difference between them now I mentioned that companies would want to create their own custom images for their applications so how does that actually work how can I create my own Docker image for my application and the use case for that is when I'm done with development the application is ready it has some features and we want to release it to the end users so we want to run it on a deployment server and to make the deployment process easier once you deploy our application as a Docker container along with the database and other services that are also going to run as Docker containers so how can we take our created deployed application code and package it into a Docker image for that we need to create a definition of how to build an image from our application and that definition is written in a file called a Docker file so that's how it should be called creating a simple Docker file is very easy and in this part we're going to take a super simple node.js application that I prepared and we're going to write a Docker file for that application to create a Docker image out of it and as I said it's very easy to do so this is the application it is extremely simple I just have one server.js file which basically just starts the application on Port 3000 and then it just says welcome when you access it from the browser and we have one package of Json file which contains this dependency but the express library that we use here to start the application super lean and simple and that's the application from which we're going to create a Docker image and start it as a Docker container so let's go ahead and do that so in the root of the application we're going to create a new file called Docker file so that's the name and you see that most code editors actually detect Docker file and we get this Docker icon here so in this Docker file we're going to write a definition of how the image should be built from this application so what does our application need it needs a node installed because node should run our application right so if I wanted to start this application luckily for my terminal I would execute node SRC so the source folder and server.js command to start the application so we need that node command available inside the image and that's where the concept of Base image comes in so each Docker image is actually based on this base image which is mostly a lightweight Linux operating system image that has the node npm or whatever tool you need for your application installed on top of it so for a JavaScript application you would have node base image if you have Java application we will use an image that has Java runtime installed again Linux operating system with Java installed on top of it and that's the base image and we Define the base image using a directive in Docker file called from we're saying build this image from the base image and if I go back to Docker Hub and search for node you will see that we have an image which has node and npm installed inside and base images are just like other images so basically you can pile and build on top of the images in Docker so they're just like any other image that we saw and they also have text or image versions so we're going to choose node image and a specific version and let's actually go for 19-alpine so that's our base image and our first directive in the docker file so again this will just make sure that when our node.js application starts in a container it will have a node and npm commands available inside to run our application now if we start our application with this command we will see that we get an error because we need to First install dependencies of an application we just have one dependency which is press Library which means we would have to execute npm install command which will check the package.json file read all the dependencies defined inside and install them locally in node modules folder so basically we're mapping the same thing that we would do to run the application locally we're making that inside the container so we would have to run npm install command also inside the container so as I mentioned before most of the docker images are Linux based Alpine is a Linux a lightweight Linux operating system distribution so so in Docker file you can write any Linux commands that you want to execute inside the container and whenever we want to run any command inside the container whether it's a Linux command or node command npm command whatever we executed using a run directive so that's another directive and you see that directives are written in all caps and then comes the command so npm install which will download dependencies inside the container and create a node modules folder inside the container before the application gets started so again think of a container as its own isolated environment it has a simple Linux operating system with node and npm installed and we're executing npm install however we need application code inside the container as well right so we need the server.js inside and we need the package.json because that's what npm command will need to actually read the dependencies and that's another directive where where we take the files from our local computer and we paste them copy them into the container and that's a directive called copy and you can copy individual files like package.json from here into the container and we can say where in container on which location in the file system it should be copied to and let's say it should be copied into a folder called slash app inside the container so this is on our machine right we have package.json here this is inside the container it's a completely isolated system from our local environment so we can copy individual files and we can also copy the complete directories so we also need our application code inside obviously to run the application so we can copy this whole Source directory so we have multiple files inside we can copy the whole directory into the Container again in slash app location and the slash at the end is also very important so the docker knows to create this folder if it doesn't exist in the container yet so the roots of Linux file system app folder inside and then slash so now all the relevant application files like package.json and the whole Source directory are copied into the container on this location the next thing we want to do before we can execute npm install command is to actually change into that directory right so in Linux we have this CD right to change into a directory in order to execute the following commands inside the directory in Docker file we have a directive for that called work dear it's a working directory which is an equivalent of changing into a directory to execute all the following commands in that directory so we can do slash app here so it sets this path as the default location for whatever comes afterwards okay so we're copying everything into the Container then we are setting the working directory or the default directory inside the container and then we're executing npm install again within the container to download all the dependencies that application needs that are defined here and finally we need to run the application right so after npm install the node command should be executed and we learned to execute commands we use the Run directive however if this is the last command in the docker file so something that actually starts the process itself the application inside we have a different directive for that called CMD so that's basically the last command in the docker file and that starts the application and the Syntax for that is the command which is node and the parameter gserver.js so we copied everything into slash app so we have the server.js inside the app directory and we're starting it or running it using node commit that's it that is the complete Docker file which will create a Docker image for our node.js application which we can then start as a container so now we have the definition in Docker file it's time to actually build the image from this definition I'm going to clear this up and without changing to the terminal we can actually reuse this one we can execute a Docker command to build a Docker image which is super easy we just do Docker build then we have a couple of options that we can provide the first one is the name of the image so just like all those images have names right like node release Etc and the text we can also name our image and give it some specific tag and we do that using this Dash T option and we can call our application node app maybe with Dash doesn't matter and we can give it a specific tag like 1.0 for example and the last parameter is the location of dockerfile so we're telling Docker build an image with this name with this tag from the definition in this specific Docker file right so this is a location of Docker file in this case we are in the directory where Docker file is located so it's going to be the current directory so this dot basically refers to the current folder where Docker file is located so now if we execute this as you see Docker is actually building the image from our Docker file and it looks like it succeeded where it started building the image you see those steps those directives that we defined here so we have the first one from directive got executed then we have the copy as a second step then we have copy The Source folder setting work directory and running npm install and then the last one just started the application so now if I do Docker images in addition to those nginx images we downloaded previously from Docker Hub we should actually see the image that we just created this is the node app image with tag 1.0 and some other information so that's our image and now we can start this image and work with it just like we work with any other image downloaded from Docker Hub so we're going to go ahead and run container from this node app image and make sure that the application inside is actually working so we're going to do Docker run node app image with 1.010 and we're going to pass in parameter to start in detach mode and also we want to expose the port right we want to be able to access the application the node application from localhost and we know that the application inside the container will start on Port 3000 because that's what we have defined here so the application itself will be running on Port 3000 so that's inside container and we can bind it to whatever Port we want on localhost and we can do 3000 the same as in the container so this is the host port and this is container port and now if I execute command and do Docker PS we should see our node app running on Port 3000 and now the moment of truth going back to the browser and opening localhost 3000 there is our welcome to my awesome app message from our application and we can even check the logs by grabbing the ID of our not app and doing Docker blocks with the ID and that's the output of our application inside the container so that's how easy it is to take your application package it into a Docker image using Docker file and then run it as a container and finally going back to this graphical user interface client that Docker desktop actually provides us with now we are able to see other containers and images here as well and that's how this UI actually looks like it gives you a pretty good overview of what containers you have which ones are currently running which ones are stopped with their names and so on and you even have some controls here to start a stop container like this or even stop it again restart container deleted whatever and the same way you have a list of images including our own image and you can also create containers directly from here using some controls so I personally prefer the command line interface to interact with Docker but some feel more comfortable using the visual UI so whichever you prefer you can actually choose to work with either now we've learned a lot of basic building blocks of Docker however it's also interesting to see how Docker actually fits in in the complete software development and deployment process with lots of other Technologies as well so in which steps throughout this whole process is Docker relevant so in this final part of the crash course we're gonna see Docker in big picture view of software development life cycle so let's consider a simplified scenario where you're developing a JavaScript application on your laptop right on your local development environment your JavaScript application uses a mongodb database and instead of installing it on your laptop you download a Docker container from the docker hub so you connect your JavaScript application with the mongodb and you start developing so now let's say you developed the application first version of the application locally and now you want to test it or you want to deploy it on the development environment where a tester in your team is gonna test it so you commit your JavaScript application in git or in some other version control system that will trigger a continuous integration a Jenkins build or whatever you have configured and Jenkins build will produce artifacts from your application so first you will build your JavaScript application and then create a Docker image out of that JavaScript artifact right so what happens to this Docker image once it gets created by Jenkins build it gets pushed to a private Docker repository so usually in a company you would have a private repository because you don't want other people to have access to your images so you push it there and now is the next step could be configured on Jenkins or some other scripts or tools that Docker image has to be deployed on a development server so you have a development server that pulls the image from the private repository your JavaScript application image and then pulls the mongodb that your JavaScript application depends on from a Docker Hub and now you have two containers one your custom container and a publicly available mongodb container running on dev server and they talk to each other you have to configure it of course they talk and communicate to each other and run as an app so now if a tester for example or another developer logs in to a Dev server they will be able to test the application so this is a simplified workflow how Docker will work in a real life development process so in a short time we actually learn all the basic building blocks the most important parts of Docker so you understand what images are how to start containers how they work and how to access them as well as how to actually create your own Docker image and run it as a container but if you want to learn more about Docker and practice your skills even more like how to connect your application to a Docker container learn about Docker compose Docker volumes Etc you can actually watch my full Docker tutorial and if you want to learn Docker in the context of devops and really really Master it with things like private Registries using Docker to run Jenkins integrate Docker in cicd pipelines and use it with various other Technologies like terraform ansible Etc you can check out our complete devops bootcamp where you learn all these and much more,0.04593807831406593,0.02527618035674095,0.05580783635377884,-0.03945126011967659,0.02853318117558956,-0.045481279492378235,-0.024508073925971985,0.041875049471855164,-0.07936522364616394,0.07607822865247726,-0.058315079659223557,-0.028530141338706017,-0.01200773473829031,-0.010788362473249435,-0.05356711521744728,-0.036129411309957504,-0.005130471661686897,0.04339981824159622,0.002557968022301793,0.09053932875394821,-0.14226806163787842,0.06432133167982101,-0.05359853804111481,-0.016471249982714653,-0.05543605610728264,0.04251495748758316,0.002570780459791422,-0.007825419306755066,0.007501700893044472,-0.055284347385168076,0.05241245776414871,0.04299443960189819,0.05898381024599075,-0.012225736863911152,0.09255718439817429,0.07190907746553421,0.09225636720657349,-0.05725622549653053,-0.01780606433749199,-0.018401602283120155,-0.023250242695212364,-0.05124573037028313,-0.013617665506899357,-0.0074024139903485775,-0.019547197967767715,-0.03343506529927254,0.016040964052081108,-0.07551809400320053,0.08897925913333893,0.060921791940927505,-0.07045095413923264,-0.030586443841457367,0.02302515134215355,-0.05168985575437546,0.05975978448987007,0.011278587393462658,0.0066208685748279095,0.07821419090032578,-0.0232563316822052,0.024872077628970146,0.0008048029849305749,-0.0058938199654221535,-0.04874273017048836,0.009257471188902855,0.10832684487104416,0.0026391076389700174,-0.005637241993099451,0.009311885572969913,0.08036667108535767,0.04262762516736984,-0.00827532634139061,-0.010563822463154793,-0.04064157232642174,-0.03684031590819359,-0.050154127180576324,0.04431914910674095,-0.0015924301696941257,-0.019822146743535995,-0.08267650753259659,0.07498624920845032,-0.008589438162744045,-0.04116705805063248,-0.03492557629942894,-0.05932736396789551,-0.02364676631987095,0.042179007083177567,-0.016164211556315422,-0.004083769861608744,0.10650324076414108,-0.05767713487148285,0.023234020918607712,0.011367217637598515,0.08576908707618713,0.04926018416881561,0.07831840962171555,0.01382540911436081,-0.006220060866326094,-0.06022517383098602,-0.005410029087215662,0.04612039774656296,-0.03385406732559204,-0.026493819430470467,0.046593695878982544,-0.04065509885549545,0.07021772116422653,-0.018844693899154663,0.009820698760449886,-0.02162736840546131,-0.046939875930547714,-0.05143216997385025,0.02726694382727146,-0.07473564147949219,-0.041953373700380325,-0.002138617215678096,0.03309769555926323,-0.0036596625577658415,-0.10191846638917923,-0.06531917303800583,0.013635238632559776,0.007294247858226299,0.023801831528544426,-0.0014414237812161446,0.09258393198251724,-0.04909748211503029,-0.03165368735790253,-0.012460578233003616,-0.08466898649930954,-4.60574252768771e-34,0.021957606077194214,-0.09009017795324326,0.0164034441113472,0.10276918858289719,0.17117168009281158,-0.03440835326910019,-0.030316460877656937,0.00719445152208209,-0.049723464995622635,0.021626070141792297,0.06066533178091049,-0.01624906249344349,-0.021644558757543564,0.024831855669617653,0.09132088720798492,-0.10700327903032303,-0.048365842550992966,-0.041527628898620605,-0.08151985704898834,-0.035063497722148895,0.0008957204408943653,-0.04851512238383293,-0.028965646401047707,-0.06147012859582901,0.05540494993329048,0.04493389278650284,0.04720950871706009,-0.025246698409318924,0.09209861606359482,0.015677304938435555,-0.06990959495306015,-0.04416382685303688,-0.035025324672460556,-0.005227179266512394,0.028523465618491173,0.018346546217799187,-0.007341600488871336,0.08324915915727615,-0.10771296173334122,-0.00765939150005579,-0.11389105767011642,-0.025545423850417137,-0.029928335919976234,0.02166684716939926,0.06724531948566437,-0.09033066034317017,0.020562851801514626,-0.03716124966740608,-0.002905211178585887,0.05871719866991043,-0.04097796604037285,-0.11791732162237167,-0.07093632221221924,0.07263699918985367,-0.0355643630027771,-0.02883497253060341,-0.01993865892291069,-0.02767935022711754,-0.010597770102322102,0.04275895655155182,-0.10175418853759766,0.05891038849949837,0.03315258398652077,-0.022450728341937065,0.01829317770898342,0.019810695201158524,0.004544692113995552,0.08887790888547897,-0.010318297892808914,0.10771656781435013,-0.036284610629081726,0.000024082090021693148,0.03247985988855362,-0.008575748652219772,0.03830626606941223,0.03554024174809456,-0.005266447085887194,-0.04295780509710312,-0.05560322850942612,-0.007800010498613119,0.01976742595434189,0.03871558979153633,0.024395165964961052,0.022484971210360527,-0.10074100643396378,-0.036096975207328796,0.04412541911005974,0.06325149536132812,0.009235091507434845,0.04831311106681824,0.01016412302851677,0.01142808049917221,-0.022659072652459145,-0.027869243174791336,-0.0364774614572525,-1.4187477538680938e-33,-0.009645997546613216,-0.026558823883533478,-0.07475621998310089,0.059114474803209305,0.025927428156137466,-0.029309073463082314,0.07057080417871475,0.016313498839735985,-0.003017823677510023,-0.08700305223464966,-0.07679634541273117,0.074546679854393,0.02867095172405243,0.12299630045890808,-0.0562264509499073,-0.0012854506494477391,-0.027453094720840454,-0.04393092542886734,0.04263392463326454,-0.002949309069663286,0.04509900510311127,-0.007360960356891155,-0.004462791606783867,-0.025492092594504356,-0.06777328997850418,0.0060687558725476265,0.0785403773188591,0.0007445736555382609,0.00243755173869431,0.04367964714765549,0.10866820067167282,0.002740544034168124,0.031311362981796265,0.08173540234565735,0.06637707352638245,0.09646499902009964,-0.031653545796871185,0.043514762073755264,-0.0938444435596466,-0.06592930853366852,0.059793584048748016,-0.0398532971739769,-0.028463046997785568,0.003072609892114997,0.019430702552199364,-0.0882764384150505,0.03956947103142738,0.022022370249032974,-0.04555416479706764,-0.030779555439949036,-0.06296387314796448,-0.10815386474132538,0.07422327250242233,-0.016436630859971046,-0.0007063347729854286,-0.05837513506412506,0.09607046842575073,-0.003736222395673394,-0.031079202890396118,0.049623042345047,0.025093331933021545,-0.008915732614696026,-0.020329859107732773,0.05060276389122009,-0.007073368411511183,-0.08130595833063126,-0.060946349054574966,0.024238158017396927,-0.11888642609119415,0.06981465220451355,0.0009884467581287026,0.04454046115279198,-0.020802833139896393,0.003717597108334303,-0.004221414681524038,-0.01908056065440178,-0.0625833198428154,0.02658616378903389,0.016583047807216644,0.0020565136801451445,0.05593167245388031,0.008400412276387215,-0.04003504663705826,-0.031896352767944336,-0.0127791753038764,0.024485059082508087,0.06056823581457138,0.006713678129017353,0.040544454008340836,-0.05830571427941322,-0.01069289818406105,-0.006092129275202751,-0.035176586359739304,0.10852093249559402,-0.05299471318721771,-1.917033287668346e-8,-0.025809740647673607,0.007052335422486067,-0.04482678696513176,0.0556989386677742,0.08570075035095215,-0.007138839922845364,-0.0023170181084424257,0.03888614848256111,-0.021518543362617493,0.06855683773756027,-0.06364788115024567,-0.05820499733090401,-0.10659150034189224,0.05836509168148041,0.0028204636182636023,0.06431719660758972,0.01634802669286728,0.05184715986251831,-0.022539736703038216,-0.08021025359630585,0.0039857542142271996,0.014805441722273827,0.06578009575605392,-0.06511501967906952,-0.02017945796251297,-0.0014939502580091357,0.10673724859952927,0.036857325583696365,-0.0014585873577743769,-0.04039350152015686,0.012773473747074604,-0.006000451277941465,-0.04190003499388695,-0.024074435234069824,0.01751730404794216,0.0458468534052372,-0.0493927076458931,0.003533633891493082,0.03819210082292557,-0.030079614371061325,-0.09758728742599487,-0.02823852188885212,0.028210043907165527,-0.07755900919437408,-0.08518297225236893,0.0347088947892189,-0.03053511306643486,0.022269660606980324,0.0052217659540474415,0.005699713248759508,0.0011785796377807856,0.009046051651239395,0.0027455769013613462,0.014982804656028748,0.11380667239427567,0.11350151896476746,-0.0033983781468123198,0.0436411090195179,0.020893067121505737,0.00747477263212204,0.01135249249637127,0.08118277043104172,-0.03778304532170296,0.09722021967172623,0.0034880833700299263,0.032561421394348145,0.07182759791612625,-0.027252769097685814,0.014830240048468113,-0.02972959168255329,0.00039148103678599,0.06541880965232849,-0.040632907301187515,0.056748125702142715,-0.049846649169921875,-0.009917028248310089,0.03974318131804466,-0.061864010989665985,-0.026844730600714684,-0.07688795030117035,0.05961654335260391,0.010121575556695461,-0.042602550238370895,0.041369758546352386,-0.054735537618398666,0.03742671012878418,-0.028819911181926727,-0.031216703355312347,-0.09738314896821976,0.11308493465185165,-0.012441510334610939,0.0085328109562397,0.006781362928450108,-0.06206377223134041,0.017632337287068367,0.05439535528421402,0.07115662097930908,0.012335251085460186,-0.0274182315915823,0.007993732579052448,0.0606745183467865,-0.03694382309913635,-0.03402978554368019,0.007130511105060577,-0.05153346806764603,-0.07587572187185287,-0.06278076767921448,-0.053216684609651566,0.016841167584061623,-0.004935536999255419,-0.006169169209897518,-0.10324334353208542,0.07324588298797607,0.056774478405714035,-0.0493113212287426,-0.026164501905441284,0.001988148083910346,-0.029382308945059776,-0.03752104192972183,0.03953450173139572,0.010743111371994019,0.0639461874961853,-0.04023047909140587,-0.03090726025402546,-0.019777758046984673,-0.03107173927128315,-0.03263377770781517,-0.03385467454791069,0.08829613775014877,-0.07143090665340424,-0.00011656113929348066,0.06245831027626991,0.09455913305282593,-0.014759350568056107,-0.006855616346001625,0.007873081602156162,0.013771564699709415,-0.012392726726830006,-0.0907738134264946,-0.009733620099723339,-0.010590928606688976,0.034651558846235275,-0.019091250374913216,0.08637301623821259,0.05578494817018509,0.049759410321712494,-0.050657011568546295,-0.044767409563064575,-0.08861404657363892,0.02196432091295719,-0.008625764399766922,0.011503737419843674,0.03573502600193024,-0.06974523514509201,0.09740946441888809,0.03586801886558533,0.01949010044336319,0.020268194377422333,0.16135409474372864,0.02041611447930336,-0.0021648642141371965,-0.04005759209394455,0.06277446448802948,-0.008174542337656021,0.0400107204914093,-0.037832047790288925,0.029496027156710625,-0.07384422421455383,0.05784527212381363,0.013294626958668232,-0.016669299453496933,-0.0013424685457721353,0.056102316826581955,-0.042920660227537155,-0.036109037697315216,-0.04313160479068756,-0.05701878294348717,-0.012167292647063732,0.04134486988186836,0.0123309176415205,-0.05238647013902664,-0.0578102171421051,0.04041716083884239,-0.0009187233517877758,0.009597946889698505,-0.02138860896229744,0.09553153067827225,-0.042855456471443176,-0.022175991907715797,-0.06529352068901062,-0.09355812519788742,4.914047971779014e-33,-0.042037349194288254,-0.027058735489845276,0.03183973208069801,0.056723203510046005,0.14673347771167755,-0.016580360010266304,-0.0028941489290446043,0.02657998539507389,-0.021878579631447792,0.008986559696495533,0.08709073811769485,-0.03444400429725647,0.029100460931658745,0.06704220175743103,0.025339201092720032,-0.06488754600286484,-0.0801946148276329,-0.04454241693019867,-0.04991200566291809,0.010032925754785538,-0.025527354329824448,-0.04538407549262047,0.04908342659473419,-0.016427967697381973,0.06137724593281746,-0.03108959272503853,0.04588111862540245,-0.02428811602294445,0.013885710388422012,-0.005041637923568487,-0.04250989854335785,-0.0014551224885508418,-0.034869033843278885,-0.012652737088501453,0.01746884360909462,0.0171138197183609,0.015562113374471664,0.03070598654448986,-0.11573554575443268,-0.06696996837854385,-0.03977876156568527,-0.030835287645459175,-0.012815252877771854,0.022801412269473076,0.04047673940658569,-0.04111778363585472,0.046497516334056854,-0.06076790392398834,0.029929647222161293,0.03252969682216644,-0.02293812669813633,-0.13213928043842316,-0.06649906933307648,0.037301432341337204,-0.027200279757380486,0.0358087494969368,0.036365605890750885,-0.0291758943349123,-0.056786514818668365,0.05041215568780899,-0.12708579003810883,-0.01253480277955532,0.056076645851135254,0.030166057869791985,-0.03229772672057152,-0.00009502570173935965,0.04729408025741577,0.07504929602146149,-0.018131159245967865,0.07842838019132614,-0.022974716499447823,0.0029342046473175287,0.0016542349476367235,-0.021557113155722618,0.05353250354528427,0.07370255142450333,-0.00430219667032361,-0.028041426092386246,-0.029671648517251015,0.03136545047163963,-0.005662709940224886,0.05348791554570198,0.016911057755351067,-0.03864755854010582,-0.09097514301538467,-0.01181887462735176,0.055150680243968964,0.04076642543077469,0.05499201640486717,0.014750378206372261,0.08176499605178833,-0.02042553201317787,-0.020622797310352325,0.05567029491066933,0.012590792030096054,-6.76714098011144e-33,0.015281859785318375,0.10337219387292862,-0.07271848618984222,0.04185070842504501,0.055914632976055145,0.007153467275202274,0.05867097154259682,-0.027823327109217644,-0.009876826778054237,-0.08832678198814392,-0.11498197168111801,0.06538466364145279,-0.001102973474189639,0.14950188994407654,-0.07876019924879074,-0.00498715415596962,0.024184107780456543,-0.06007223576307297,-0.009289396926760674,-0.013582735322415829,0.02997037209570408,-0.0029442363884299994,-0.03866075724363327,-0.03923963010311127,-0.08246101438999176,-0.02463715523481369,-0.00048811675515025854,-0.021754417568445206,0.06352407485246658,0.048574917018413544,0.08486774563789368,-0.021163824945688248,0.07954749464988708,0.04930531978607178,0.06612993031740189,0.0613531768321991,-0.008262828923761845,-0.010624020360410213,-0.006669109221547842,-0.041496098041534424,0.06036173924803734,-0.03407284617424011,0.005018944852054119,-0.10022863745689392,-0.012219945900142193,-0.06361231207847595,0.015481620095670223,0.07190345972776413,-0.0031296538654714823,0.004804136231541634,-0.00936634000390768,-0.07356365770101547,0.04435107111930847,0.023356160148978233,-0.0049928841181099415,-0.08519621193408966,0.03249175101518631,-0.0044961050152778625,-0.04918188974261284,0.03555655479431152,0.05009705200791359,0.013933834619820118,0.016061337664723396,0.12036516517400742,-0.0552084818482399,-0.05688445270061493,-0.02374318055808544,0.001828366075642407,-0.11811956763267517,-0.00606886763125658,-0.030357601121068,-0.020722106099128723,-0.03715774416923523,0.031086672097444534,0.0043724006973207,-0.02822204865515232,-0.03274061530828476,0.0024950257502496243,-0.03382343798875809,0.003850731998682022,0.015705354511737823,-0.026523083448410034,-0.037747204303741455,-0.007294818758964539,-0.09417293965816498,0.10653311759233475,0.06933606415987015,-0.002802674425765872,0.004663343541324139,-0.07861858606338501,-0.020159471780061722,-0.0672919973731041,-0.07023251801729202,0.08188534528017044,-0.025443390011787415,-4.900384453776496e-8,-0.03999875485897064,-0.05954888090491295,0.013113965280354023,-0.02153485268354416,0.013034581206738949,0.01828264631330967,0.04337434470653534,0.08699557185173035,0.008332489989697933,0.08786322921514511,-0.11297808587551117,-0.05666930973529816,-0.12268982827663422,-0.005201271269470453,0.08397278934717178,0.12903724610805511,0.027924692258238792,0.04772843420505524,0.020688293501734734,-0.04082668200135231,0.018968602642416954,-0.03720046579837799,0.04206441342830658,-0.022039780393242836,-0.04190417751669884,0.007556396536529064,0.07278567552566528,0.03949875012040138,-0.0385165698826313,-0.030697109177708626,0.03448548540472984,-0.011057242751121521,-0.0400516502559185,-0.0009985481156036258,0.018808435648679733,0.020262645557522774,-0.05759582668542862,-0.07724103331565857,0.039981942623853683,-0.027179397642612457,-0.07684408873319626,-0.03982297331094742,0.02538134902715683,-0.07727816700935364,-0.06299113482236862,0.019178280606865883,-0.02329888567328453,-0.04341807961463928,-0.04040617495775223,0.08396188914775848,0.011517412029206753,0.004014650359749794,0.02214561216533184,0.0406595803797245,0.08590973913669586,0.0988449677824974,0.012033053673803806,-0.017557140439748764,0.09123193472623825,0.037912674248218536,-0.02327077090740204,0.10962393134832382,0.004661208018660545,0.105402372777462
F7WMRXLUQRM,2022-05-15T13:25:55Z,GitLab CI/CD Full Course released - CI/CD with Docker | K8s | Microservices!,hi there i am super excited to welcome you to the gitlab ci city course getlab csd has become a very popular platform for creating release pipelines for your application so i created this course to teach you all the concepts and features to build real-life and modern cicd pipelines on gitlab so by the end of this course you'll be able to confidently use gitlab to build real devops pipelines in your projects since it's a cicd platform naturally it means that you need to know how to integrate it with other technologies so in this course i teach you how to use gitlab ci with technologies like docker docker compose kubernetes aws and so on because as an engineer if you get into a project where gitlab ci is used and you need to work with it you need a course where you can learn not only the basics and fundamentals of gitlab cicd itself like in most other courses but you need to know how to actually do real tasks of integrating it with deployment environments container registries using secret data et cetera and building pipelines not only for a simple application but for microservices applications which has its own specifics and challenges but you don't want to just learn to do it in any possible way like an inexperienced engineer just googling things and putting together something that just works instead you want to learn how to do things in the correct way with actual best practices like properly handling the sensitive data reusing pipeline configuration to avoid code duplication using a dedicated user to deploy to kubernetes environment parameterizing and using dynamic values in the pipeline to make them more flexible and reusable and so on if you have taken any of my other courses you know that you always get the best combination of theory and practice you learn every single concept and feature with engaging easy to follow demo projects but before each demo i explain the concept so you really understand exactly why a certain feature or concept is important and what purpose it has and again you learn not only gitlab specific things but also a lot of additional valuable information about docker docker compose kubernetes microservices etc so it's a well-rounded course with a lot of valuable knowledge for you as an engineer throughout the course i make sure to explain and highlight best practices and industry insights were relevant and this is an essential addition to teach you not only how to do stuff in any way but in the correct way making your knowledge even more valuable so equipped with this knowledge by the end of this course you will be absolutely confident that you really understand how gitlab cia city works and know exactly how to apply it in your real projects no knowledge gaps no insecurities so let's dive into the course curriculum to see what you will learn exactly we'll start with the basics of what ci cd is in general and comparison of git lapsity with other cicd tools then we'll go on to learn a very interesting topic of gitlab architecture and how it all works we'll learn about runners and executors and we will actually create and configure our own runners for the gitlab instance we will look at different ways of operating gitlab and see managed versus self-managed gitlab platform once we have the infrastructure set up we will move on to learn the core concepts of gitlab cicd like jobs stages the pipeline syntax in general how to use conditionals regular and secret variables and reusing configuration code to avoid duplication we will learn the concept of artifacts and how to generate test reports as well as share data within the pipeline using the artifacts we will see how workflow rules can be used to define when the pipelines should be triggered and we will also learn about gitlab's built-in docker registry and how to use it in the pipeline after that we'll move on to more advanced topics and learn how to speed up the pipeline using cache how to use the include feature and use gitlab's job templates in your pipeline and how to extract common pipeline code and build a job hierarchy with extends feature to make your pipeline configuration more maintainable and you will learn all these while building complete ci cd pipelines for demo applications in the first demo project we will build a real-life pipeline deploying a node.js application testing the application with simple unit tests and security tests incrementing and dynamically setting version for the docker image building and pushing image to gitlab's docker registry doing a multi-stage deployment to a deployment server with docker compose and promoting from development staging and production environments after that you will work through a demo of building a csd pipeline for a micro services application in a monorepo and then do a demo and compare building cicd pipeline for a polyrepo so you learn how to do both and throughout these demos we will use best practices of extracting and reusing configuration code for multiple services by creating a gitlab ci templates library here we use docker compose to deploy the services but in the final demo we will take this one step further and configure continuous deployment of microservices to a kubernetes cluster so with all this knowledge and practice you will be ready to implement real ci cd pipelines on gitlab at your work we took time and put a lot of effort in making this course as high quality as possible making all the concepts easy to understand and all the demos easy to follow as well as structure the course in a way that it stays engaging and interesting till the end so i really hope you enjoy it so if you want to learn all these check the video description for the link to the course where you get more information and you can get enrolled i'm very excited to welcome you there,-0.05910959467291832,0.06584282964468002,0.028915155678987503,-0.019306892529129982,-0.10437783598899841,-0.08734042197465897,-0.00750500475987792,-0.01079774834215641,0.01738339476287365,0.10182860493659973,0.03864176571369171,-0.03662378713488579,0.0989530086517334,0.006533768493682146,-0.008005763404071331,-0.13986289501190186,0.045129481703042984,0.0721207931637764,0.014781220816075802,-0.030703017488121986,-0.0473489947617054,0.03501655161380768,-0.03977318853139877,0.008130309171974659,-0.018418315798044205,-0.060791660100221634,-0.025693345814943314,-0.01859203167259693,-0.050311725586652756,-0.04945885017514229,0.017318828031420708,0.08159282803535461,0.02135383151471615,0.010581529699265957,0.04859687387943268,0.09779365360736847,0.017982596531510353,-0.017264598980545998,-0.04925806447863579,-0.00669383117929101,-0.005012751091271639,-0.06160055100917816,0.013834978453814983,-0.0036083052400499582,0.02357097715139389,-0.11560816317796707,-0.08478695154190063,-0.08683464676141739,-0.003711460391059518,0.07994242757558823,-0.06555458158254623,-0.10338848829269409,0.023984624072909355,0.07977097481489182,0.05012526363134384,-0.07085248827934265,-0.054110847413539886,0.05008646100759506,0.056549616158008575,0.02771735191345215,0.0008054939680732787,-0.011442667804658413,-0.042184870690107346,0.050652556121349335,-0.022498810663819313,-0.03329535573720932,0.007809848990291357,0.06646426767110825,0.026232220232486725,-0.06610920280218124,0.04946275055408478,-0.04133358225226402,-0.07707495987415314,-0.047280263155698776,0.02960572950541973,0.02100757323205471,-0.005036491435021162,0.052718691527843475,-0.040398743003606796,-0.0041893296875059605,0.07435031980276108,0.032358765602111816,-0.03313000500202179,-0.028827564790844917,-0.09972943365573883,0.05542748048901558,0.020059728994965553,0.05130010098218918,0.031224438920617104,-0.08695708215236664,0.06223759800195694,0.10131637752056122,0.008012188598513603,-0.0006600372144021094,-0.003586765844374895,-0.048935405910015106,-0.025649070739746094,-0.04301689192652702,-0.03159201517701149,0.03960344195365906,0.00893704779446125,-0.015727633610367775,-0.00006732972542522475,-0.04127508029341698,-0.02254980430006981,-0.0392511710524559,0.036717738956213,0.006225036457180977,-0.03366096317768097,-0.027583660557866096,-0.09274411201477051,-0.03789706528186798,-0.12078665941953659,0.004568235948681831,0.01804516650736332,0.08774680644273758,0.027751170098781586,0.04089713469147682,0.11752006411552429,-0.03962809592485428,-0.02254682593047619,-0.008340229280292988,-0.027524404227733612,-0.02642000839114189,0.014451277442276478,0.044876229017972946,0.018124746158719063,-4.150225150597131e-34,-0.036375802010297775,-0.005472109187394381,0.021230246871709824,0.009955259039998055,0.09499411284923553,-0.12959934771060944,-0.032270655035972595,-0.14363031089305878,-0.12730787694454193,-0.031915731728076935,-0.04776358604431152,0.05939267575740814,-0.08338144421577454,0.05499463155865669,0.10111343115568161,-0.04382781311869621,-0.05294819548726082,-0.016982464119791985,0.07535312324762344,-0.031248310580849648,0.00895230658352375,-0.046245504170656204,-0.04854762181639671,-0.0033663443755358458,0.10511326044797897,-0.033370491117239,0.01590513437986374,-0.08656565845012665,0.08421570807695389,0.006428070366382599,0.01829262636601925,0.018679756671190262,0.0021342015825212,-0.023240957409143448,-0.013607803732156754,0.06971415132284164,-0.07818439602851868,0.04007553309202194,-0.07122556865215302,0.02564014308154583,-0.051010794937610626,-0.02691028267145157,-0.05354258790612221,0.009538241662085056,0.07324324548244476,-0.04188110679388046,-0.05051872134208679,-0.06675785779953003,0.11745847016572952,0.08915535360574722,0.04306840896606445,-0.0039234524592757225,-0.000492267485242337,0.038874413818120956,-0.020864849910140038,0.03930705040693283,0.027013981714844704,0.005899654235690832,0.014245842583477497,-0.035230543464422226,-0.1151626780629158,0.007442572619765997,-0.011212081648409367,-0.0246583241969347,0.03789105266332626,-0.006387675646692514,-0.0911756083369255,0.03162425756454468,0.022374391555786133,0.04693141579627991,-0.05839359387755394,0.005029104650020599,0.03802984207868576,-0.00937917921692133,0.06105189025402069,-0.04256455972790718,-0.10260400921106339,-0.006913248915225267,-0.05674034729599953,0.08293148130178452,0.00005336972026270814,0.004058768507093191,-0.07975976169109344,0.09824462234973907,0.05555516108870506,0.0003958284214604646,0.057232294231653214,0.09387966245412827,-0.0029993783682584763,0.011600809171795845,0.058579687029123306,0.04249069467186928,-0.020625924691557884,0.012079381383955479,-0.0029854325111955404,-2.4381110164687458e-33,0.032085370272397995,-0.016069559380412102,-0.00436734315007925,0.06204909086227417,0.0583118312060833,-0.03654954582452774,0.043522246181964874,-0.03160959109663963,-0.013470323756337166,0.00451503274962306,-0.01748065836727619,0.03656800463795662,-0.020784303545951843,0.05744614079594612,-0.04470641538500786,-0.017759015783667564,-0.006830544210970402,0.005094283726066351,0.06485691666603088,0.049385908991098404,-0.012345436960458755,0.005539186764508486,0.07324743270874023,0.061138078570365906,0.01129886507987976,-0.03337932005524635,0.058944083750247955,0.09334401041269302,-0.06160945072770119,-0.06939499825239182,0.042927805334329605,-0.058416496962308884,-0.0027407926972955465,0.02134745568037033,0.015044782310724258,-0.03698095306754112,-0.0037694561760872602,0.10646386444568634,-0.07057875394821167,-0.023757150396704674,0.010153604671359062,-0.10130094736814499,-0.06481628865003586,0.009308750741183758,-0.010090155526995659,-0.011429259553551674,0.08586996048688889,0.006105783395469189,-0.10287792235612869,-0.019287727773189545,0.02001970075070858,0.008600211702287197,0.025996381416916847,-0.016616184264421463,0.06480785459280014,0.0011705028591677547,0.016458844766020775,0.0770488753914833,-0.003997207619249821,0.00644085556268692,0.08643263578414917,-0.04235974699258804,0.011751522310078144,-0.005098350346088409,-0.026710888370871544,-0.04333915561437607,0.03307820484042168,0.04514065012335777,-0.11123063415288925,-0.012610566802322865,0.04355053976178169,-0.010761178098618984,-0.013655908405780792,-0.09547527879476547,0.03786064684391022,-0.04807475954294205,-0.07547726482152939,0.04261641576886177,0.0006960849859751761,0.010306492447853088,-0.015251328237354755,0.05659555643796921,-0.031866639852523804,0.015113693661987782,0.03336950019001961,0.032925691455602646,0.06237516924738884,-0.03793219104409218,0.1102999895811081,-0.017208533361554146,-0.02084866538643837,0.015944961458444595,0.020441321656107903,0.002639066893607378,-0.012346147559583187,-2.2914491637493484e-8,0.03731819614768028,0.006534819025546312,-0.06775569915771484,0.009665028192102909,0.03798336163163185,-0.026552213355898857,-0.007148413918912411,0.05497138574719429,-0.027580812573432922,0.034795235842466354,-0.014832540415227413,0.020110320299863815,-0.09631513059139252,0.06843051314353943,0.010027159005403519,0.06854498386383057,0.06650299578905106,0.03103511780500412,0.0138459587469697,-0.0667446181178093,-0.0989106222987175,0.01943126879632473,0.06603121757507324,-0.02927481010556221,-0.06446389853954315,0.10112509876489639,0.05001183971762657,-0.02198159135878086,0.029070952907204628,-0.057992562651634216,0.043715156614780426,-0.010240738280117512,-0.10473074018955231,-0.03046785667538643,0.014356287196278572,-0.05732112005352974,-0.07790863513946533,0.023966390639543533,0.06868010014295578,-0.017350779846310616,-0.06695787608623505,-0.040211908519268036,0.028319470584392548,-0.03321731835603714,-0.037842851132154465,0.028018875047564507,-0.008759318850934505,-0.026261204853653908,-0.05424344539642334,0.018062299117445946,-0.008576278574764729,-0.02506931684911251,-0.06602568924427032,0.035450004041194916,0.08788944035768509,0.04229294881224632,0.06529927253723145,0.011375973001122475,0.010934802703559399,0.012702690437436104,-0.0014448262518271804,-0.042667098343372345,0.029719121754169464,0.049762822687625885,-0.080128975212574,-0.0004888427210971713,-0.03216621279716492,-0.028065606951713562,-0.10424734652042389,-0.11967414617538452,0.01254087034612894,0.01995990239083767,-0.0030793019104748964,0.04355204477906227,-0.0247415229678154,-0.06742946803569794,0.09644489735364914,-0.022078532725572586,0.04283983260393143,-0.10892804712057114,0.03245982155203819,0.05969658121466637,-0.016458792611956596,-0.10545854270458221,-0.027966540306806564,0.02644059807062149,-0.016537725925445557,0.010144898667931557,-0.06766051799058914,0.0008348496630787849,0.02547924965620041,-0.026786601170897484,-0.022321203723549843,-0.020239971578121185,0.0026946142315864563,0.026120001450181007,-0.013154752552509308,0.04498617723584175,-0.046814654022455215,0.06483402103185654,0.04617256298661232,-0.04479897767305374,-0.09098894149065018,-0.02679305337369442,-0.06240147352218628,-0.056454356759786606,-0.014104547910392284,-0.04239232465624809,0.01373904850333929,-0.08357582241296768,-0.0726708471775055,-0.13102881610393524,-0.018506696447730064,0.05356275662779808,-0.05550747364759445,-0.0974411815404892,-0.0181540809571743,0.035690128803253174,-0.019204581156373024,0.007790715433657169,0.020812686532735825,0.01039883866906166,0.04328101500868797,-0.04002721607685089,-0.02507023513317108,-0.019804123789072037,-0.018214324489235878,0.008077742531895638,-0.009800292551517487,-0.04248323291540146,0.016335871070623398,0.12240420281887054,0.10433027148246765,-0.0969938263297081,0.006510945037007332,-0.05750762298703194,-0.058799270540475845,-0.08726977556943893,0.028491808101534843,0.003802850376814604,0.0063200159929692745,0.029427114874124527,-0.048465657979249954,0.023411471396684647,0.07431529462337494,0.08141213655471802,-0.04545818641781807,0.014452905394136906,-0.06466123461723328,0.056601639837026596,0.04557756707072258,0.08313201367855072,-0.022955887019634247,0.034162409603595734,0.08647521585226059,0.03525583818554878,-0.005379851907491684,0.027573132887482643,0.05216217786073685,0.008295808918774128,-0.060672372579574585,-0.02878059260547161,0.014807040803134441,-0.012001730501651764,-0.011547588743269444,-0.02054935321211815,-0.028300583362579346,-0.08763007819652557,-0.028789063915610313,-0.015077602118253708,0.013673396781086922,0.0071974461898207664,0.009907843545079231,-0.04815010726451874,-0.04655563086271286,-0.050843045115470886,-0.14497241377830505,-0.009393778629601002,0.06458539515733719,0.0986156091094017,0.027422795072197914,0.01339865941554308,0.06234785541892052,-0.026313235983252525,-0.04979395121335983,0.04610238969326019,-0.018395908176898956,-0.04612036794424057,0.027343031018972397,0.016305381432175636,-0.03782583773136139,3.861700980542762e-33,-0.002860445762053132,-0.006177412811666727,-0.03643739968538284,0.06359471380710602,0.039225660264492035,-0.038208432495594025,-0.012544000521302223,-0.016290249302983284,-0.11071235686540604,-0.04931744933128357,0.06973709166049957,0.030971961095929146,-0.038180168718099594,0.049572840332984924,0.03494546562433243,-0.07396689802408218,-0.049128513783216476,-0.0515899658203125,0.0827181488275528,-0.0028630897868424654,-0.013539460487663746,-0.030429400503635406,0.0137949138879776,-0.009653860703110695,0.13394078612327576,-0.039507828652858734,0.010710535570979118,0.05343228951096535,-0.015551256015896797,0.014182424172759056,0.014301767572760582,0.039887435734272,0.018232056871056557,0.004044355358928442,0.05734964832663536,0.06128256022930145,0.010446890257298946,0.05454426258802414,-0.019278205931186676,0.066062331199646,-0.039748415350914,-0.06332724541425705,-0.012093235738575459,-0.010255015455186367,0.04044950753450394,-0.012363260611891747,0.03768704831600189,-0.014409328810870647,0.07211630046367645,0.012689806520938873,0.030255958437919617,0.010504319332540035,0.025965645909309387,0.019324447959661484,-0.0077820997685194016,0.05475039780139923,0.03494000807404518,-0.056391775608062744,-0.032150596380233765,-0.025397762656211853,-0.13476604223251343,0.03823656961321831,-0.01239529624581337,0.07163814455270767,0.027215691283345222,0.0005292084533721209,-0.045791734009981155,0.04513029009103775,0.03650721535086632,0.019227446988224983,-0.04914097860455513,-0.0016748514026403427,-0.0026678312569856644,-0.03129122406244278,0.09565318375825882,-0.006622334476560354,-0.016359781846404076,0.015164732001721859,-0.06462793797254562,0.11270365118980408,-0.002753522712737322,0.010765409097075462,0.010108904913067818,0.0627308264374733,0.022428352385759354,0.0006948381196707487,0.026843519881367683,0.037131063640117645,0.01662379316985607,0.032556455582380295,0.06373129785060883,0.01216817181557417,-0.030450748279690742,0.047116558998823166,0.04452304169535637,-6.270528412351609e-33,0.0843997523188591,0.05637160688638687,-0.05620447173714638,0.07013680040836334,0.05361723527312279,-0.03690493106842041,0.08587964624166489,-0.06425848603248596,0.020280057564377785,-0.06900376826524734,-0.00203085970133543,0.007709205616265535,-0.07476890087127686,0.08328133076429367,-0.06875675171613693,-0.005382047966122627,-0.030475454404950142,-0.050380267202854156,0.02212446928024292,0.03150307759642601,-0.035479139536619186,0.007476820610463619,-0.05665484443306923,-0.041569482535123825,-0.05053815618157387,-0.01820516772568226,-0.05685873702168465,0.014669876545667648,0.004998782183974981,-0.03038465790450573,0.036442581564188004,-0.05230090022087097,0.03579261153936386,-0.008374037221074104,-0.06861130148172379,-0.033326469361782074,0.003550700144842267,0.046785447746515274,0.020813317969441414,0.0024217141326516867,0.0027378322556614876,-0.047786958515644073,-0.04553773254156113,-0.10254529118537903,-0.018684323877096176,0.03027588501572609,0.08064306527376175,0.03171934932470322,-0.09481990337371826,0.015268795192241669,0.0457037016749382,0.07970882952213287,-0.007068467326462269,0.0033288535196334124,0.12617556750774384,-0.01264137215912342,0.003879414638504386,0.06483904272317886,-0.04691087454557419,0.010733010247349739,0.023336689919233322,0.016276953741908073,0.0419657900929451,0.005944808479398489,-0.00017144255980383605,-0.0799429640173912,-0.004217522218823433,0.0074441866017878056,-0.10757215321063995,-0.01977309212088585,-0.014066922478377819,0.016637321561574936,-0.05433670058846474,-0.11317463964223862,-0.01305067166686058,-0.07919877022504807,-0.04832592234015465,0.06088518351316452,-0.02119271643459797,0.07456313818693161,0.09335017204284668,0.05110779032111168,-0.06200592592358589,0.043919648975133896,0.023517372086644173,0.09494156390428543,0.04590810090303421,-0.04146747663617134,0.05630667507648468,0.014007359743118286,-0.067294642329216,0.02720075473189354,0.01787557825446129,-0.014603020623326302,0.02097349613904953,-4.9343050534389477e-8,-0.027508992701768875,-0.0021185623481869698,-0.10234986245632172,-0.020250074565410614,-0.007838508114218712,0.012625664472579956,-0.02752317488193512,0.04437731206417084,-0.03558642789721489,0.07746297866106033,-0.05237465351819992,0.01925666257739067,-0.0480659082531929,0.06683517247438431,-0.018291041254997253,0.09877922385931015,0.07491009682416916,-0.02734377048909664,0.04967774450778961,-0.04306900128722191,-0.06611574441194534,-0.0004410544934216887,-0.0844925194978714,0.04786665365099907,-0.09082739055156708,0.03153259679675102,0.0934593677520752,-0.031586531549692154,0.029216989874839783,0.03385130688548088,-0.005151390563696623,-0.0852125883102417,-0.0569860115647316,-0.027430016547441483,0.05694826319813728,-0.05812091380357742,-0.010770715773105621,-0.0485047809779644,0.12528464198112488,0.03249999135732651,-0.05618048459291458,0.02808571793138981,0.039897896349430084,-0.03428414463996887,-0.059632591903209686,-0.015003904700279236,-0.0524749793112278,-0.05871105566620827,-0.07769148796796799,0.08317881077528,-0.028280336409807205,0.02442765049636364,-0.03964969515800476,0.07083378732204437,0.15428245067596436,0.09741860628128052,0.04360964521765709,-0.05102112889289856,0.011119838804006577,0.05473335087299347,-0.050493139773607254,0.008649438619613647,-0.004670015536248684,0.015947440639138222
8vXoMqWgbQQ,2021-11-11T15:07:56Z,Top 8 Docker Best Practices for using Docker in Production,in this video we're gonna talk about eight best practices for using docker in production docker is obviously a technology that became a standard and a technology that everyone is familiar with however not everyone is using docker according to the best practices so in this video i want to show you eight ways you can use docker in a right way in your projects to improve security optimize the image size and take advantage of some of the useful darker features and also write cleaner and more maintainable docker files the first best practice is to use an official and verified docker image whenever available let's say you are developing a node.js application and want to build it and run it as a docker image instead of taking a base operating system image and installing node.js npm and whatever other tools you need for your application use the official node image for your application this will not only make your docker file cleaner but also let you use an official and verified image which is already built with the best practices okay so we have selected the base image but now when we build our applications image from this docker file it will always use the latest tag of the node image now why is this a problem because this means you might get a different image version as in the previous build and the new image version may break stuff or cause an unexpected behavior so latest tag is basically unpredictable you don't know exactly which image you are getting so instead of a random latest image tag you want to fixate the version and just like you deploy your own application with a specific version you want to use the official image with a specific version and the rule here is the more specific the better this also gives you and your team a transparency to know exactly what version of the base image you're using in your docker file now looking at all the image tags or versions here you see that for node.js there are multiple official images not only with different version numbers but also with different operating system distributions so the question is which one do you choose and that's an important point if the image is based on a full-blown operating system distribution like ubuntu or centos which has a bunch of tools already packaged in the image size will be larger right but you don't need most of these tools in your application images in contrast having smaller images means you need less storage space in image repository as well as on a deployment server and of course you can transfer the images faster when pulling or pushing them from the repository now in addition to the size there is another issue with images based on full-blown operating systems with lots of tools installed inside and that is a security issue because such base images usually contain hundreds of known vulnerabilities and basically create a larger attack surface to your application image and this way you basically end up introducing unnecessary security issues from the beginning to your image in comparison by using smaller images with leaner operating system distributions which only bundle the necessary system tools and libraries you're also minimizing the attack surface and making sure that you build more secure images so the best practice here would be to select an image with a specific version based on a leaner operating system distribution like alpine for example alpine has everything you need to start your application in a container but is much more lightweight and for most of the images that you look on a docker hub you will see a version tag with alpine distribution inside it is one of the most common and popular base images for docker containers so the best practice here is that if your application does not require any specific system utilities or libraries make sure to choose the leaner and smaller images from the selection the next best practice with docker is optimizing caching for image layers when building an image so what are image layers and what does caching and image layer mean it's very simple actually now docker image is built based on a docker file right in docker file each command or instruction creates an image layer let's look at a simple docker file based on a node alpine image so every docker image is made up of layers this means when we use a base image of node alpine like in this example it already has layers because it was already built using its own docker file and you can see that actually in the documentation when you go to the image page in docker hub and click in one of the text you will see the layers that make up the image so this is how the image was built and plus in our docker file on top of that we have a couple of other comments that each will add a new layer to this image and again this is how every docker image is created using this multiple layers and once you build your own application you can also see all the image layers of the final application image on a command line using docker image history command with the image name so this will display you the image layers with the corresponding commands that created this layer okay now what about caching well each layer will get cached by docker so when you rebuild your image if your docker file hasn't changed a docker will just use the cached layers to build the image this of course makes building the image much faster caching is also useful and important when pulling and pushing an image so if i pull a new image version of the same application and let's say two new layers have been edited in the new version the whole image doesn't need to be downloaded only the newly edited layers will be downloaded the rest are already locally cached by docker so they will be reused from the cache so going back to our simple docker file example what we're doing here is that we're copying all the files from the project into the image using the copy command and then we are executing npm install to install all the project dependencies inside now what happens if we make some code changes in our application since we are copying everything into the image this means copy command will be executed again because it needs to copy the change files right all the changes that we made in the code but the next line of npm install is also re-executed even though we didn't change anything in the dependencies now why is that why isn't it used from cache well that's because once a layer changes all the following or downstream layers have to be recreated as well in other words when you change the contents of one line in docker file caches of all the following lines or layers will be busted and invalidated so each layer from that point will be rebuilt however instead we want to take advantage of docker cache and we want things that haven't changed to be reused from cache again giving us an advantage that the image will be built fast so in our case we don't want to rerun npm install dependencies every time some file in the project changes we only want to run it when package.json file contents have changed which includes all the application dependencies so let's restructure the docker file to only copy package.json file and then run npm install and only after that run the copy all the files comment in this case if we add or remove a dependency in package.json file it will be copied and npm install will be executed if we change any other file in project these two layers will be reused from cache so npm install will not get re-executed and you can see that in the output of docker build command as well where you have the information that a layer has been reused from cache or a layer has been rebuilt so the rule here and the best practice is that you should order your commands in the docker file from the least to the most frequently changing commands to take advantage of caching and this way optimize how fast the image gets built before moving on i want to give a shout out to castin who made this video possible castings k10 is the data management platform for kubernetes k10 basically takes off most of the load of doing backup and restore in kubernetes from the cluster administrators it has a very simple ui so it's super easy to work with and has an intelligent logic which does all the heavy lifting for you and with my link you can download k10 for free and get 10 notes free forever to do your kubernetes backups so make sure to check out the link in the video description and now let's continue now usually when we build the image we don't need everything we have in the project to run the application inside we don't need the auto-generated folders like targets or build folder we don't need the readme file etc so how do we exclude such content from ending up in our application image in order to reduce the image size and that's our next best practice to use a dot docker ignore file and it's pretty straightforward we basically just create this docker ignore file we list all the files and folders that we want to be ignored and when building the image docker will look at the contents and ignore anything specified inside but now let's say there are some contents in your project that you need for building the image so during the build process but you don't need them in the final image itself to run the application the way it works is that while you build an image from a docker file many artifacts actually get created which are required only during the build time and this could be development tools and libraries needed for compiling the application or this could be dependencies needed to run unit tests could also be some temporary files and so on if you keep these artifacts in your final image even though they're absolutely unnecessary for running the application it will again result in an increased image size and increased attack surface a specific example for this is a package.json or palm.xml or any other dependencies file which specifies all the dependencies for the project and are needed to install those dependencies however once the dependencies are installed we don't need these files in the image itself to run the application another more interesting use case is when building java based applications for example we need jdk to compile the java source code but jdk is not needed to run the java application itself in addition to that you might be using tools like maven or gradle to build your java application those are also not needed in the final image so how do we separate the build stage from the runtime stage in other words how do we exclude the build dependencies from the image while still having them available while building the image well for that you can use what's called multi-stage builds the multi-stage builds feature allows you to use multiple temporary images during the build process but keep only the latest image as the final artifact let's see how that works this is an example docker file with two build stages the first stage which we call build specified like this is used to build the java application using maven tool and in the second stage which starts from here with directive from tomcat we use the files generated in the previous build stage and copy them in the final image so the final application image is created only in the last stage using these two lines and all the files and tools that we used in the first stage will be discarded once it's completed and also we talked about layers in our case the final two commands of this docker file will create the layers of the final image again all these previous steps will be discarded so this basically helps us separate the build tools and dependencies from what's needed for a runtime and gives us images which have way less dependencies and are much smaller in size now when we create this image and eventually run it as a container which operating system user will be used to start the application inside well by default when a docker file does not specify a user it uses a root user but in reality there is mostly no reason to run containers with root privileges and there is also a bad security practice this basically introduces a security issue because when container starts on the host it will potentially have root access on the docker host so running an application inside the container with a root user will make it easier for an attacker to escalate privileges on the host and basically get hold of the underlying host and its processes not only the container itself especially if the application inside the container is vulnerable to exploitation to avoid this the best practice is to simply create a dedicated user and a dedicated group in the docker image to run the application to create the user in its group you can simply run user add and group ad linux commands like this and once you have that user to also run the application inside the container with that user you can use a directive called user with the username and then start the application conveniently some images already have a generic user bundled in which you can use so you don't have to create a new one for example node.js image already bundles a generic user called node which you can simply use to run the application inside the container finally how do you make sure and validate the image you build has a few or no security vulnerabilities and so the next and final best practice is once you build the image to scan it for security vulnerabilities using the docker scan command here note that you have to be logged into docker hub to be able to scan your images so you can do a simple docker login on your command line and then execute docker scan command with image name as a parameter and in the background docker actually uses a service called sneak to do the vulnerability scanning of the images the scan uses a database of vulnerabilities which gets constantly updated so new ones get discovered and edit all the time for different images and this is basically an example output of docker scan command where you see the type of vulnerability a url for more information but also what's very useful and interesting you see which version of the relevant library actually fixes that vulnerability so you can update your libraries to get rid of these issues and in addition to scanning your images with docker scan command on a command line interface you can also configure docker hub to scan the images automatically when they get pushed to the repository and you can see the results of that scanning in docker hub or docker desktop and of course you can integrate this check in your ci cd pipeline when building your docker images so these are eight best practices that you can apply today to make your docker images leaner and more secure of course there are many more best practices related to docker but applying these will already give you great results when using docker in production do you know some other best practices which you think are super important and have to be mentioned please share them in the comments for others as well and finally make sure to check out the video description for more learning resources and with that thank you for watching and see you in the next video,-0.03203967958688736,0.05587220564484596,0.047435957938432693,-0.05351133644580841,0.02324443869292736,-0.0265324916690588,-0.07846282422542572,0.09875914454460144,-0.06862135231494904,0.037360284477472305,-0.06543715298175812,0.010336805135011673,-0.009581267833709717,-0.0066078039817512035,-0.06834876537322998,-0.04629217088222504,0.05317293852567673,0.02228059060871601,0.008849725127220154,-0.017537230625748634,-0.10133954882621765,-0.04780609905719757,0.02189530059695244,-0.0330364927649498,-0.0031695463694632053,0.012753872200846672,-0.013566873036324978,0.006286583375185728,-0.04251512885093689,-0.04891155660152435,-0.016257626935839653,0.024047071114182472,0.04913012683391571,0.0050943088717758656,0.00674362201243639,0.05884848162531853,0.0845145508646965,-0.05757596716284752,-0.004967791028320789,-0.011706323362886906,0.02094222791492939,-0.05116083472967148,-0.05376382917165756,-0.011918933130800724,0.021777130663394928,-0.06764362007379532,0.066172756254673,-0.09652125835418701,0.03870192915201187,0.07855791598558426,-0.009258854202926159,-0.06684179604053497,-0.00951695442199707,-0.027088575065135956,-0.022173304110765457,0.012059742584824562,0.04052284359931946,-0.019830072298645973,0.03458049148321152,-0.0038432239089161158,0.006375912576913834,0.02426060661673546,-0.004272521007806063,0.008704809471964836,0.08458676934242249,-0.06845743209123611,0.014803167432546616,0.07397504150867462,0.019896386191248894,0.05547849088907242,0.019074341282248497,-0.005015423055738211,-0.018604055047035217,-0.0998983159661293,-0.05686178803443909,0.046733468770980835,0.04195261001586914,-0.03446882590651512,-0.0339726060628891,0.03233231231570244,0.022113772109150887,0.02570352703332901,0.0014795673778280616,-0.04468700662255287,-0.06868007034063339,0.01185725349932909,-0.02895946428179741,0.0019128647400066257,0.032811038196086884,-0.06226355955004692,0.03805706650018692,0.03754625841975212,0.05527400225400925,-0.018639447167515755,0.07660980522632599,0.05810738354921341,-0.038278017193078995,-0.0720784142613411,0.008155880495905876,-0.004885765723884106,0.04503697156906128,-0.08715622872114182,0.03379258140921593,-0.008420191705226898,0.06609296053647995,0.004881895147264004,0.04844702407717705,0.023326996713876724,-0.06573767215013504,-0.04770457372069359,0.0404721200466156,-0.015303140506148338,-0.08392652869224548,0.014680744148790836,0.0038048471324145794,-0.005082976538687944,-0.01193280890583992,-0.06292198598384857,0.025043917819857597,-0.020954828709363937,0.026138054206967354,-0.0017278490122407675,0.16799981892108917,-0.017342353239655495,-0.059550486505031586,0.06289581954479218,-0.07501839846372604,-9.084022896837898e-34,0.03245392441749573,-0.06855318695306778,-0.019883032888174057,-0.012996498495340347,0.13187703490257263,-0.02104676514863968,0.04233613237738609,-0.04689180478453636,0.006706013344228268,0.007343381177634001,-0.030300218611955643,-0.0037612628657370806,-0.04460906609892845,-0.02845795452594757,0.07274644076824188,-0.05353456363081932,-0.05885326489806175,0.053274258971214294,-0.07956284284591675,0.002681602258235216,-0.020280398428440094,-0.0833478644490242,-0.03219405561685562,-0.00207282742485404,0.0957639217376709,-0.03215319290757179,0.030114436522126198,-0.017613425850868225,-0.04322872683405876,-0.016418717801570892,0.0075922878459095955,-0.054353177547454834,0.022294046357274055,0.01690531335771084,0.027322299778461456,0.01597943902015686,-0.03347589820623398,0.04661482945084572,-0.03405780345201492,0.00929135549813509,-0.032669804990291595,0.031133290380239487,0.04823753982782364,0.013195086270570755,0.0636148527264595,-0.012677116319537163,-0.028534943237900734,-0.05725353583693504,0.01174237672239542,0.03829120472073555,0.055434513837099075,-0.03460119292140007,0.0015945376362651587,0.06248719245195389,-0.02355298027396202,-0.08169203996658325,0.07489334046840668,-0.06864102929830551,0.07424645125865936,0.04698355123400688,-0.11910445243120193,-0.018900174647569656,-0.00917803030461073,-0.01914346031844616,0.008146039210259914,0.03686780482530594,0.00801913719624281,0.03275627642869949,0.006189918145537376,0.027933286502957344,-0.0100165456533432,0.018613046035170555,0.038599949330091476,0.03927384316921234,0.02487032301723957,0.03793582692742348,-0.0459136925637722,0.015529570169746876,-0.016032647341489792,0.033270303159952164,0.057982128113508224,0.10434655100107193,-0.03768279403448105,0.0854310616850853,-0.02740054577589035,-0.0930120050907135,0.039066363126039505,0.08347184211015701,-0.011074556037783623,0.10408563166856766,0.006715730298310518,0.0571650005877018,0.03809810429811478,-0.02496606856584549,-0.10241761058568954,-5.530636635771552e-34,-0.007416298147290945,0.04586897790431976,0.0401541031897068,0.03600822761654854,-0.026453783735632896,-0.02479562722146511,0.07966364175081253,-0.06082967668771744,0.025786926969885826,-0.05540904030203819,-0.059143345803022385,0.047992512583732605,0.06630618125200272,0.004009324591606855,-0.06952590495347977,0.004068376962095499,-0.06615033745765686,-0.1036422997713089,0.05715043097734451,-0.10001017898321152,0.0621362179517746,-0.004122541751712561,0.038539525121450424,0.062061574310064316,-0.06183727830648422,-0.08823449909687042,-0.06074867770075798,-0.02041647955775261,-0.04836800694465637,-0.03961865231394768,0.030960628762841225,0.006797717418521643,0.0647023618221283,0.059287525713443756,0.0025986942928284407,0.0462937131524086,-0.01029230933636427,0.06729816645383835,-0.015866711735725403,0.002480396069586277,0.024311477318406105,-0.0839829295873642,-0.010581916198134422,0.054512280970811844,-0.09916828572750092,-0.019195418804883957,-0.05267028138041496,-0.01874355785548687,-0.08031919598579407,0.04639153555035591,-0.11486455053091049,-0.07225020974874496,-0.017992662265896797,-0.07562188059091568,0.02154814638197422,-0.014397915452718735,-0.011234956793487072,0.026318911463022232,-0.11703994870185852,0.056751709431409836,0.12496698647737503,-0.017232660204172134,0.03581656515598297,0.02734297327697277,-0.03943774104118347,0.04669266939163208,0.0032677247654646635,0.033659644424915314,-0.13109049201011658,0.03779859468340874,0.004038644954562187,-0.06118858605623245,-0.016018085181713104,0.05513904243707657,-0.029960857704281807,-0.06069604679942131,0.05769294500350952,0.01866493932902813,0.11599075794219971,0.01958952471613884,-0.11613758653402328,0.03614946827292442,-0.0020224004983901978,-0.04475659877061844,-0.02269761450588703,0.0229382012039423,0.12082236260175705,-0.08133821934461594,0.08819477260112762,-0.0030873313080519438,0.027439899742603302,-0.08258873969316483,-0.08212442696094513,0.08006101101636887,0.007196127437055111,-1.6057787988188466e-8,-0.023457767441868782,-0.002598859602585435,0.04015696793794632,0.021256040781736374,-0.023108692839741707,-0.017442476004362106,0.07404497265815735,0.08376793563365936,0.07300480455160141,0.01459532044827938,-0.002977946074679494,-0.0879591554403305,-0.09485670924186707,0.0118479672819376,0.07273509353399277,0.07745532691478729,0.027450667694211006,0.0647454708814621,-0.07141877710819244,-0.06250118464231491,-0.05424124002456665,0.0886019840836525,0.11107150465250015,-0.04335987567901611,-0.023327568545937538,0.02621125429868698,0.04814346134662628,0.04665403440594673,0.029205244034528732,-0.040224380791187286,0.0639074444770813,0.01502129714936018,-0.10683216154575348,0.0035404565278440714,0.01778104342520237,0.0019384865881875157,-0.07942810654640198,0.010754209011793137,0.03231539577245712,0.0381043404340744,-0.050347305834293365,-0.021930888295173645,0.01315337885171175,-0.024575665593147278,-0.01006818376481533,-0.013527127914130688,-0.05837954580783844,-0.016164623200893402,-0.029035290703177452,-0.015827028080821037,0.014694133773446083,0.0008754986920394003,0.030113888904452324,0.018283681944012642,0.10843547433614731,0.04194547235965729,0.027159882709383965,0.006446982268244028,0.08046457916498184,0.0020940920803695917,0.057464614510536194,0.02245708554983139,0.0020693745464086533,0.09028773754835129,-0.03314179554581642,0.10727906227111816,0.07559240609407425,-0.029944084584712982,0.14293788373470306,-0.08531095087528229,0.019492072984576225,0.08084890246391296,0.025136910378932953,0.04735146090388298,-0.0160621739923954,0.018703928217291832,0.0295993834733963,-0.003030996071174741,-0.03604678809642792,-0.05217844247817993,0.01456327922642231,0.06896482408046722,-0.001359765650704503,0.0009746594005264342,-0.08165600150823593,-0.1128772422671318,0.021851632744073868,-0.04374903067946434,-0.040999025106430054,0.02513728477060795,0.05270719900727272,0.026843179017305374,0.02990761585533619,-0.10472466051578522,0.01932092383503914,0.05307808145880699,0.06753899902105331,-0.02285754680633545,-0.052466653287410736,0.08688853681087494,0.0158420130610466,-0.0547296367585659,-0.015252911485731602,-0.019214194267988205,0.027056725695729256,-0.0175338052213192,-0.040833666920661926,-0.032661207020282745,-0.00913186464458704,-0.0031559362541884184,-0.019342472776770592,-0.09232832491397858,0.0021118703298270702,0.04719742760062218,-0.010878429748117924,-0.04819639027118683,-0.05369948223233223,-0.054793376475572586,-0.03294486925005913,0.020569348707795143,0.0024493103846907616,0.02839215099811554,-0.009652550332248211,0.06626935303211212,0.021119486540555954,0.028536535799503326,-0.03217293694615364,-0.018418746069073677,0.141847163438797,0.006331171840429306,0.003673427738249302,-0.04053790122270584,0.043812163174152374,-0.0020356187596917152,0.040925610810518265,0.031248830258846283,0.029980137944221497,-0.0792316123843193,-0.16999931633472443,-0.034259065985679626,0.002684961771592498,0.0375388041138649,-0.036877747625112534,-0.004662678111344576,0.03305578604340553,0.0017085046274587512,0.006532873027026653,-0.04676502197980881,-0.030694570392370224,0.09707384556531906,-0.025052383542060852,-0.019771482795476913,0.0685127004981041,-0.03577829524874687,0.021933740004897118,-0.01929817721247673,0.04598421975970268,0.01779579557478428,0.1265559047460556,0.006922929082065821,-0.02020306885242462,0.030479710549116135,0.034195031970739365,0.025022007524967194,0.005045114550739527,-0.09722626954317093,0.06763710826635361,-0.014898006804287434,0.16477011144161224,0.015279560349881649,-0.022845029830932617,-0.03670264407992363,-0.002186911879107356,0.03879731521010399,0.02961043454706669,-0.022766055539250374,-0.11696530878543854,0.0017435770714655519,0.004857901018112898,-0.04708598926663399,0.019545594230294228,-0.04266267642378807,0.025194821879267693,0.0586344376206398,0.09092453867197037,0.0029544292483478785,0.12560588121414185,-0.06714041531085968,-0.05607707425951958,-0.02087104320526123,-0.007548054680228233,2.8031203794982977e-33,-0.016027523204684258,-0.09006009250879288,0.027497371658682823,0.015874959528446198,0.10326807200908661,0.0028125110547989607,0.039778199046850204,-0.014681448228657246,-0.101911760866642,-0.04926280677318573,0.005821777507662773,-0.001463990076445043,-0.03702881559729576,0.05321795493364334,0.07384112477302551,-0.0384746752679348,-0.08637215197086334,0.03944787010550499,0.012909665703773499,0.023790331557393074,0.004275815095752478,-0.059916216880083084,-0.028352033346891403,0.01400719303637743,0.054730214178562164,-0.09752073884010315,0.05774395912885666,0.002127857645973563,-0.08677271753549576,-0.04908864572644234,0.04965696483850479,-0.017911845818161964,0.025168901309370995,0.04978590086102486,0.018676744773983955,-0.0037982380017638206,-0.0065176961943507195,0.03906910493969917,-0.06383944302797318,0.005942648742347956,0.022411834448575974,-0.011064055375754833,-0.009518221952021122,0.03599254786968231,0.08229255676269531,-0.026797452941536903,-0.021490618586540222,-0.06563849747180939,0.015207530930638313,0.0424594022333622,0.06892534345388412,-0.010068165138363838,-0.017342595383524895,0.013341328129172325,-0.05573927238583565,-0.058478474617004395,0.019662057980895042,-0.1105133518576622,0.014646836556494236,-0.00012616178719326854,-0.07983472943305969,-0.010707340203225613,-0.02740522474050522,0.051393527537584305,-0.004009238909929991,0.07571990042924881,0.008740970864892006,0.027064185589551926,-0.027811896055936813,0.012950030155479908,-0.03020576760172844,0.01488253753632307,0.04561872035264969,0.004339902196079493,0.015162085182964802,0.006452473811805248,-0.0012820526026189327,0.048980847001075745,-0.03151337429881096,0.006934687495231628,-0.039960313588380814,0.1058439090847969,-0.07815513014793396,0.05491470918059349,-0.04844528064131737,-0.057790424674749374,0.02969934605062008,0.043648332357406616,0.06517299264669418,0.12150827050209045,0.10160888731479645,0.05111329257488251,-0.03346474841237068,-0.01941676065325737,-0.045793600380420685,-4.021211155845531e-33,-0.009308772161602974,0.031884849071502686,-0.03388179838657379,0.07155312597751617,-0.027488475665450096,-0.03653418645262718,0.0246741846203804,-0.018534492701292038,-0.00833658967167139,-0.068071648478508,-0.05561758205294609,0.06912554055452347,-0.019679369404911995,-0.01769736222922802,-0.0907612219452858,0.024562742561101913,-0.06628602743148804,-0.03984348475933075,0.0028586736880242825,-0.024586167186498642,0.03857939690351486,0.07444155961275101,0.046463847160339355,0.032747525721788406,-0.04480439051985741,-0.037963975220918655,-0.0506950207054615,-0.036497555673122406,0.00883363839238882,-0.052823204547166824,-0.011822031810879707,0.0047610606998205185,0.03042769804596901,-0.014512909576296806,0.0472341924905777,-0.041216928511857986,0.003051165724173188,0.04073989763855934,0.05011342838406563,0.0025184983387589455,-0.021533358842134476,-0.04736897721886635,-0.015709413215517998,-0.009955155663192272,-0.03847377747297287,-0.05088508501648903,-0.019691886380314827,-0.022179942578077316,-0.04136211797595024,-0.015607178211212158,-0.03348110243678093,-0.10158196836709976,-0.02038435824215412,-0.006335885729640722,-0.014283598400652409,-0.08689653128385544,-0.01431298442184925,0.07453048974275589,-0.033628903329372406,0.09715373069047928,0.13316789269447327,-0.06606539338827133,0.01222569402307272,-0.004407534841448069,-0.09492556750774384,-0.03225221112370491,-0.08323724567890167,0.03731526434421539,-0.08281221240758896,0.07578925043344498,-0.07956072688102722,-0.04330018535256386,0.006002035923302174,0.07401935011148453,-0.0034573113080114126,-0.0754878968000412,0.11225295811891556,-0.036523040384054184,0.04033927619457245,-0.0108453668653965,-0.07327654212713242,0.050369590520858765,-0.02099846489727497,-0.029151026159524918,-0.010080941952764988,0.03816118463873863,0.05734056234359741,-0.09823665022850037,0.05258305370807648,-0.030368957668542862,0.008636345155537128,-0.03463928401470184,-0.10417962074279785,0.05539076402783394,-0.0008441554964520037,-5.460630347897677e-8,-0.010104494169354439,-0.00666698208078742,0.007682843133807182,-0.034098777920007706,0.0012153603602200747,-0.02152463048696518,0.07000236213207245,0.02779521234333515,0.0834643691778183,-0.05082200467586517,-0.005620368290692568,-0.028654832392930984,-0.10122080147266388,-0.01854618638753891,0.049698881804943085,0.06287733465433121,0.0010867671808227897,0.03870197385549545,-0.005873153451830149,-0.04426076263189316,-0.09418335556983948,0.03457965329289436,0.039749257266521454,0.03064267337322235,-0.008699553087353706,0.04458864405751228,0.05934479087591171,0.02487974427640438,-0.0276270043104887,0.030215676873922348,0.032644134014844894,0.03469100967049599,-0.010615883395075798,0.03941132873296738,0.03216279298067093,-0.018565287813544273,-0.03622592240571976,-0.027335526421666145,0.0727686882019043,0.04168080911040306,-0.05298098176717758,-0.022599874064326286,-0.0386614091694355,-0.04790646582841873,-0.05379640683531761,-0.02823437750339508,-0.024062752723693848,-0.06262469291687012,-0.09414927661418915,0.04584324732422829,0.08905379474163055,-0.07460001856088638,-0.009991365484893322,0.03848951309919357,0.08561453223228455,0.06478425860404968,0.07188459485769272,-0.01634439267218113,0.10705030709505081,0.034257322549819946,0.028645150363445282,0.039354316890239716,0.06560150533914566,0.04193593189120293
7KUdmFyefSA,2020-12-10T16:55:01Z,Kubernetes is dropping Docker support - What does it mean for YOU?,a couple of days ago an update was released that kubernetes will no longer support docker so what does that actually mean why did this change happen and how does that impact you as a developer or devops engineer who is working with docker and kubernetes as you probably already know kubernetes supports multiple container runtimes one of them being docker which is also one of the most popular container tools out there which is used in different projects and docker was also originally the container technology that made containers popular in the first place and also caused need for orchestration tools like kubernetes itself so let's say we deployed docker engine on a kubernetes worker node docker engine actually comes with three components you have docker server then you have the docker api which is basically for interacting with the server and we have the command line interface these are the docker commands that you can execute against the server and docker server component itself has a couple of components and features it has the container runtime which is responsible for starting and stopping containers basically managing the whole life cycle it has the volumes part which is for persisting data in docker it has the network interface for docker containers and also you can build images with docker and the fact is that the only part that kubernetes needs in order to run the containers inside the cluster is the container runtime of docker so kubernetes doesn't actually need all of those features that docker offers because either it has its own features for example for creating volumes or command line interface as well as container network interface or in case of docker feature of building images kubernetes doesn't actually need that because you're not building images inside kubernetes cluster or with kubernetes and for kubernetes to actually directly talk to and use this container runtime component it needs to interact with docker first and for this interaction with docker kubernetes uses docker shim and docker shim is basically part of or has been part of kubernetes code so kubernetes developers have been maintaining and updating dokashim till now and this docker shim this part of the code in kubernetes that talks to docker is actually what kubernetes is deprecating and eventually removing from code and as you see from this diagram it is logical not to deploy the whole docker with all the features that kubernetes doesn't need and instead have just the runtime component so that containers can run in kubernetes cluster this first of all will save a lot of resources like ram and cpu and storage because your installation is much smaller and also it will reduce the security risk because the less components you have the less security risk you are exposed to and the container runtime that docker uses is container d and container d component was actually originally part of the docker daemon code and docker has extracted it as a separate component so that it can be deployed as a standalone container runtime and used in kubernetes cluster and container d is actually now part of cncf and is being developed and maintained as a separate project and container d is the second most popular alternative to using docker as a runtime and in fact container d is already being used by major cloud platforms in kubernetes cluster for example aws eks or google cloud's kubernetes service all use container d already as a container runtime so container d is a mature and also very popular container runtime used in kubernetes clusters another alternative container runtime is cryo which is used by openshift so probably now the most interesting and important question is what does this change mean for you as a kubernetes user or kubernetes administrator now first let's start with kubernetes users and these are mostly developers maybe also devops engineers who are just installing resources on an already existing and configured kubernetes cluster so basically the cluster is running already and you're deploying your applications inside in this case the change or substituting the container runtime underneath kubernetes doesn't actually affect any of your workflows as kubernetes user because that layer is completely abstracted away from you're not interacting with containers so whatever container runtime is running underneath even if it changes you won't probably even notice that the second part is kubernetes administrators or operators and these are actually people who are setting up kubernetes cluster right they're creating them from scratch and maybe configuring some network configuration on kubernetes cluster etc and these are either devops engineers or system administrators or cloud engineers and as i mentioned if you have created your kubernetes cluster on cloud on one of those kubernetes services like on aws or google cloud etc you didn't actually have to install any binaries on the servers you didn't have to install and configure masternodes you didn't have to install container runtime and the kubernetes processes on worker nodes and that means that it is not your responsibility or worry what container runtime is running on those servers so basically the cloud providers who are managing your cluster for you are actually taking care of all that for you which is again one of the advantages of using managed community service because you don't have to worry about installing all these binaries and then updating the versions etc and as i said aws google cloud and many other platforms already use container d as a container runtime now there is one specific case where you as a kubernetes administrator have to take some action and that is if you have installed kubernetes maybe on bare metal or some just virtual machines using cube admin for example so you basically spin up some servers and you installed all those binaries the kubernetes processes container runtime the network interface one by one on those servers in order to create your own kubernetes cluster and this actually might be a case for companies that are using on-premise servers maybe because of some security issues and who are installing the whole kubernetes cluster on those servers from scratch including the container runtime and if it was docker then you have two alternatives first of all you can either substitute the container runtime and use container d or cryo or some other container runtime or as a second option if you for some reason still want to use docker as a container runtime in your cluster mirantis and docker actually announced that they will maintain and support dokoshim as a standalone open source component that you can install separately inside your kubernetes cluster to be able to run docker as a container runtime now in this case when do you need to make this change you won't have to do it immediately obviously because the first step is that docker support just got deprecated so you're just gonna have a warning if you update to the latest version of kubernetes and you will still have some time to make that change from docker to another container runtime so that means that even in this specific scenario there is basically not such a huge change and not an urgent one that you have to do inside your cluster and when kubernetes administrators actually substitute docker with another container runtime developers who are using kubernetes cluster and deploying applications inside probably won't even notice that change there's still two more questions that i want to address the first one being what about running kubernetes locally using mini cube or docker desktop do i have to change anything or does this change actually impact running mini cube cluster or running kubernetes cluster with docker desktop the answer to that is no it doesn't impact at all you as a community's user again will just install these tools and they actually already make the decision about which container runtime is used in the background because you don't have to install that separately it comes with the tool so in this case minicube has support for docker and container d so if it gets removed from mini cube as well you're just gonna install mini cube and you're gonna start using kubernetes cluster without even worrying or knowing what container runtime is running behind one of the frequent questions that i see is should i still learn docker if i'm gonna use kubernetes and what about building docker images in a cicd pipeline well one of the features of docker is actually building images so before the image can run as a container inside kubernetes cluster you first have to build that image right and this is where you will still be using docker in your cicd pipeline to build images from your application let's say we have this complete ci cd pipeline that builds docker images and then deploys to a kubernetes cluster how will this work because we're building docker images we're pushing them to docker repository and how are they going to run in kubernetes cluster where there's no docker installed and the answer to that is very simple every docker image can run in every container runtime so basically you can be building docker images pushing them to docker repository and deploying it to kubernetes cluster that runs container d as a container runtime and it will run perfectly in fact it is already happening if you're using eks and the reason for this compatibility and why all the docker images can run as containers in any container runtime is that these container tools are all compatible with each other because they're all using standards defined by open container initiative open container initiative or oci is basically a project of linux foundation that standardizes how container technologies should work and how they should be implemented and because docker and container d as well as cryo all comply to these open container initiative standards they're actually compatible with each other so you can run docker images on cryo runtime on container d runtime without any problem and that means you will not have to make any changes to your existing infrastructure to your existing ci cd setup even when kubernetes does not use docker as a container runtime so to wrap this up in most of the cases there's no action required especially if you're a kubernetes user as a kubernetes administrator if you have created cluster from scratch by installing everything yourself then either you can substitute docker with another container runtime or just use docker shim as a standalone component,0.0164797380566597,0.018286556005477905,0.10360274463891983,-0.006043796427547932,0.10198351740837097,0.015798717737197876,-0.0525103434920311,-0.021804433315992355,0.03681296855211258,0.035204578191041946,-0.04582373797893524,0.010773377493023872,-0.025313422083854675,0.030618540942668915,0.03800666332244873,0.009509067982435226,0.03391753137111664,-0.060887981206178665,-0.10507267713546753,0.01858852431178093,-0.17031008005142212,-0.021482137963175774,-0.04913192614912987,-0.022236069664359093,-0.011845550499856472,-0.02694230154156685,-0.04158616065979004,-0.06309729069471359,-0.02613285928964615,0.000027329422664479353,-0.045747920870780945,0.02537905052304268,0.023055315017700195,0.005381942726671696,0.025619136169552803,0.032917968928813934,0.028306150808930397,-0.0018410340417176485,-0.04693397507071495,0.04938651993870735,0.024215400218963623,-0.07767873257398605,-0.05585813894867897,-0.007408793084323406,0.010762031190097332,-0.0005330145941115916,-0.0006783840944990516,-0.09648852050304413,0.03634226694703102,0.01881204918026924,0.0270431749522686,-0.040247492492198944,0.0455932654440403,0.03343319892883301,0.02023293264210224,-0.0063911615870893,-0.03797665983438492,0.06884220242500305,0.06256512552499771,0.048372186720371246,0.09147685766220093,-0.022540409117937088,-0.033594828099012375,0.03113734908401966,0.0295123141258955,-0.02994963526725769,0.052996717393398285,-0.03052065707743168,0.0200185663998127,-0.037654995918273926,0.06874268501996994,0.02420775406062603,-0.008314699865877628,-0.014923971146345139,-0.004437161609530449,0.008527340367436409,0.006998235359787941,-0.013214289210736752,0.05119597166776657,-0.008328202180564404,0.020832762122154236,0.05203026905655861,0.029924971982836723,-0.02829207107424736,-0.12919029593467712,-0.012369906529784203,-0.026140272617340088,-0.05999229475855827,0.04233700409531593,-0.04906225949525833,0.024459460750222206,-0.0332382395863533,0.0893365889787674,-0.015561291947960854,0.02601558528840542,-0.015650207176804543,0.009908666834235191,0.007596663665026426,-0.042262379080057144,-0.017192013561725616,0.03134291619062424,0.0024663356598466635,0.005615736823529005,-0.03840063139796257,0.029149435460567474,-0.05263971909880638,0.00902554951608181,0.024359822273254395,-0.011758296750485897,0.018139882013201714,0.03605075553059578,-0.01825660467147827,-0.026841407641768456,0.05866120383143425,-0.0410919189453125,0.023029418662190437,-0.03493494167923927,-0.07863087207078934,0.06724682450294495,0.016845956444740295,0.01600082591176033,-0.010458664037287235,0.06282791495323181,-0.029198700562119484,-0.08114966750144958,0.0958680510520935,-0.10757293552160263,-4.550614138521549e-33,-0.02381761744618416,-0.10465788096189499,0.043503180146217346,-0.02486519142985344,0.14083251357078552,-0.13829897344112396,-0.02446252666413784,-0.05968350172042847,-0.048323556780815125,-0.02633514441549778,-0.0886850506067276,0.02782832458615303,0.003672428894788027,-0.022470595315098763,0.037959687411785126,-0.040858201682567596,-0.06503547728061676,0.05015091598033905,0.04669632390141487,0.0173764880746603,0.023160958662629128,-0.06402100622653961,-0.014705880545079708,0.016003258526325226,0.041345082223415375,-0.055128708481788635,0.045100752264261246,-0.03592197969555855,0.0036670719273388386,0.004927630536258221,-0.06041046604514122,0.019856099039316177,0.037395406514406204,-0.08362692594528198,-0.06005401164293289,0.011088883504271507,-0.024768413975834846,0.030285844579339027,-0.07272513210773468,0.0016417702427133918,-0.04386945441365242,-0.051732830703258514,-0.058859050273895264,-0.006173068657517433,0.09796532988548279,-0.08266545087099075,0.0684858113527298,-0.08803194016218185,-0.034440454095602036,0.06573288142681122,-0.01038292795419693,-0.04038562253117561,-0.04953181371092796,0.0321916900575161,0.038577593863010406,0.003421834670007229,0.08571502566337585,-0.07264718413352966,-0.018670450896024704,-0.029395533725619316,-0.03524661064147949,-0.03736119717359543,0.0008866148418746889,-0.06363964080810547,0.06364274024963379,-0.0020318354945629835,0.025566043332219124,0.06785842776298523,-0.09461439400911331,0.06224103644490242,-0.042963895946741104,-0.0060150837525725365,0.03937752917408943,0.04704314097762108,0.023178620263934135,-0.01627495139837265,-0.06388679891824722,-0.033999066799879074,0.011878733523190022,0.0624602809548378,0.02197769656777382,-0.029656505212187767,0.02811555005609989,0.09868174046278,-0.008031188510358334,-0.039729561656713486,0.009298582561314106,0.03769230470061302,-0.00028334115631878376,0.0313492976129055,-0.004608520306646824,-0.0025378463324159384,-0.12331834435462952,0.004923445172607899,-0.0834810733795166,1.265844867007404e-33,-0.0072599672712385654,0.04311927780508995,-0.10037017613649368,0.02002347633242607,0.01892361231148243,0.003793227719143033,0.06923063099384308,0.08006758987903595,0.0253223218023777,-0.09907181560993195,0.0006471655797213316,-0.005431831814348698,0.010458805598318577,0.09629186987876892,-0.08368875086307526,0.00023519500973634422,-0.08169448375701904,-0.06341109424829483,0.009621291421353817,0.019811946898698807,0.04561874642968178,-0.021261366084218025,0.041675254702568054,0.05780623480677605,-0.07692646980285645,-0.036539413034915924,0.054698646068573,-0.02465052530169487,-0.03825001046061516,-0.010307740420103073,0.0565422847867012,-0.10692820698022842,-0.027850858867168427,0.09669699519872665,0.07575006783008575,0.001869891188107431,-0.03829469904303551,0.06638378649950027,-0.07912036031484604,-0.08349497616291046,-0.0184182021766901,-0.018799204379320145,0.02280561812222004,0.02598118782043457,-0.04203585162758827,0.04241931810975075,0.08155979216098785,-0.022509129717946053,-0.008533609099686146,-0.06537170708179474,-0.04202190786600113,-0.020937835797667503,0.01516774483025074,0.06471090763807297,-0.04272163659334183,0.02431347593665123,0.032907262444496155,0.06138170510530472,-0.10550621151924133,0.08143404871225357,0.053170833736658096,-0.055811502039432526,0.053926415741443634,-0.006201266311109066,0.08435552567243576,0.0038910878356546164,0.002305129310116172,0.05746198818087578,-0.027590801939368248,0.022421205416321754,0.05157918483018875,-0.05770350992679596,0.019514277577400208,0.05105847120285034,-0.005542090628296137,-0.041433971375226974,-0.026158738881349564,-0.0176200270652771,0.0252490546554327,-0.01604870706796646,-0.058748528361320496,-0.014930248260498047,-0.0257527157664299,-0.09906230121850967,0.031790368258953094,0.021367251873016357,0.08865652978420258,0.00606897845864296,0.1008811742067337,0.00407089339569211,0.012866652570664883,-0.021069977432489395,-0.10193633288145065,0.17334984242916107,-0.042568933218717575,-1.9921399641020798e-8,0.060804497450590134,0.03052108734846115,-0.03947687894105911,-0.03170959651470184,0.07618118822574615,-0.002944516483694315,0.051511507481336594,0.026073388755321503,-0.03243841975927353,-0.008234239183366299,-0.04819512739777565,0.016186965629458427,-0.11592917144298553,0.05264849215745926,0.15637558698654175,0.009598933160305023,0.008438896387815475,0.026956789195537567,0.020024240016937256,-0.0994383692741394,-0.04577232152223587,-0.022250717505812645,0.027460454031825066,-0.05422669276595116,-0.01863737963140011,0.08774790167808533,0.06856897473335266,0.114167220890522,0.020611070096492767,-0.033174220472574234,-0.008079178631305695,0.018180644139647484,-0.0830511525273323,0.022465558722615242,0.052637651562690735,0.06276559084653854,-0.12449153512716293,0.017984772101044655,0.019119868054986,0.02501969039440155,-0.0574612021446228,-0.0005197753780521452,-0.03631897643208504,-0.012747998349368572,0.01706804148852825,0.08066768944263458,-0.024985158815979958,0.10565930604934692,0.002439916832372546,-0.023509861901402473,0.04497956112027168,-0.011100157164037228,-0.016140123829245567,0.07327726483345032,0.027689440175890923,0.03499259427189827,-0.008714403957128525,-0.026043841615319252,0.004172210115939379,-0.019602911546826363,0.020681671798229218,0.0068069808185100555,0.004415194503962994,0.07105877250432968,-0.018106799572706223,0.010136844590306282,0.1051289439201355,0.00388899608515203,0.03906916826963425,-0.011456642299890518,-0.049301210790872574,-0.013821794651448727,0.11042021214962006,-0.009111256338655949,-0.0634661391377449,0.0025775607209652662,0.0075617567636072636,-0.021092450246214867,0.03296263515949249,-0.06507189571857452,0.046567052602767944,-0.01000839751213789,-0.09388116002082825,0.0024221264757215977,-0.07851702719926834,-0.00604049488902092,-0.04457312449812889,-0.037720516324043274,-0.07372528314590454,0.029960310086607933,-0.03229139745235443,-0.09484178572893143,-0.0001496562035754323,-0.012031050398945808,-0.03863628953695297,0.025964753702282906,0.010914497077465057,0.01798129454255104,-0.06345173716545105,0.0377790704369545,0.061774175614118576,0.024766327813267708,-0.053368356078863144,0.022021308541297913,0.011260717175900936,-0.08642204850912094,-0.08958112448453903,-0.05802533030509949,-0.019007422029972076,-0.02987808920443058,-0.028713621199131012,-0.16210255026817322,-0.004540647845715284,0.014927662909030914,-0.011123491451144218,-0.06808333098888397,0.008849936537444592,0.018238184973597527,0.0364227369427681,0.00878838635981083,-0.01071203127503395,0.1397092193365097,0.05179450660943985,0.08103536069393158,0.0072762141935527325,-0.005409017205238342,-0.011991714127361774,-0.00639153691008687,0.10197172313928604,-0.05860355868935585,0.011469312943518162,-0.052570197731256485,0.048483800143003464,-0.09946919977664948,0.04156206548213959,-0.02266518399119377,-0.016052061691880226,-0.06630498170852661,-0.04096834734082222,-0.013537367805838585,0.007946735247969627,0.05461239814758301,0.01038412656635046,-0.05778703838586807,0.05672129616141319,0.058863986283540726,-0.011310058645904064,-0.03516169264912605,-0.13051551580429077,0.020702386274933815,-0.03556983172893524,0.005575832445174456,0.06530261784791946,-0.05583241954445839,0.039055757224559784,-0.030500847846269608,0.03418832644820213,-0.040604088455438614,0.12456630915403366,-0.004019870422780514,-0.06515458971261978,0.027618877589702606,0.10998395830392838,-0.031253036111593246,0.03420615196228027,-0.03654880449175835,0.05560864135622978,-0.028415268287062645,0.06102374568581581,-0.02418980747461319,-0.023786330595612526,-0.025136252865195274,-0.0028530799318104982,0.006982229650020599,0.023449471220374107,-0.0011824257671833038,-0.046602651476860046,0.03351052850484848,-0.018074888736009598,-0.04096553474664688,-0.03679477050900459,-0.05337519198656082,0.06528399884700775,0.06584477424621582,0.015045098960399628,-0.0631413459777832,0.06497666984796524,-0.005024095997214317,-0.031053053215146065,0.042616572231054306,-0.06257385015487671,7.401321651748002e-33,-0.010927630588412285,-0.1599511057138443,0.06311460584402084,0.0088269654661417,0.14008156955242157,-0.07452675700187683,0.01686580292880535,-0.01709810085594654,0.011038160882890224,-0.04998660087585449,-0.03219285234808922,0.06093129515647888,-0.004412869922816753,0.04203706234693527,0.04730219393968582,-0.012514028698205948,-0.06357279419898987,0.016177529469132423,0.06086215749382973,0.004748867359012365,0.007758790161460638,-0.05472450703382492,-0.025167888030409813,0.06293290108442307,0.08144081383943558,-0.07014065980911255,0.0645543560385704,-0.038550857454538345,-0.0686851292848587,-0.007990715093910694,-0.016040226444602013,0.022771531715989113,0.022573858499526978,0.02665100060403347,-0.0660635232925415,0.014399800449609756,-0.018922695890069008,-0.0017737412126734853,-0.08645176142454147,0.0019451180705800653,-0.05061859264969826,-0.035401999950408936,-0.008430641144514084,-0.022178256884217262,0.05029001459479332,-0.06486117839813232,-0.02179451286792755,-0.05389968678355217,0.0089592719450593,0.029501868411898613,0.014423327520489693,-0.021668845787644386,0.057072609663009644,0.002420211210846901,0.037785790860652924,0.028894372284412384,0.06948304176330566,-0.07373553514480591,-0.01937956176698208,0.015458506532013416,-0.11287358403205872,-0.004814859479665756,0.0018094534752890468,0.053826384246349335,0.03184298798441887,0.03482818976044655,0.050993870943784714,0.09905442595481873,-0.06456851214170456,0.06407356262207031,-0.03982914611697197,0.009173751808702946,-0.028987666592001915,0.004877212457358837,0.02624349668622017,-0.020700866356492043,-0.038866400718688965,5.180700100027025e-6,-0.0690845400094986,0.07629368454217911,-0.023392563685774803,0.04148915410041809,-0.03145565092563629,0.07305891066789627,-0.015102424658834934,-0.04431115463376045,0.023186108097434044,0.04870808869600296,0.07128419727087021,0.0397421233355999,0.01720433123409748,0.0027241758070886135,-0.08023674041032791,0.042450834065675735,-0.036099739372730255,-9.834486224722686e-33,0.01428227312862873,0.06062227860093117,-0.11326904594898224,-0.02748890221118927,0.0063302828930318356,0.008190561085939407,0.028498005121946335,-0.009525090456008911,-0.006526208482682705,-0.09962329268455505,-0.03149353712797165,-0.008419116027653217,0.0035425187088549137,0.02667510323226452,-0.13867080211639404,0.014085426926612854,-0.06451783329248428,-0.051201965659856796,-0.022093458101153374,-0.01723567582666874,0.03416905179619789,-0.005251705180853605,0.021287763491272926,0.008551676757633686,-0.0976913645863533,-0.02966584637761116,-0.014413698576390743,0.027040382847189903,-0.02143704891204834,-0.03232848644256592,0.029473157599568367,-0.08047524839639664,0.0827523022890091,0.06834931671619415,0.05508557707071304,-0.007075400557368994,-0.02712395414710045,0.009395336732268333,0.0028381948359310627,-0.11707822233438492,-0.003566993400454521,-0.04872548580169678,0.08192018419504166,-0.021437427029013634,-0.04499426484107971,0.01200556755065918,-0.014462541788816452,-0.03963131085038185,-0.03190004080533981,-0.08232494443655014,-0.031742747873067856,-0.0034765079617500305,-0.04217919334769249,0.018167247995734215,-0.06487062573432922,-0.0229090116918087,0.043391257524490356,0.045690812170505524,-0.05308736488223076,0.06234116852283478,0.13512295484542847,-0.0465925931930542,0.08339928835630417,0.0850425735116005,-0.030853621661663055,0.015678508207201958,-0.03740287572145462,-0.017699597403407097,-0.0963313952088356,0.0361911803483963,0.012116016820073128,-0.04820762202143669,0.010456087067723274,0.0787789449095726,-0.04031755030155182,-0.06895659863948822,-0.008250978775322437,-0.03561412915587425,0.007825244218111038,0.0034147354308515787,-0.011475123465061188,-0.01124535407871008,-0.006009265780448914,-0.023558322340250015,-0.03464378044009209,0.0696496069431305,0.07785740494728088,0.029796116054058075,0.10382737219333649,-0.028037648648023605,0.02661481313407421,-0.006573060993105173,-0.10137122869491577,0.13460616767406464,0.012669787742197514,-5.975957861892311e-8,0.056928057223558426,0.012234647758305073,-0.05043335631489754,-0.02922259271144867,0.03317596763372421,-0.0320824533700943,0.034899480640888214,0.07312111556529999,0.005522758699953556,0.007830070331692696,-0.04820733517408371,-0.024229861795902252,-0.06207399070262909,-0.03479414060711861,0.12954723834991455,0.06904937326908112,-0.00934741273522377,-0.023883141577243805,0.041886020451784134,-0.10456477105617523,-0.04781000688672066,-0.02900722250342369,0.014698292128741741,-0.011269119568169117,-0.036146871745586395,0.09509585052728653,0.03832962363958359,0.04412466660141945,-0.011644399724900723,0.014708193019032478,0.031201764941215515,-0.0070600928738713264,-0.05523691326379776,0.0856596902012825,0.06093396991491318,-0.006980366539210081,-0.11124277114868164,-0.04726087301969528,0.023323815315961838,0.02290130779147148,-0.047975022345781326,-0.046836454421281815,-0.037486832588911057,-0.010944878682494164,0.051968999207019806,0.04359568655490875,-0.04321620985865593,0.04775339737534523,-0.05295617878437042,0.03193650394678116,0.03287821263074875,0.005248106084764004,-0.004643021151423454,0.0815449059009552,0.04721056669950485,0.036254286766052246,0.024425089359283447,-0.06553784757852554,0.08578500151634216,0.014946908690035343,-0.012723281979560852,0.044502660632133484,0.08158694952726364,0.02875320240855217
3c-iBn73dDE,2020-10-21T19:26:53Z,Docker Tutorial for Beginners [FULL COURSE in 3 Hours],"hello and welcome to this complete Docker course by the end of this course you'll have a deep understanding of all the main Concepts and also a great big picture overview of how Docker is used in the whole software development process the course is a mix of animated theoretic explanations but also Hands-On demos for you to follow along so get your first hands-on experience and confidence using Docker in your projects so let's quickly go through the topics I'll cover in this course we will start with the basic concepts of what Docker actually is and what problems it solves also we'll understand the difference between Docker and virtual machine and after installing Docker we will go through all the main Docker commands to start and stop containers debug containers Etc after that we'll see how to use Docker in practice by going through a complete workflow with a demo project so first we'll see how to develop locally with containers then we'll run multiple containers or services with Docker compos we'll build our own Docker image with Docker file and we'll push that built image into a private Docker repository on AWS and finally we'll deploy our containerized application last but not least we'll look at how to persist data in Docker learning the different volume types and afterwards configure persistence for our demo project if you get stuck anywhere just comment under the video and I will try my best to answer your questions also you can join the private Tech worldwi community group on Facebook which is there to exchange your knowledge with others and connect with them if you like the course by the end of the video be sure to subscribe to my channel for more related content so let's get started so we'll talk about what a container is and what problems it solves we will also look at a container repository which is basically a storage for containers we'll see how a container can actually make the development process much easier and more efficient and also how they solve some of the problems that we have in the deployment process of applications so let's dive right into it what a container is a container is a way to package applications with everything they need inside of that package including the dependencies and all the configuration necessary and that package is portable just like any other artifact is and that package can be easily shared and moved around between a development team or development and operations Steam and that portability of containers plus everything packaged in one isolated environment gives it some of the advantages that makes development and deployment process more efficient and we'll see some of the examples of how that works in later slides so as I mentioned containers are portable so there must be some kind of a storage for those containers so that you can share them and move them around so containers live in a container repository this is a special type of storage for containers many companies have their own private repositories where they host or the where they store all the containers and this will look something like this where you you can push all of the containers that you have but there is also a public repository for Docker containers where you can browse and probably find any application container that you want so let's head over to the browser and see how that looks like so if I here search for a dockerhub which is the name of the public repository for Tucker I will see this official website so here if you scroll down you see that there are more than 100,000 container images of different applications hosted or stored in this Docker repository so here you see just some of the examples and for every application there's this official Docker container or Docker container image um but if you are looking for something else you can search it here and I see there's an official image for let's say Jenkins uh but there's also a lot of non-official images or container images that developers or or even from Jenkins itself that they actually store it here so public repository is where you usually get started when you're using or when you're starting to use the containers where you can find any application image so now let's see how containers improve the development process by specific examples how did we develop applications before the containers usually when you have a team of developers working on some application you would have to install most of the services on your operating system directly right for example you are developing some JavaScript application and you need a postp ql and you need red for messaging and every developer in the team would then have to go and install the binaries of those services and configure them and run them on their local development environment and depending on which operating system they're using the installation process will look actually different also another thing with installing services like this is that you have multiple steps of installation so you have a couple of commands that you have to execute and the chances of something going wrong and error happening is actually pretty high because of the number of steps required to install each service and this approach or this process of setting up a new environment can actually be pretty tedious depending on how complex your application is for example if you have 10 services that your application is using then you would have to do that 10 times on each operating system environment so now let's see how containers solve some of these problems with containers you actually do not have to install any of the services directly on your operating system because the container is its own isolated operating system layer with Linux based image as we saw in the previous slides you have everything packaged in one isolated environment so you have the posis ql with a specific version packaged with the configuration and the start script inside of one container so as a developer you don't have to go and look for the binaries to download on your machine but rather you just go ahead and check out the container repository to find that specific container and download on your local machine and the download step is just one Docker command which fetches the container and starts it at the same time and regardless of which operating system you're on the command the docker command for starting the container will not be different it will be exactly the same so if you have 10 applications that your JavaScript application uses and depends on you would just have to run 10 Docker commands for each container and that will be it which makes the setting up your local development environment actually much easier and much more efficient than the previous version also as we saw in the demonstration before you can actually have different versions of the same application running on your local environment without having any conflict so now let's see how containers can improve the deployment process before the containers a traditional deployment process will look like this development team will produce artifacts together with a set of instructions of how to actually install and configure those artifacts on the server so you would have a jar file or something similar for your application and in addition you would have some kind of a database service or some other service also with a set of instructions of how to configure and set it up on the server so development team would give those artifacts over to the operations team and the operations team will handle setting up the environment to deploy those applications now the problem with this kind of approach is that first first of all you need to configure everything and install everything directly on the operating system which we saw in the previous example that could actually lead to conflicts with dependency versions and multiple Services running on the same host another problem that could arise from this kind of process is when there is misunderstanding between the development team and operations because everything is in a textual guide as instructions so there could be cases where developers forget to mention some important point about configuration or maybe when operations team misinterpret some of those instructions and when that fails the operations team has to go back to the developers and ask for more details and this could lead to some back and forth communication until the application is successfully deployed on the server with containers this process is actually simplified because now you have the developers and operations working in one team to package the whole configuration dependencies inside the application just as we saw previously and since it's already encapsulated in one single environment and you don't have to configure any of this directly on the server so the only thing you need to do is run a Docker command that pulls that container image that you've stored somewhere in the repos repository and then run it this is of course a simplified version but that makes exactly the problem that we saw on the previous slide much more easier no environmental configuration needed on the server the only thing of course you need to do is you have to install and set up the docker runtime on the server before you will be able to run containers there but that's just onetime effort now that you know what a container concept is let's look at what a container is technically so technically container is made up of images so we have layers of stacked images on top of each other and at the base of most of the containers you would would have a Linux based image which is either Alpine with a specific version or it could be some other Linux distribution and it's important for those base images to be small that's why most of them are actually Alpine because that will make make sure that the containers stay small in size which is one of the advantages of using container so on top of the base image you would have application image and this is a simplified diagram usually you would have these intermediate images that will lead up to the actual application image that is going to run in the container and of course on top of that you will have all this configuration data so now I think it's time to dive into a practical example of how you you can actually use a Docker container and how it looks like when you install it and download it and run it on your local machine so to give you a bit of an idea of how this works let's head over to dockerhub and search for postris ql so here which is a Docker official image I can see some of the versions and let's say say I'm looking specifically for older version I don't know 96 something so I'm going to pull that one so this is a dock repository so that I can actually go ahead and pull the containers from that repository directly and because it's a public repository I don't have to log into it I don't have to provide any authentication credentials or anything I can just get started with simple Docker command without doing or configuring anything to access dockerhub so on my terminal I can just do Docker Pole or I can even do Docker run and then just copy the the image name and if I don't specify any version it will just give me the latest but I want a specific version so I'm just I'm going to go with 9.6 actually just to demonstrate so I can provide the version like this with a column and I can start run so as you see the first line says unable to find image locally so it knows that it has to go to dockerhub and pull it from there and the next line says pulling from library postgress and here you see a lot of hashes that says downloading and the this is what I mentioned earlier which is Docker containers or any containers are made up of layers right you have the Linux image layer you have the application layers and so on so what what you see here are actually all those layers that are separately downloading from the dockerhub on my machine right and the advantage of splitting those applications and layers is that actually for example if the image changes or I have to download a newer version of pogress what happens is that the layers they're the same between those two applications two versions of posis will not be downloaded again but only those layers that are different so for example now it's going to take around 10 or 15 minutes to download this one image because I don't have any pogress locally but if I were to download the next version it will take a little bit less time because some layers already exist on my local machine so now you see that it's already logging because it this command that I ran here the docker run with the container name and version it fetches or it pulls the the container but it also starts it so it executes the start script right away as soon as it downloads it and here you see the output of the starting of the application so it just gives some output about um starting the server and doing some configuration stuff and here you see database system is ready to accept connections and launcher started so now let's open the new tab and see with Docker PS command you can actually see all the running containers so here you see that postgress 96 is running and it actually says image so this is another important thing to understand when we're talking about containers there are two technical terms image and a container and a lot of people confuse those two I think and there is actually a very easy distinction between the two so image is the actual package that we saw in one of those previous slides so the application package together with the configuration and the dependencies and all these things this is actually the artifact that is movable around is is actually the image container is when I pull that image on my local machine and I actually started so the application inside actually starts that creates the container environment so if it's not running basically it's an image it's just an artifact that's lying around if I start it and actually run it on my machine it is a container so that is the distinction so here it says the active running containers with a container ID image that it's running from and some entry commands that it executed and some other status information so this means that poql is now running on my local machine simple as that if I were now to uh need let's say another version of pogress to run at the same time on my local machine I could just go ahead and say let's go back and let's say I want want to have 9.6 and 10.10 running at the same time on my local machine I just do run postgress and run again it doesn't find it locally so it pushes and this is what I actually explained to you earlier because it's the same application but with just a different version version some of the layers of the image are the same so I don't have to fetch those again because they are already on my machine and it just fetches the layers that are different so that saves a little bit of uh time and I think it's it could be actually good Advantage so now we'll wait for other image layers to load so that we have the second postgress version running and now you see I have postgress 9.6 running in this uh command line tab and I have postgress version 10.10 running in the next one so I have two postes with different versions running and I can actually output them here have both of them running and there's no conflict between those two like I can actually run any number of applications with different versions maybe of the same application with no problem at all and we going to go through how to use those containers in your application and the port configuration and some of the other configuration stuff later in this tutorial when we do a deep dive but this is just for you to get the first visual image of how Docker containers actually work how they look like and how easily you can actually start them on your local machine without having to implement lement a specific version of postgress application and do all the configuration yourself when I first started learning Docker after understanding some of the main Concepts my first question was okay so what is the difference between Docker and an Oracle uh virtual box for example and the difference is quite simple I think and in this short video I'm I'm going to cover exactly that and I'm going to show you the difference by explaining how docu works on an operating system level and then comparing it to how virtual machine works so let's get started in order to understand how Docker works on the operating system level let's first look at how operating system is made up so operating systems have two layers operating system kernel and the applications layer so so as you see in this diagram the kernel is the part that communicates with the hardware components like CPU and memory Etc and the applications run on the Kernel layer so they are based on the Kernel uh so for example we you all know Linux operating system and there are lots of distributions of Linux out there there's buonto and Debian and there's Linux Mint Etc there are hundreds of distributions they all look different so the graphical user the interface is different the file system is maybe different so a lot of applications that you use are different because even though they use the same Linux kernel they use different or they Implement different applications on top of the kernel so as you know Docker and virtual machine they're both virtualization tools so the question here is what parts of the operating system they virtualize so docker virtualizes the applications layer so when you download a Docker image it actually contains the applications layer of the operating system and some other applications installed on top of it and it uses the kernel of the host because it doesn't have its own kernel the virtual box or the virtual machine on the other hand has the applications layer and its own kernel so it virtualizes the complete operating system which means that when you download a virtual machine image on your host it doesn't use your host kernel it boots up its own so what does this difference between Docker and virtual machine actually mean so first of all the size of Docker images are much smaller because they just have to implement one layer so Docker images are usually couple of megabytes uh virtual machine images on the other hand can be couple of gigabytes large a second one is the speed so you can run and start Docker containers much faster than the VMS because they every time you start them you have they have to put the operating system kernel and the applications on top of it the third difference is compatibility so you can run a virtual machine image of any operating system on any other operating system host but you can't do that with Docker so what is the problem exactly let's say you have a Windows operating system with a kernel and some applications and you want to run a Linux based Docker image on that Windows host the problem here is that a Linux based Docker image might not be compatiable with the windows kernel and this is actually true for the windows versions below 10 and also for the older Mac versions which if you have seen how to install Docker on different operating systems you see that the first step is to check whether your host can actually run Docker natively which basically means is the kernel compatible with the docker images so in that case a workaround is that you install a technology called Docker toolbox which abstracts away the kernel to make it possible for your host to run different Docker images so in this video I will show you how to install Docker on different operating systems the installation will differ not only based on the operating system but also the version of that operating system so you can actually watch this video selectively depending on which OS and the version of that OS you have I will show you how to find out which installation step applies to you in the before installing section which is the first one so once you find that out you can actually directly skip to that part of the video where I explained that into details I will put the minute locations of each part in the description part of the video and also I will put all the links that I use in the video in the description um so that you can easily access them also if you have any questions during the video or if you get stuck installing the docker on your system please post your question or problem in the comment section so that I can um get back to you and help you proceed or maybe someone from the community will uh so with that said let's let's dive right into it so if you want to install Docker you can actually Google it and you get an official documentation of Docker um it's important to note that there are two additions of Docker there is a community and Enterprise additions um for us to begin with Community Edition will be just fine in the docker Community Edition uh tab there there's a list of operating systems and distributions in order to install docker so for example if we start with Mac we can click in here and we see the documentation of how to install it on Mech which is actually one of the easiest but we'll see some other ones as well so before you install Docker on your Mac or Windows computer there are prerequisites to be considered so for mac and windows there has to be some criteria of the operating system and the hardware met in order to support running Docker if you have Mech go through the system requirements to see if your U Mech version is actually supporting Docker if you have Windows then you can go to the windows Tab and look at the system requirements there or what to know before you install for example one thing to note is that Docker natively runs only on Windows 10 so if you have a Windows version Which is less than 10 then Docker cannot run natively on your computer so if your computer doesn't meet the requirements to run Docker there is a workaround for that which is called Docker toolbox instead of Docker you basically just have to install a Docker toolbox that will become a sort of a bridge between your operating system and the docker and that will enable you to run Docker on your leg Legacy computer so if that applies to you then skip ahead in this video to the part where I explain how to install Docker toolbox on Mac and on windows so let's install Docker for Mac as you see here there are two um channels that you can download the binaries from or the application from we will go with the stable Channel and other things to can see if you have an older version of Mech either software or the hardware please go through the system requirements to see if you can actually install Docker so here there is a detailed description of what make version you need um to be able to run Docker and also you need at least four gab of RAM and by installing Docker you will actually have the whole package of it which is a Docker engine uh which is important or which is necessary to run the docker containers on your laptop the docker command line client which will enable you to execute some Docker commands Docker compose if you don't know it yet don't worry about it but it's just technology to orchestrate if you have multiple containers um and some other stuff that we're not going to need in this tutorial but you will have everything in a package installed so go ahead and download the stable version well I already have Docker installed from The Edge channel so I won't be installing it again but it shouldn't matter because the steps of installation are the same for both so once the docker DMG file is downloaded you just double click on it and it will pop up this window just drag the docker whale app into the applications and it will be installed on your Mach as the next step you will see Docker installed in your applications so you can just go ahead and start it so as you see the docker sign or icon is starting here if you click on it you see the status that Docker is running and you can configure some preferences and check the docker version and so on and if you want to stop Docker or quit it on your Mech you can just do it from here um an important maybe interesting note here is that if let's say you download or install Docker and you have uh more than one accounts on your laptop you will actually get some errors or conflicts if you run Docker at the same time or multiple accounts so what I do for example is that if I switch to another account where I'm also going to need Docker I quit it from here and then I start it from other account so that I don't get any errors so that might be something you need to consider if you use multiple accounts so let's see how to install Ducker for Windows the first step as I mentioned before is to go to the before you install section and to see that your operating system and your computer meets all the criteria to run Docker natively so if you're installing Docker for the first time don't worry about most of these parts like Docker toolbox and Docker machine there are two things that are important one is to double check that your windows version is compatible for Docker and the second one is to have virtualization enabled virtualization is by default always enable abled um other than you manually disabled it so if you're unsure then you can check it by going to the task manager performance CPU Tab and here you can see the status of the virtualization so once you have checked that and made sure that these two prerequisites are met then actually you can scroll up and download the windows installer for from the stable Channel once they install installer is downloaded you can just click on it and follow the installation wizard to install Docker for Windows once the installation is completed you have to explicitly start Docker because it's not going to start automatically so for that you can just go and search for the docker for Windows app on your windows just click on it and you will see the docker whale icon um starting and if you click on that icon you can actually see the status that says stalker is now up and running so this is basically it for the installation now let's see how to install Docker on different Linux distributions and this is where things get a little bit more complicated so first of all you see that in this menu on the on the left you see that for different Linux distributions the installation steps will differ but also for example if we just click on auntu for the guide you can see that in the prerequisites section there is also differentiation between the versions of the same Linux distribution and there may be some even more complicated scenarios where the combination of the version of the distribution and the architecture it's running in um also makes some difference into how to set up Docker on that specific environment because of that I can't go through a Docker installation process of every Linux environment because there are just too many combinations so instead what we'll do is just go through a general overview of the steps and configuration process to get Docker running on your Linux environment and you can just adjust it then for your specific setup so these are some general steps to follow in order to install Docker on your Linux Linux environment first of all all you have to go through the operating system requirements part on the relevant Linux distribution um that applies for you a second step in the documentation to is to uninstall old versions however if it's the first time you installing Docker then you don't have to worry about that you also don't have to worry about the supported storage drivers and you can skip ahead to the part of installing Docker Community Edition so for any Linux distribution here the steps will be or the options for installing Docker will be the same so first option is basically to set up a repository and download the docker from and install it from the docker repository um the second option is to install the packages manually however I wouldn't recommend it and I think the documentation doesn't recommend it either because then you'll have to do a lot of steps of the installation and the maintenance of the versions manually so I wouldn't do that the third one is just for the testing purposes it may be enough for the development purposes as well but I would still not do it which is basically just downloading some automated scripts that will install and setup Docker on your Linux environment however again I wouldn't go with it I would actually just do the first option which is just download Lo in the docker from the repository so in order to install Docker using the first option which is downloading it from the docker repositories you have two main steps so the first one is to set up the repository uh which differs a little bit depending on which distribution you have and then install the docker CE from that repository so from abunto and Debian the steps for setting up the repository are generally just updating your app package then setting up an https connection with the repository and adding the docker's official gpg key which only aono and dbn need you don't have to do this um steps for SOS and Fedora they just have to install the required packages and the last step uh for setting up the repository is basically setting up the stable repository of Docker which we saw previously on the overview that there are two channels which is a stable and Edge here you always have to set up the stable repository optionally you can also set up the edge repository but I'll just do uh stable this time and here also something to notice depending on architecture you have to actually set it or you have to set that as a parameter when you set up the repository so if you have for example a different architecture you can use those steps to display the correct command for it and um I guess that applies to other Linux distributions as well like for example here you also have the second tab where you see a separate command for it so these steps should actually um set up the repository so that as a Next Step you can then install the docker C from those repositories so installing Docker from the setup repository is actually pretty straightforward the steps are same for or similar to all the distributions basically just update the app package and then you just say install Docker CE so this command will just download the latest Docker version if you want to install a specific one which you will need to do in a production environment then you can just uh provide a version like like this to just say Docker minus C equals some specific versions and using this command you can actually look up what versions are available in that repository that you just and with this command actually Docker will be installed um on your Linux environment and then you can just verify using PSE sudo Docker run hello world which is this demo image of Docker you can verify that Docker is running and this will start hello world Docker container on your environment so as I mentioned previously for environments um that do not support running Docker natively there is an workaround which is called Docker toolbox so Docker toolbox is basically an installer for Docker environment setup on those systems so this is how to install uh Docker toolbox on your Mac um this is the whole package that comes with the installation of Docker toolbox which is basically the docker command line Docker machine Docker compose basically all the packages that we saw in the native installation and in on top of that you also get the Oracle VM virtual box so in order to install the docker toolbox it's actually pretty straightforward on this website you can go to the toolbox releases where we have all the leas of latest releases you just take the uh latest release and here you see two assets this one is for Windows obviously and you just download the package for mac and once it's downloaded you just click on it and go through the installation wizard leave all the options by default as they are do not change anything and after the installation you can just validate that the installation is successful and you can actually run Docker so so after seeing the installation was successful screen just go and look up in your launch pad dock quick start terminal and once you open it you should be able to run uh Docker commands and you can just try Docker run hello world which should just start up or bring up um this hello world Docker container on your environment so now let's see how to install Docker toolbox on Windows here see that you get the whole package of Docker Technologies with a toolbox which are basically the same package which you get on the uh Native Docker installation and on top of that you get Oracle VM virtual box which is the tool that enables Docker to run on an older system so before you install Docker tool books you have to make sure that you meet some of the preconditions number one you have to make sure your Windows system supports virtualization and that virtualization must be enabled otherwise Docker Docker won't start so depending on which Windows version you have looking up or checking the virtualization status will be different so I just suggest you Google it and look it up of how to find the virtualization status to see that it's enabled once you have that checked also make sure that your Windows operating system is 64 bits so if those two criteria are met then you can go ahead and install the Locker toolbox the place where you see the releases or the release artifacts is toolbox releases link here which I have open so it's basically a list of the releases you just take the latest one which has two artifacts this is the one for Windows you just download this executable file click on it and go through the installation wizard once the installation is completed there are just couple of steps here you can verify that Docker was installed or the toolbox was installed by just looking up the docker quick start terminal on your windows that app must be installed and once you click on it and open it you should be able to run Docker commands in the terminal so the basic Docker command that you can test will be Docker run hello world which will just fetch this basic uh Docker container from the public registry and run it on your computer if that command is successful it means that Docker was successfully installed on your computer and now you can proceed with the tutorial so in this video um I'm going to show you some basic Docker commands at the beginning I'm going to explain what the difference between container and images because that's something a lot of people confuse then very quickly go through version and tag and then show you a demo of how to use the basic Docker commands um commands that will be enough to pull an image locally to start a container to configure a container and even debug the container so with that said let's get started so what is the difference between container and image mostly people use those terms interchangeably but actually there is a fine difference between the two to see theoretically container is just the part of a container runtime so container is the running environment for an image so as you see in this graphic the application image that runs the application could be postgress redis some other application needs let's say a file system where it can save the log files or where it can store some configuration files it also needs some environmental configuration like environmental variables and so on so all of this environmental stuff are provided by container and container also has a Port that is binded to it uh which makes it possible to talk to the application which is running inside of a container and of course it should be noted here that the file system is virtual in container so the container has its own abstraction of an operating system including the file system and the environment which is of course different from the file system and environment of the host machine so in order to see the difference between container and image in action let's head over to the docker Hub and find for example a rice image another thing is that dockerhub all the artifacts that are in the docker Hub are images so we're not talking about containers here all of these things are images Docker official image so we're going to go ahead and pull a rad image out of the doah Hub to my laptop so you see the different layers of the image are downloaded and this will take a couple of minutes so once the download is complete I can check all the existing images on my laptop using Docker images command so I see I have two images radi and postgress with text image IDs and so on another important aspect of images is that they have texts or versions so for example if we go back to the docker Hub each one each image that you look up in the docker Hub uh will have any different versions the latest is always the one that you get when you don't specify the version of course if you have a dependency on a specific version you can actually choose the version you want and specified and you can select one from here so this is what you see here the tag is basically the version of the image so I just downloaded the latest and I can also see the size of the image so now to this point we have only worked with images there is no container involved and there is no redish running so now let's say I need red running so that my application can connect to it I'll have to create a container of that redice image that will make it possible to connect to the redis application and I can do it by running the redis image so if I say Docker Run Red this will actually start the image in a container so as I said before container is a running environment of an image so now if I open a new tab and do Docker PS I will get status of all the running Docker containers so I can see the container redis is running with a container ID based on the image of redis and some other information about it for example the port that it's running on and so on so as you see here the docker run redis command will start the redis container in the terminal um in an attached mode so for example if I were to terminate this with the control C you see that red application stops and the container will be stopped as well so if I do Docker PS again I see that no container is running so there is an option for Docker run command that make makes it able makes it possible to run the container in a detached mode and that is minus D so if I do dock run minus D redis I will just get the ID of the container as an output and the container will stop running so if we check again Docker PS I see the container with the ID starting with 838 which is the same thing here is running so this is how you can start it in the detached mode now for example if you would want to restart a container because I don't know some uh the application crashed inside or some error happened so you want to restart it you would need the doc container ID so just the first part of it not the whole string and you can simply say Docker stop ID of the container and that will stop the docker container nothing running if you want to start it again you can use the same ID to start again so let's say you stop Docker container at the end of the day you go home you come back the next day open your laptop and you want to restart the stopped container right so if you do Docker PS there is uh the output is empty you don't see any containers so what you can do alternative to just looking up your history command line history is you can do Docker PS minus a which will show you all the containers which uh are running or not running so here you see the container ID again and you can restart it okay so let's try another thing let's say you have two parallel applications that both use redish but in different versions so you would need two redish containers with different image versions running on your laptop right at different times maybe or at the same time so here we have the latest one which is radius 56 and let's head over to the dockerhub and select uh version let's say you need version 4 o so remember the first time that we downloaded the redis image we did Docker pull redis um however if you run Docker if you use Docker run with redice image and the tech which was 4.0 it will pull the image and start the container right away after it so it does two commands basically in one so it's Docker pole that Docker start in one one command so if I do this it says it can't find the image locally so it goes and pulls the image from the repository to my laptop and again we see some layers are downloaded and the container is started right away and now if I do Docker PS you see that I have two radices running so this is where it gets interesting now how do you actually use any container that you just started so in this output we you also see the ports section which specifies on which Port the container is listening to the incoming requests so both containers open the same port which is what was specified in the image so in the logs of the container you can see the information running mode stand loone Port 6379 so how does that actually work and how do we not have conflicts while both are running on the same port so to explain that let's head over to our slide and see how this works as you know container is just the virtual environment running on your host and you can have multiple containers running simultaneously on your host which is your laptop PC whatever you working on and your laptop has certain ports available that you can open for certain applications so how it works is that you need to create a so-called binding between a port that your laptop your host machine has and the container so for example in the first container part here you see container is listening on Port 5000 and you bind your laptops Port 5,000 to that containers now you will have conflict if you open two 5,000 ports on your host because you will get a message the port is already bound or is already in use you can do that um however you can have two containers as you see the second and third containers are both listening on Port 3000 which is absolutely okay as long as you bind them to two different ports from your host machine so once the port binding between the host and the container is already done you can actually connect to the running container using the port of the host so in this example URI you would have some app Local Host and then a port of the host and the host then will know how to forward the request to The Container using the port binding so if we head back here you see that containers have their ports and they're both running on the same one however we haven't made any binding between my laptop's port and the container port and because of that the container is basically unreachable by any application so I won't be able to use it so the way we actually do that is by specifying The Binding of the ports during the Run command so I'm going to break this and check that there is just one container running now I'm going to stop the other one as well so we can start the menu okay so we see both containers are here so now we want to start them using The Binding between the host and the container ports but again we have two Rices so we need to bind them to two different ports on my laptop so the way to do it is you do Docker run and you specify with minus P the port of the host that's the first one so let's go with 6,000 it doesn't really matter in this case and the second one is the port that you're binding this two which is the container Port so we know the container Port will be 6379 and this is where we bind our so my laptop's port 60002 and if I do this I forgot ra here so and now if I do Docker PS let's actually clean this Docker PS again here you see The Binding here all right so your laptops 6,000 Port is bound to the containers 6 37 9 so now let's do another thing and let's start it in a detached mode so like this let's check again it's running again and now I want to start the second container let's clear this again so here you see it created a bunch of containers because uh when I specified different options with the port binding it actually created new containers um that's why you see a couple of more here so I'm going to copy the image name with the tag for uh. o minus P so for example if I were to do this now and I would try to run the other redis the second redis container with the same port on my laptop I would get an error saying Port is already allocated so I can do 60001 and run it again I'll run it in detached mode so that I'm see port and if I go go over here and say Docker PS I see that I have two different radi versions running both of them bound to different ports on my laptop and the containers themselves listening to request on the same port so so far we have seen a couple of basic Docker commands we have seen Docker pull which pulls the image from the repository to local environment we also saw run which basically combines Docker pull and Docker start pulls the image if it's not locally available and then starts it right away then we saw Docker start and Docker stop which makes it possible to restart a container if um you made some changes and you want to um create a new version which makes possible to restart a container if you need to um we also saw docu run with options the one option that we saw was D minus D which is detach so you can run the container in DET detached mode so you can use terminal again minus P allows you to bind Port of your host to The Container so very important to remember minus P then comes the port of your host and then comes the port of your um container whatever it might be we also saw doap PS doap PS minus a which basically gives you all the containers no matter if they're running currently or not we also saw Docker images which gives you all the images that you have um locally so for example if after a couple of months you decide to clean up your space and get rid of some stale images you can actually check them check the list and then go through them and uh delete them you can do the same with stale Docker containers that you don't use anymore or you don't need anymore you can also get rid of them so the final part of the docker basic commands are commands for troubleshooting which are very very useful if something goes wrong in the container you want to see the logs of the container or you want to actually get inside of container get the terminal and execute some commands on it so let's see Docker PS we have two containers running right now we don't have any out we don't see any locks here so let's say something um happens your application cannot connect to redies and you don't know what's happening so ideally you would want to see what logs radi container is producing right the way to do that is very easy you just say Docker locks and you specify the container ID and you see the locks you can also do the lock locks if you don't want to uh remember the container ID or to Docker PS all the time you can remember the name of the container and you can get the logs using the name so a little side note here um as we're talking about the names of the containers so here as you see when a container is created you just get some random name like this so you can name your containers as you want um using another option of the docker run which might be pretty useful sometimes if you don't want to work with the container IDs and you just want to remember the names um or if you just want to differentiate between the containers so for example let's create a new container from r4.0 image using a different name that we choose so I'm going to stop this container and I'm going to create a new one from the same image so let's run it in the detached mode Let's Open the port th000 1 2 6 3 7 9 and give the name to the container and let's call since it's the older um version let's call it red older and we need to specify the image so remember this will create a new container since we're running the docker one command again so if we execute this and check again we see the redis 4.0 image based container is created which is um a fresh new you can see in it created and the name is red is older and we can do the same for the other container so that we kind of know which uh container is what so I'll stop this one and I will use the same command here this will be the latest and I will call this radius latest and since find another Port so I'm going to run it and let's see so here I have two containers running now I know R is older R is latest so for example if the older version has some problems I can just do logs R is older and I can get get my locks so another very useful command in debugging is Docker exit so what we can do with Docker exit is we can actually get the terminal of a running container so let's check again we have two containers running and let's say there is some problem with the latest ready latest container and I want to get a terminal of that container and to maybe navigate a directory inside check uh the lock file or maybe check the configuration file or uh print out the environmental variables um whatever so in order to do that we use Docker exit command with minus t which stands for interactive terminal then I specify the container ID and I say in so I get the B and here you see that the the cursor changed so I'm in inside of the container as a root user and here if I say LS okay the data is empty I can also print out in which directory I am I can go to home directory see what's there um so I have my virtual file system inside of a container and here I can um navigate the different directories and I can check stuff I can also print all the environmental variables to see that something is set correctly um and do all kinds of stuff here and this could be really useful if you have a container with some complex configuration or if for example you are running your own application that you wrote in a container H and you have some complex configuration there um or some kind of setup and you want to validate that everything um is correctly set in order to exit the terminal you just do exit and you're out you can also do the same using the name again if you don't want to work with the IDS and you just want to remember the names of the container to make it easier you can do it with the name as well same thing since most of the container images are based on some lightweight Linux distributions you wouldn't have much of their Linux um commands or applications installed here for example you wouldn't have a curl or some other stuff so you were a little bit more limited in that sense so you can execute a lot of stuff from the docker containers for most of the debugging work um it should be actually enough so the final part to review the difference between Docker run and Docker start which might be confusing for some people let's revisit them so basically Docker run is where you create a new container from an image so Docker run will take an image with a specific version or just latest right as option or as an attribute with Docker start you not working with images but rather with containers so for example um as we saw Docker run has a lot of options you specify with minus D and minus P the port binding and then you have this name of the container and all this stuff so basically you tell Docker at the beginning what kind of container with what attributes name and so on to create from a specific image but once the container is created and you can see that using a con uh the command so for example here the last ones that we created and if you stop it and you want to restart it you just need to use the command do start and specify the container ID and when you start it the container will retain all the attributes that we defined when creating the container using Docker run so Docker run is to create a new container Docker start is to restart a stopped container so once you've learned the docker basic concepts and understood how it works uh it's important to see how Docker is actually used in practice so in software development workflow you will know you have this uh classical steps of development and continuous delivery or continuous integration uh and then eventually gets deployed on some environment right could be a test environment develop environment so it's important to see how Docker actually integrates in all those steps so in the next couple of videos I'm going to concentrate exactly on that so we're going to see some overview of the flow and then we're going to zoom in on different parts and see how Docker is actually used in those individual steps so let's consider a simplified scenario where you are developing a JavaScript application on your laptop right on your local development environment your JavaScript application uses a mongodb database and instead of installing it on your laptop you download a Docker container from the docker Hub so you connect your JavaScript application with the mongodb and you start developing so now let's say you develop the application first version of the application locally and now you want to test it or you want to deploy it on the uh development environment where a tester in your team is going to test it so you commit your JavaScript application in git or in some other version control system uh that will trigger a continuous um integration a Jenkins build or whatever you have configured and Jenkins build will produce artifacts from your application so first it will build your JavaScript application and then create a Docker image out of that JavaScript artifact right so what happens to this Docker image once it gets created by Jenkins build it gets pushed to a private Docker repository so usually in a company you would have a private repository because you don't want other people to have access to your image images so you push it there and now as a Next Step could be configured on Jenkins or some other scripts or tools that Docker image has to be deployed on a development server so you have a development server that pulls the image from the private repository your JavaScript application image and then pulls the mongodb that your JavaScript application depends on from a dockerhub and now you have two containers one your custom container and a publicly available mongodb container running on dev server and they talk to each other you have to configure it of course they talk and communicate to each other and run as an app so now if a tester for example or another developer logs in to a Dev server they be they will be able to test the application so this is a simplified workflow how Brer will work in a real life development process in the next videos I'm going to show you Hands-On demo of how to actually do all this in practice so in this video we are going to look at some practical example of how to use Docker in a local development process so what we're going to do is a simple demo of a JavaScript and nodejs application in the back end to simulate the local development process and then we're going to connect it to a Docker container with a mongodb database in it so let's get started so in this video we're going to see how to work with Docker containers When developing applications so the first step will be is we're going to develop a very simple UI backend uh application using JavaScript very simple HTML structure and nodejs in the back end and in order to integrate all of this in the database we are going to use a Docker container of a mongodb database and um also to make working with the mongodb much easier so we don't have to execute commands in in the terminal we're going to deploy a Docker container of a UI which is called the Express where we can see the database structure and all the updates that our application is making in the database so this development setup should give you an idea of um how Docker containers are actually used in development process so I've already prepared some very simple JavaScript application um so in order to see the code basically we have this index HTML that is very simple code and we have some JavaScript here and we're using nodejs backend that just serves that index HTML file and listens on Port 3000 so we have the server running here in the back end and we have the UI that looks like this so basically it's just a user profile page with some user information and user can edit their profile so if I for example change the name here um and if I change the email address and do changes like this I can save my profile and I have my updates here um however if I refresh the page of course the changes will be lost because it's just JavaScript no JS so there is no persistent compon component in this application so in order to have that which is actually how real life applications work you'll know that you need to integrate the application with a database so using that example I will try to Showcase you how you can actually use the docker containers to make the development process Easier by just pulling one of the databases and attaching it or connecting it to the application so in this case we're going to go with the mongodb application and uh in addition to mongodb contain container we're going to also deploy a mongodb UI which is its own container it's called Express where we can manage or see the database insights and updates from our application much easier so now let's see how that all works so in order to get started let's go to dockerhub and find our uh mongodb image so here let's go to  and we have mongodb here actually and the Express which is another dock container that we're going to use for the UI so first let's pull the mongodb official image so I I already have mongodb latest so pulling doesn't take longer on my laptop but you're going to need a couple of seconds probably and the next one we're going to pull is the docker Express which I also have I believe so let's see yes it's also fast so if I check locally I have mongod TB and Express images so the next step is to run both and Express uh containers in order to make the mongod DB database available for our application and also to connect the  Express with the mongod DB container so let's do the connection between those two first in order to do that we have to understand another Docker concept Docker Network so how it works is that Docker creates its isolated Docker Network where the containers are running in so so when I deploy two containers in the same docken network in this case  and Express they can talk to each other using just the container name without Local Host port number Etc just the container name because they're in the same network and the applications that run outside of doer like our nodejs which just runs from node server is going to connect to them from outside or from the host using Local Host and the port number so later when we package our application into its own Docker image what we're going to have is again Docker network with mongodb container Express container and we're going to have a nodejs application which we wrote including the index HTML and JavaScript for front end in its own doc container and it's going to connect to the mongodb and the browser which is running on the host but outside the docker network is going to connect to our JavaScript application again using host name and the port number so Docker by default already provides some networks so if we say Docker Network LS we can already see these autogenerated Docker networks so we have four of them with different names and the drivers we're not going to go into details here but what we're going to do is create its own network for the mongodb and the Express and we're going to call it Network so let's do this right away going to say Docker Network create and we are going to call it Network so now if I do dock Network LS again I see my docken network has been created so now in order to make our m B container and the Express container run in this Network we have to provide this network option when we run the container in the docker run command so let's start with the so we all know that Docker run is the command to start a container from an image right so we have Docker run which is the basic Docker run command however in this case we want to specify a couple of things um as you learned from the previous videos you have to specify something called Port so we need to open a port of mongodb the default Port of mongodb is 27,7 so we will take that Port actually for both host and container so will run at this port inside of a container and we open the same port on the host so that will take care of the port then we will run it in a detach mode in addition to that there are a couple of things that we can specify when starting up the container and these are environmental variables of the mongot TB let's see um in the official image description you actually have couple of documentation about how to use the image which is very helpful to kind of understand what kind of configuration you can uh apply to it here you see some environmental variables so basically on Startup you can Define what the root username and the password will be which is very um handy because we're going to need those two for the express to connect to the and you can also specify the init database we're just going to provide the username and password because we can create the database from the Express UI later so let's do that and the way you can specify the environmental variables you can actually see here as well is by just let's copy this one so here you say environmental variable that's what the minus E Flex stands for and root username we'll say it's admin and another variable which is the password will be just password so in this way we can actually overwrite what the default username and password will be so two more things that we need to configure in this uh command our container name because we're going to need that container name to connect with the Express so we'll call this one  DB let's say and another one we need is the network that we created which was called  Network so in order to make this command a little bit more structured do it on multiple lines so let's see so it's more readable so basically all the options or all these flags that we set um to go one more time through them it it's going to start in detached mode uh we are opening the port on the host um username and password that we want mongodb to use uh in the startup process we're going to rewrite or overwrite the name of the container and this container is going to run in a Network and this should actually start the container okay so if you want to see whether it was successful we can log the container and see what's happening inside so as we see was started and everything actually looks good waiting for connections on Port 27,7 okay so now let's start Express we want Express to connect to the running mongod DB be container on Startup and here we have an example of how to run it and here we have the list of environmental variables that we can configure so let's quickly look at them username password we don't need them however we need the admin username and admin password of the motb this is actually what we overwrote with admin and password so we're going to use them because Express will need some username password to authenticate with the mongodb and to connect it the port is by default the correct one so we don't need to change that um and this is an important part this is the mongodb server right so basically this is the container name that Express will use to connect to the docker and because they running in the same network only because of that this configuration will work if I didn't if I hadn't specify the network then I could have I could specify the name correct name here of the container but it wouldn't work so with that said let's actually create the docker run command for Express as well so let's clear the history and let's start so again we run it in detached mode and let's see what parameters we need so first of all Port let's say what is the default Port that the express runs on that's 80 81 so we'll take that so basically it's going to run on our laptop on Port 8081 the next option would be these two and remember environmental variables need to be specified with minus E and this is the username of mongodb admin which is admin because we specified it when we started the mongodb container this is the password let's set this one as well don't forget the network minus minus net Network we have the name we can also call it Express and let's see what else we might need here yes this is important one um and our container name let's actually see it again toer PS the one running it's called mongodb that's the container name and this is what we need to specify here so I'm going to write this here and finally the image is called Express so I'm just going to copy this one here and that is it so basically with these commands do Express should be able to connect to the mongod Deb container so let's run it and just to make sure let's log the container and see what's happening there waiting for mongodb welcome to  express it looks like it connected successfully um it says here database connected and the Express is available at Port 8081 so let's check the Express out at the Port 881 so actually let's close these tabs we don't need them anymore and here if I say Local Host 881 I should be able to see the manga Express so these are the databases that already exist by default in or which are created on Startup and using the UI we can create our own database as we saw previously we could have specified an environmental variable init DB on mongodb Startup and that would have created a new database however it doesn't matter we will just create a database name here so we will call it user um account database so let's create one and now we can actually use it or connect to this database from node.js so let's see how that works so now we have the mongodb container and the Express container running so let's check that we have both of them we'll have to connect nodejs with the database so the way to do it is usually to give a protocol of the database and the URI and the URI for a mongodb database would be Local Host and the port that it's accessible at I already went ahead and prepared the code for node.js so basically we are going to use a client here which is a node module and using that client we are connecting to the mongodb database so this is the protocol the host and the port that we just saw that the mongodb is listening at and username and password of the root user of mongodb of course usually you wouldn't put the password here or not use an admin or root uh username password to connect to a database but this is for just the demonstration purposes and these are username and password that we set as environmental variables when we created the docker mongodb container so let's check that so this is the mongodb uh container command and this is the username root and root password that we specified and this is what we are going to use in the code as I said for demonstration purposes I will write the password directly here so then we connect to the database um so I also went ahead and in the Express user account database and inside that I created collection which is like a table in my SQL world called users so here I connect to user account database and I query The Collection users and this is a get request so I'm just fetching something from the database and this is update uh request same thing I connect to the database using the same URI and the database name and I update or insert something in the collection so now let's see how all that works so let's head over to the UI so in the users collection there is no data it's empty so we're going to refresh it and edit the data so I'm going to write here some and update and refresh we see that a new insert was made so this is the update profile section here so all this was executed it connected to the mongodb and now we have one entry which is email coding name that we changed so if I'm going to refresh it now I fetched the newly inserted user data in the UI and I displayed it here and also if you want to see what the mongod container actually logs during this process we can actually look at the logs so I'm going to say docks and log using the container ID so let's say if I wanted to see just the last part of it because I want to see what the last activity was I can also let's clear this and I can also do tail so I can just display the the last part of it or if I want it I could also stream the logs so I'll clear this again and I'll say stream the logs so I want have to do dockal logs all the time so if I make a line here for example to Mark the last logs I can refresh it let's make some other changes let's change it to own and save profile so I'm going to see some activity here as well so these connections are new and it also says received client metadata and this is where the nodejs request comes in with the nodejs and its version and at the end of each communication there is an end connection because we end the database connection at the end so we see that also in the logs so if for example something wasn't working properly you could always check them in the logs here so with that I have a fully functional JavaScript nodejs application which has a persistence in the mongodb database and we also have uh UI both of them running in a Docker container so this would be uh somehow an realistic example of how local development using Docker containers would look like so in the last video we created and started two Docker containers mongodb and Mong Express and these are the commands that we used to make it happen right the first we created a network where these two containers can can talk to each other using just the container name and no host Port Etc is necessary for that um and then we actually ran two Docker run commands with all the options and environmental variables Etc set now uh this way of starting containers all the time is a little bit tedious and you don't want to execute these run commands all the time on the command line terminal especially if you have a bunch of Docker containers to run you probably want to automate it or just make it a little bit easier and there's a tool that's that makes running multiple Docker containers with all this configuration much easier than with Docker run commands and that is Docker compose if you already know Docker comp post and you are wondering why is it useful and what it actually does then bear with me in the next slide I'm going to explain that so this is a Docker run command of the mongodb that we executed previously so basically with Docker compose file what we can do is we can take the whole command with its configuration and map it into a file so that we have a structured commands so if you have have let's say 10 Docker containers that you want to run for your application and they all need to talk to each other and interact with each other you can basically write all the Run commands for each container in a structured way in the docker compos and we'll see how that structure actually looks like so on the right side in the docker compos example the first two tags are always there right version three that's the latest version of the compose Docker compose and then we have the services this is where the container list goes so the first one is mongodb and that Maps actually to The Container name right this is going to be a part of container name when Docker creates a container out of this configuration blueprint the next one is actually the image right so we need to know which image that container is going to be built from and of course you can specify a version tag here um next to the name the next one one is Port so we can also specify which ports is going to open first one is on the host and the second one after the colum is on the container so the port mapping is there and of course the environmental variables can be also mapped in the docker compose and this is how actually the structure of Docker compose looks like for one specific commands let's actually see the second container command for Express that we executed it and how to map that so now again we have a Docker run command for Express and let's see how we can map it into a Ducker compose so as I said services will list the containers that we want to create and again names Express will map map to The Container name the next one will be the image again you can add a tag here if you want to be um have a specific one then you have the ports 80 to 8080 and then you have all the environmental variables again under the attribute environment and this is how the docker compose will look like so basically Docker compos is just a structured way to contain very normal common Docker commands and of course it's it's going to be easier for you to edit the the file uh if you want to change some variables s if you want to change the ports or if you want to add some new options to the Run command so to say and maybe you already noticed the network configuration is not there in the docker compost so this Network that we created we don't have to do it in a Docker compose we go to the next slide because we have the same concept here we have containers that will talk to each other using just the container name so what docker compose will do is actually take care of creating a common Network for these containers so we don't have to create the network and specify in which network these containers will run in and we're going to see that in action right away so let's actually create a Docker compost file so I'm going to paste all my contents here and this is exactly what we saw on the slide and I'm going to save it as a yl and we see the highlighting as well be very aware of the indentation they have to be correct so this is the list of all the containers on the same level and then each container has its configuration inside that so now compared to Docker run commands it will be very easy for me to go here and change these environment variables or add some new configuration options Etc so here again for demonstration we actually save the docker compose in the code so it's part of the application code so now that we have a Docker compose file the question is how do I use it or how do I start the containers using that so let's go to the command line and start Docker containers using this Docker compose file so the way to use it is using Docker compose command now if you've installed Docker on your laptop it usually gets installed with the docker compose packaged inside so you should have both Docker and Docker compose commands installed as a package so Docker compos command takes an argument which is the file so I'm going to specify which file I want to execute and in my case it's called yl and and at the end I want to say what I want to do with this file in this case the command is up which will start all the containers which are in the yl so let's actually check before that there there are no containers running so I don't have anything running here and I'm going to start those two containers okay so there are couple of interesting things here in this output so let's scroll all the way up so we've talked about Docker Network and how we created our own network at the beginning to run the containers inside and I said the docker compos takes care of it and here we see the output where it actually created a network called my app default this is the name of the network and it's going to run those two containers these are actually the names of the containers the do compos created this is what we specified and it just added prefix and suffix to it and it created those two containers uh in that Network so if I actually go here and do Docker Network LS I see the my app default is here so that's one important thing another one is that logs of both containers actually mixed because we are starting both at the the same time as you see the Express has to wait for mongod DB to start because it needs to establish a connection so we here see the locks so mongodb is starting we still get connection refus because it's not started uh completely and somewhere here when mongodb is started and listening for connections  Express is able to connect to it so this is something that you can also do with Docker compose uh when you have two containers that where one depends on another one starting you can actually configure this waiting logic in the docker compos okay so now let's see actually that the docker containers are running so we have both of them here you see the container names that Docker compos gave them and one thing here to note is that the Express actually started on Port 8081 inside the container so we can see that here so we are opening a port 8080 on my laptop that actually forwards the request to container at port 8080 one just so that you don't get confused because it was 8080 on the slides so now that we have restarted the containers let's actually check the first one which is Express so it's running on 8080 in the previous example we created a database and the collection which is gone because we restarted the container this is actually another very important concept of containers to understand when you restart a container everything that you configured in that container's application is gone so data is lost so to say there is no data persistence in the containers itself of course that is very inconvenient you want to have some persistence especially when you're working with a database and there is a concept we're going to learn later called volumes uh that makes it possible to have persistency between the container restarts okay so let's actually create the database again because we need it and inside the database we had actually users collection let's create that one as well and that is empty now let's actually start our application and there you go so now if I were to modify this one here and update I should see the updated entry here so the connectivity with mongodb works so now what do I do if I want to stop those containers of course I could go there and say Docker stop and I can provide all the IDS as we did previously or with Docker compose it's actually easier I can do Docker compose again specify the file and instead of up I'm going to say down and that will go through all the containers and shut them all and in addition to remove removing the containers or stopping them removing the containers it also removes the network so the next time we restarted it's going to recreate so let's actually check that the network LS that default my app default Network case G and when I do up see it gets recreated that should give you a good idea of what dock compose is and how to use it the next we're going to build our own Docker image from our node.js JavaScript application so now let's consider the following scenario you have developed an application feature you have tested it and now you're ready to deploy it right to deploy it your application should be packaged into its own Docker container so this means that we are going to build an Docker image from our JavaScript no JS backend application and prepare it to be deployed on some environment to review this diagram that we saw at the beginning of the tutorial so we have developed a JavaScript application we have used the mongodb docker container to use it and now it's time to commit it to the git right so in this case we're going to simulate this steps on the local environment but still I'm going to show you how these steps actually work so after commit you have a continuous integration that runs so the question is what does actually Jenkins do with this application when it builds the application so the JavaScript application using the npm build Etc it packages it then in a Docker image and then pushes it into a Docker repository so we're going to actually simulate what Jenkins does with their application and how it actually packages it into a Docker image on the local environment so I'm going to do all this on my laptop but it's basically the same thing that Jenkins will do and then on later step we can actually push the built image into a Docker repository in order to build a Docker image from an application we basically have to copy the contents of that application into the docker file it could be an artifact that we built in our case we just have three files so we're going to copy them directly in the image and we're going to configure it and in order to do that we're going to use a blueprint for building images which is called a Docker file so let's actually see what is a Docker file and how it actually looks like so as I mentioned Docker file is a blueprint for creating Docker images a syntax of a Docker file is super simple so the first line of every Docker file is from image so whatever image you building you always want to base it on another image in our case we have a JavaScript application with no JS backend so we are going to need node inside of our container so that it can run our node application instead of basing it on a Linux Alpine or some other lower level image because then we would have to install node ourselves on it so we are taking a ready node image and in order to see that let's actually go to dockerhub and search node here and here you see there is a ready node image that we can base our own image from so here we have a lot of different text so we can actually use one specific one or we can just go with the latest if we don't specify any take so what that actually means basing our own image on a node image is that we're going to have node installed inside of our image so when we start a container and we actually get a terminal of the container we can see that node command is available because there's node installed there this is what from node actually gives us so the next one is we can configure environmental variables inside our Docker file now as you know we have already done this in the using the docker on commands or the docker compos so this will be just an alternative to defining environmental variables in a Docker compos for example I would say it's better to define the environmental variables externally in a Docker compos file because if something changes you can actually overwrite it you can change the docker compos file and override it instead of rebuilding the image but this is an option so this n command basically would translate to setting the environment of variables inside of the image environment the next one is run so all these Capital case words that you see from in and run they're basically part of a syntax of a Docker file so using run basically you can execute any kind of Linux commands so you see make directory is a Linux command that creat creates home slome app um directory very important to note here this directory is going to leave inside of a container so when I start a container from this image the slh home/ app directory will be created inside of the container and not on my laptop not on the host so all these commands that you have in Docker file will apply to The Container environment none of them will be affecting my host environment or my laptop environment so with run basically you can execute any Linux commands that you want so that's probably one of the most used ones and we also have a copy command now you would probably ask I can execute a copy command a Linux copy command using run yes you could but the difference here is that as I said all these commands in run for example they apply to they get executed in inside of the container the copy command that you see here it actually uh executes on the host and you see the first parameter is Dot and the second parameter is slome app so source and the Target so I can copy files that I have on my host inside of that container image because if I were to execute run CP Source destination that that command would execute inside of the docker container but I have the files that I want to copy on my host in the last one so from and CMD or command is always part of Docker file what command does is basically executes an entrypoint Linux command so this line with the command actually translates to node server JS so remember here we actually do node server JS so we start a node server with the nodejs this is exactly what it does but inside of the container so once we copy our server JS and other files inside of a container we can then execute node server.js and we are able to do it because we are basing on the Node image that already has node pre-installed and we are going to see all this inaction so another question here what is the difference between run and CMD because I could also say run node server.js the difference again is that CMD is an entry point command so you can have multiple run commands with different Linux commands but CMD is just one and that marks for Docker file that this is the command that you want to execute as an entry point so that basically runs the server and that's it so now let's actually create the docker file and just like the docker compos file Docker file is part of the application code so I'm going to create a new file here and I'm going to paste here the contents so again we're basing off Note image and actually instead of just having the latest node I'm going to specify a node version so I'm going to take 13 minus Alpine so all these that you see here are Texs so I can use any of them as a TCH so I'm going to say 13 minus Alpine like this so this is going to be a specific node image that I'm going to use as my base image let's actually stop here for a moment and take a little bit of a deep dive on this line so since we saw that Docker file is a blueprint for any Docker image that should actually mean that every docker ER image that there is on dockerhub should be built on its own Docker file right so if we actually go to Let's actually look at one of the latest versions which is 13 minus Alpine and let's click inside and as you see this specific image has its own Docker file and here as you see we have the same from that we just saw and this is what this node official image is based of which is a base image Alpine 3.10 right and then we have this environmental variable set and all these Linux commands using run and some other environmental variable and you have this entry point which is a script so you can also execute the whole shell script instead of separate commands and you have this final Command right so you don't have to understand any of this I just want to demonstrate that every image is based of another base image right so in order to actually visually comprehend how this layer stacking works with images let's consider this simplified visualization so our own image that we're building app with a version 1.0 is going to be based on a node image with a specific version that's why we're going to specify from node 13 Alpine and the node 13 Alpine image as we saw in the docker file is based on Alpine base image with a version 3.10 that's why it specifies from Alpine 3.10 so Alpine is a lightweight base image then we install node on top of it and then we install our own application on top of it and basically this is how all the images are built so now let's go back and complete our Docker file so we have the from specified we have the environmental variables specified and in just a second we're going to actually see these commands in action so let's copy that and this is also very important Docker file has to be called exactly like that you can just give it any name it is always called Docker file starting with a capital D and that's it it's a simple text file so just save it like this and here you even see the highlighting and this Docker icon so now that we have a Docker file ready let's see how to actually use it so how do we build an image out of it so in order to build an image using the docker file we have to provide two parameters one is we want to give our image a name in the tag just like all the other images have so we are going to do it using minus t so we are going to call our image my app and we're going to give it a tag of 1.0 the tag could be anything you can even call it actually version one it wouldn't matter so we're going to do 1 point0 and the second required parameter actually is a location of a Docker file because we want to tell Docker here build an image using this Docker file and in this case because we're in the same fold as the docker file we're just going to say current directory when we execute this we're going to see that image is built and this is an ID of the image that was built because I already have node 13 Alpine on my laptop this just use the the one I have lying around locally for you if it's the first time you will actually see that it's pulling node image from the dockerhub so now with the docker images I can actually see that my image is here it says created two days ago I don't know why but anyways so I have the image name which is this one here and I have the name of the image and the tag of the image so if we go back to this diagram that we saw in the review so basically we've got all these steps or we have simulated some of the steps we've built the JavaScript application using a Docker containers and one once the the application is ready let's say we made the commit and we we just simulated what Jenkins server also does so what Jenkins does is actually it takes the docker file that we create so we have to commit the docker file into the repository with the code and Jenkins will then build a Docker image based on the docker file and what is an important Point here is that usually you don't develop long you are in the team so other people might want to have access to that upto-date image of your application that you developed it could be a tester maybe who wants to pull that image and test it locally or you want that image to be deployed on a development server right and in order to do that you have to actually share the image so it is pushed into a Docker repository and from there either people can take it for example a tester maybe want to download the image from there and test it locally or a development server can actually pull it from there so let's actually just run a container I'm just going to say Docker run the image name obviously and a tag like this and in this case I'm not going to specify any other options because we just want to see what's going on inside of the container so I'm just going to run it okay so the problem is that it can't find the server JS file which is actually logical because we are not telling it to look in the correct directory so since we are copying all the resources in this home/ home/ app directory server JS is going to be there as well and this is another topic whenever you adjust a Docker file you have to rebuild an image because the old image cannot be over written so to say so what I'm going to do now is actually I'm going to delete the one that I built so I'm going to I'm going to actually take the image this is how you delete an image but I can delete it because as as it says the docker is used by a stopped container so if I do Docker PS minus a actually let's crap to my app like this I have to first delete the container so this is how you delete a container it's doer RM and once I've deleted the container I can delete an image so the image deletion is RMI like this so if I do images now I see my image isn't there okay so we' have modified the docker file so let's rebuild it now so Docker build again and let's see the image is here so let's start it again so it's my app 1.0 and let's run it and as you see the problem is fixed app listening on Port 3000 so our app is running so this one here I app 1.0 first of all we can see the logs here like this we see that the EP is listening on Port 3000 we know everything is cool to actually just get a little bit more inside let's enter the containers or let's get the terminal the command line terminal of the container and look around there so I'm going to say Docker exit interactive terminal I'm going to specify the container ID in like this and since bin bash doesn't work we can actually try shell so this is something you will also encounter because some containers do not have bash installed so we'll have to connect using bin sh so one of them has to work always so let's see in which directory we are so we are in the root directory and we see our virtual file system there and as you see the cursor changed as well so that means we're inside of a container so now let's actually check some of the stuff so first of all we specified some environmental variables here in the docker file and this means that these environmental variables have to be set inside the docker environment so if we do inv we actually see the mongodb username this one here and mongodb password are set and there are some other environmental variables automatically said we don't care about them so another thing we can check is this directory because remember because with this line we actually created this slome app directory so let's see slome Slash app and as you can see the directory was created and with the next Land We copied everything in the current folder so if we actually go and see reveal in finder so this is where the docker file resides so basically we copied everything that is inside of this directory so all of these into the Container now we don't actually need to have Docker file and Docker compose and uh this other stuff in here because the only thing we need are the JavaScript files or if we build a JavaScript application artifact just the artifact so let's go ahead and improve that so what I'm going to do is I'm going to create an app directory and I'm going to copy just the files that I'm going to need for starting an application inside of a container so I'm going to take those and the images as well so all these are just external ones we don't need them there and images the index HTML file package Jon server JS and node modules are inside of app so what we can do it now is instead of copying the whole directory where where the docker file is I just want to copy all the contents of EP folder so what I'm going to do is I'm going to say copy all the app contents and again because we modified a Docker file we need to recreate the image in order to leave the docker Container Terminal can actually exit so now we are on the host again so if I do Docker images again I have to first delete the container and then image but in order to delete the container I have to first stop it so now I can remove the container and now I can actually remove the image that the container was based on and let's check again so let's ex execute that build command again so now that we have the image built let's actually run it so I'm going to say my app 1.0 and of course I could have executed with a minus D in a detached mode it doesn't matter now and if I do a Docker PS I see my um image container running and now let's actually enter the container G so it and as we learned it was in sh and again we're going to see the home app and here we just have the contents of app directory so no unnecessary Docker file Docker compose Etc files which is actually how it's supposed to be or as I said because I just had a couple of files here I copied all of them but usually if you have this huge application you would want to compress them and package them into an artifact and then copy that artifact into a Docker image container okay but as I said this was just for demonstration purposes because I just wanted to show you um how you can actually start it as a container and how it should to look inside and in this case we improved a couple of things but usually we would start this container from a Docker compose as well together with all the other Docker images that the application uses and it's also doesn't have any ports open so uh this is just for demonstration purposes so in this video we're going to create a private repository for Docker images on AWS ECR there are many more options for Docker Registries among them Nexus and digital ocean so we're going to see how to create a registry there build and tag an image so that we can push them into that repository and in order to push the images into a private repository you first have to log into that repository so let's see how it all works so the first step is to actually create a private repository for Docker it's also called Docker registry in this case we're going to do it on AWS so let's see so I already have an account on AWS so the service that we're going to use is called elastic container registry so ECR doer container registry and because I don't have a repository there yet I am presenting with the screen so in order to create a repository click on get started and here we have a repository name and we're actually going to name it the name of the application that we have so I'm actually going to name it my app this is the domain of the registry from AWS and this is the repository name which is the same as my image name and don't worry about the other stuff right now and just create a repository it's as simple as that now one thing I think specific to Amazon container service is that here you create a Docker repository per image so you don't have a repository where you have where you can actually push multiple images of different applications but rather for each image you have its own repository and you go inside of the repository here it's empty now but what you store in a repository are the different tags or different versions of the same image so this is how the Amazon container service actually works there are other dep Docker Registries that work differently for example you create a repository and you can just throw all of your container images inside of that one repository so I think this is more or less specific for AWS so anyways we have repository which is called my app and let's actually see how we can push the image that we have locally so actually check that once more so we want to push this image here into that repository so how do we do that if you click on this one the view push commands will be highlighted this is different for each registry but basically what you need to do in order to push an image into repository are two things one you have to log in into the private repository because you have to authenticate yourself so if you are pushing from your local laptop or local environment you have to tell that private reposit hey I have access to it this is my credentials if a Docker image is built and pushed from a Jenkins server then you have to give Jenkins credentials to login into the repository so Docker login is always the first step that you need to do so here AWS actually provides a Docker login command for AWS so it doesn't say Docker login but in the background it uses one so I'm going to execute this login command for AWS Docker repository uh so in the background it uses actually Docker login to authenticate so in order to be able to execute this you need to have AWS command line interface and the credentials configured for it so if you don't I'm going to put a link to the guide of how to do that in the description I have configured both of them so I can execute this command and I should be logged in successfully to the docker repository so now I have authenticated myself to the docker repository here so I'm able to push the image that I have locally to that repository but before I do that there is one step I need to do so I've already built my image so that's fine and now I have to tag my image and if this command here looks a little bit too complicated for you or too strange let's actually go and look at image naming Concepts in Docker repositories so this is the naming in Docker Registries this is how it works the first part of the image name the image full name is the registry domain so that is the host Port Etc slash repository or image name and the tag now you may be wondering every time we were pulling an image out of dockerhub we actually never had this complex long name of the image right so when we were pulling an image it looked like this Docker pole 4.2 the thing is with dockerhub we're actually able to pull an image with a short hand without having to specify a registry domain but this command here is actually a shorthand for this command what actually gets executed in the background when we say Docker pole is Docker pole the registry domain so docker.io library is a registry domain then you have the image name and then you have the tag so because we we were working with dockerhub we were able to use a shortcut so to say in a private Registries we can just skip that part because there is no default configuration for it so in our case in AWS ECR what we going to do is we're going to execute Docker pull the full registry domain of the repository this is what we're going to see here and a tag and this is how AWS just generates the docker registry name that's why we see this long image name with the tag here and we have to tag our image like this so let's go back and take a look at our images our image that we built again and under the repository it says my app now the problem is we can just push an image with this name because when we say Docker push my app like this Docker wouldn't know to which repository we're trying to push by default it will actually assume we're trying to push to dockerhub but it's not going to work obviously because we want to push it to AWS so in order to tell Docker you know what I want this image to be pushed to AWS repository with the name my app we have to tag the image so we have to include that information in the name of the image and that is why we have to tag the image tag basically means that we are renaming our image to include the repository domain or address and the name okay and AWS already gives us the command that we can execute we want to use the specific version so I'm going to use 1.0 in both so what this is going to do is it's going to rename this is what tech does my app 1.0 this is what we have locally this is what the name is to this one here so let's execute that and let's see what the outcome is and as you see it took the image that we had it made a copy and renamed it into this one so these two are identical images they're just called in a different way and now when we go back we see the docker push command so basically this thing here is a same as Docker push and name of the image and the take so this push command will tell Docker you know what I want you to take the image with tag 1.0 and push it into a repository at this address so when I execute this command see the push command will actually push those layers of the docker image one by one this is the same thing as when we're pulling it we also pulled the images layer by layer and this is what happens in the reverse Direction when we push it so this is also going to take a little bit great so the push command was complete and we should be able to see that image in the AWS repository now so if I go inside see I have image tag with 1.0 this is our tag here and push the time the digest which is the unique hash of that image and the image URI which is again the name of the image using the the repository address image name or repository name in this case and the tag so now let's say I made some changes in the docker file you know let's say I renamed this home slome to node app like this or what could also lead to need to recreate an image is obviously when I change something in the code right so you know let's say I were to delete this line because I don't want to console log to be in my code and now I have a different version of the application where I have changes in the application so now I want to have those changes in the new Docker image so now let's build a new Docker image out of it so Docker build let's call it my app with a version 1.1 and a path to a Docker file and now I have a second image which is called my app with version 1.1 so now again because I want to push this to repository I have to rename it to include the repository address inside of it so I'm going to do Docker tag the first parameter is the image that I want to rename and the second one is the name of that image a new name so it's going to be the same as the previous one because the repository name and the address is the same remember we have one repository for one image but for different versions so we're building a version 1.1 so it should end up in the same repository so now here we have 1.1 and if I tag that and images I have a second image here so I'm going to copy that and I'm going to do Docker build and do not forget that tag it's important because because it's part of the complete name sorry it's Docker push and now some of the layers that I already pushed are there only the ones that changed are being rep pushed sort of say and also know that I just have to do Docker login once at the beginning and then I can pull and push images uh from this repository as many times as I want so do login is done once so now that is complete let's actually reload this so my repository now has two versions so this is pretty practical if you are for example testing with different versions and you want to have a history of those image Texs if you want to for example test a previous version and I think in AWS the repos each repository has a capacity of hold holding up to 1,000 uh image versions so for example my app here can have thousand different tags or of the same image okay so now going to compare it to the initial diagram that we saw for this complete flow let's actually switch back to it quickly so here what we did is basically simulate how Jenkins would push an image to a Docker repository so whatever we did on our lap top will be the same commands executed on a Docker on the Jenkins server and again Jenkins user or Jenkins server user has to have credentials to the docker repository to execute Docker login depending on the registry or repository configuration will look different and Jenkins needs to tag the image and then push it to the repository and this is how it it's done and the next step of course we need to use that image that is lying now in the repository and we're going to see how it's pulled from that repository and again we're going to do it on the local environment but it's the same thing that a development server or any other environment will actually execute so in this video we're going to see how to deploy an application that we built into a Docker image so after you package your application in a Docker image and save it in the private repository you need to somehow deploy it on a development server or integration server or whatever other environment and we're going to use Docker compose to deploy that application so let's imagine we have logged in to a development server and we want to run our image that we just push the repository so our my app image and the mongodb image uh both the database and the Express on the development server so the my app image will be pulled from private repository of AWS the in the two containers will be pulled from the docker Hub so let's see actually how that would work so usually again you have developed your application you done with it and you have created uh your own Docker image right now in order to start an application on development server you would need all the containers that make up that application environment okay so we have mongodb and Express already so what we are going to do is here we're going to add a new container in the list which is going to be our own image so let's go ahead and copy the image from our repository so let's actually use the 1.0 so again remember we said that this image name is a shortcut for having a docker.io do library SL with like a specific version so instead of that because we are pulling these images from a Docker Hub we can actually skip that repository domain in front of the images but here because we're pulling it from a private repository so if we were to specify our image like this Docker will think that our image resides on dockerhub so we try to pull it from dockerhub and of course it won't find it because we have to tell Docker go and look at this repository with this repository name and this TCH and of course in order to be able to pull this image or the docker composed to be able to pull this image the environment where you execute this Docker compost file has to be logged into a Docker repository so here as the development server has to pull the image from the repository what we would need to do on the development server is actually do a dock login before we execute the docker compose and obviously you don't need a Docker login for Docker Hub those images will be pulled freely okay so the next thing that we have to configure are the ports because obviously want to open the ports if we go back we see that our application runs on Port 3000 so the port of the container or the where the container is listening on is 3,000 and here we can open the port on the host machine so it's going to be 3,000 me to 3,000 we have actually the environment variables inside of the docker file but obviously we could have configured them in the docker compose just like this so it's an alternative so this will be a complete Docker compost file that will be used on the development server to deploy all the all the applications inside so again if we're trying to simulate a development server the first step will be to do the docker login in this case you have this on command for logging into the AWS Repository which I have done already in this terminal so the next step is to have the docker compos file available on this development server because we have to execute the docker compost file because we're simulating here the way I would do it is I'm going to create a yl file in the current directory where I am I'm going to copy this and save so now I have my ml file and now we can start all three containers using Docker compose command minus f up and here we see that app started on 3000 and mongodb and express started as well so let's check again now and here we saw that database is lost every time we recreate a container and of course that's not good and we're going to learn how to preserve the database data between the container restarts using Docker volumes in the later tutorials because this is not an ideal State okay so now that we have database in a collection let's actually refresh and our application works as well let's check awesome so application works let's refresh this one as well and there is actually one thing that I needed to change in the code to connect nodejs with mongodb so let's actually go and look at that these are my handlers you know nodejs where I connect to the mongodb database so the uis are the same and what I changed here is that it was a local host before so instead of Local Host I changed it to mongodb because this actually is a name of the container or of the service that we specify here so this actually leads back to the docker Network and how Docker compos takes care of it is that in the URI or when I connect one application in a Docker container with another one in another Docker container I don't have to use this uh Local Host anymore actually I wouldn't even need to use the port even because I have all that information so the host name and the port number in that configuration so my application will be able to connect to mongodb using the service name and because of that you don't have to specify here a local host and a port number which is actually even more Advantage when you consider using Docker containers to run all of your applic ations because it makes the connectivity between them even more easier and that actually concludes the this uh diagram that we saw previously we have gone through all of the steps where we saw uh how to develop uh a JavaScript application locally with Docker containers then we saw how to build them into an image uh just like a continuous integration build will do it then we push it into a private repository and we simulated a development server where we pulled the image from U private repository and the other images from the dockerhub where we started the whole application setup with our uh own application and the two applications uh using a Docker compose which is how you would deploy an application on a Dev server so that now testers or other developers will be able to um access the development server and actually try out the applic that you just deployed or you can also use it for demos so in this video we're going to learn about Docker volumes in a nutal Docker volumes are used for data persistence in Docker so for example if you have databases or other stateful applications you would want to use Docker volumes for that so what are the specific use cases when you need Docker volumes so a container runs on a host let's say we have a database container and a container has a virtual file system where the data is usually stored but here there is no persistence so if I were to remove the container or stop it and restart the container then the data in this virtual file system is gone and it starts from a fresh state which is obviously not very practical because I want to save the changes that my application is making in the database and that's where I need Docker volumes so what are the docker volumes exactly so on a host we have a physical file system right and the way volumes work is that we plug the physical file system path it could be a folder a directory and we plug it into the containers file system path so in simple terms a directory a folder on a host file system is mounted in into a directory or folder in the virtual file system of Docker so what happens is that when a container writes to its file system it gets replicated or automatically written on the host file system directory and vice versa so if I were to change something on the host file system it automatically appears in the container as well so that's why when a container restarts even if it starts from a fresh state in its own virtual file system it gets the data automatically from the from the host because the data is still there and that's how data is populated on a startup of a container every time you restart now there are different types of Docker volumes and so different ways of creating them usually the way to create Docker volumes is using Docker run command so in the docker run there is an option called minus V and this is where we Define the connection or the reference between the host directory and the container directory and this type of volume definition is called host volume and the main characteristic of this one is that you decide where on the host file system that reference is made so which folder on the host file system you mount into the Container so the second type is where you create a volume just by referencing the container directory so you don't specify which uh directory on the host should be mounted but that's taking care of the docker itself so that directory is first of all automatically created by Docker under the VAR leap Docker volumes so for each container there will be a folder generated that gets mounted automatically to the container and this type of volumes are called Anonymous volumes because you don't have a reference to this automatically generated folder basically you just have to know the path and the third volume type is actually an improvement of the anonymous volumes and it specifies the name of the folder on the host file system and the name is up to you it's just to reference the directory and that type of volumes are called named volumes so in this case compared to Anonymous volumes you H you can actually reference that volume just by name so you don't have to know exactly the path so from these three types the mostly used one and the one that you should be using using in production is actually the named volumes because there are additional benefits to letting Docker actually manage those uh volume directories on the host now they showed how to create Docker volumes using Docker run commands but if you're using Docker compose it's actually the same so this actually shows how to use volume definitions in a Docker compose and this is pretty much the same as in Docker run commands so we have volumes attribute and underneath you define your volume definition just like you would in this minus V option and here we use a named volume so db- data will be the name reference name that you can just think of could be anything and in vly MySQL data is the path in the container then you may have some other containers and at the end so on the same level as the services you would actually list all the volumes that you have defined you def find a list of volumes that you want to mount into the containers so if you were to create volumes for different containers you would list them all here and on the container level then you actually Define under which path that specific volume can be mounted and the benefit of that is that you can actually mount a reference of the same uh folder on a host to more than one containers and that would be beneficial if those containers need to share the data in this case you would Mount the same volume name or reference to two different containers and you can mount them into different path inside of the container even in this video we are going to look at Docker volumes in practice and this is a simple nodejs mongodb application uh that we're going to attach the volume to so that we don't lose the database data every time we restart start the mongodb container so let's head over to the console and I'm going to start the mongodb with the docker compose so this is how the docker compose looks like we're going to start the mongod TB uh container and the Express container so that we have a UI to it so I'm going to execute the docker compost which is going to start mongodb and the Express so when it started I'm going to check that Express is running on port 8080 and here we see just the default databases so these are just created by default on Startup um and we're going to create our own one for the node.js application and inside of that database I'm going to create users collection so these are the prerequisites or these are the things that my node.js applic ation needs so this one here in order to connect to the database might DB this is what we just created ITB and inside of that to the collection called users so let's start the application which is running on Port 3000 so here and this is our app which when I edit something here we'll write the changes to my database now if I were to restart now the mongodb container I would lose all this data so because of that we're going to use named volumes inside of the docker compos file to persist all this data in the mongodb let's head over to dock compose so the first step is to Define what volumes I'm going to be using in any of my containers and I'm going to do that on the services level so here I Define the list of all the volumes that I'm going to need in any of my containers and since we need data persistency for mongod TB we're going to create uh data volume here now this is going to be the name of the volume reference uh but we also need to provide here a driver local so the actual store storage path that we're going to see later once it's created it's is actually created by Docker itself and this is kind of an information additional information for Docker to create that physical storage on a local file system so once we have a name reference to the volume defined we can actually use it in the container so here I'm going to say volumes and here I will Define a mapping between the data volume that we have on our host and the second one will be the path inside of the mongodb container it has to be the path where mongodb explicitly persists its data so for example if you check it out online you see that the default path where mongodb stores its data is data/ dat DB and we can actually check that out so if I say docker s and go inside the container it's minus it I can actually see data DB and here is all the data that mongodb actually holds but this is of course only the container so when the container restarts the data get regenerated so nothing persists here so this is the path inside of the container not on my host that we need to reference in the volumes here so we're attaching our volume on the host to data/ dat DB inside of a container so for example for MySQL it's going to be um VAR leap MySQL for postgress it's also going to be VAR leap postris SQL SL data so each database will have its own so you have to actually find the right one so what this means is that all the data with that we just saw here all of this will be replicated on a container startup on our host on this persistent volume that we defined here and vice versa meaning when a container restarts all the data that is here will be replicated inside of that directory inside of a container so now that we have defined that let's actually restart the docum compose and restart it so once we create the data and I'm going to the collection and let's actually change this one here and update it so we have a data here so now that we have the persistent volume defined if I were to restart all these containers these data should be persisted so in the next restart I should see the database my DB collection and the entry here so let's do that I'm going to do down great so let's check see the database is here the collection is here and the entry has persisted so now let's actually see where the docker volumes are located on our local machine and that actually differs between the operating systems for example on a Windows laptop or a computer uh the path of the docker volume will be at program data Docker SL volumes the program data Docker folder actually contains all the other container information so you would see other folders in this Docker directory besides the volumes on Linux the path is actually /ar leap Docker volumes which is comparable to the windows path so this is where the docker saves all this configuration and the data and on the mech it's also the same one inside of this volumes directory you actually have a list of all the volumes that one or many containers are using and each volume has its own hash which is or which has to be unique and then slore data will actually contain all the files and all the data that is uh persisted let's head over to the command line and actually see um the volumes that we persisted for mongodb now interesting note here is that if I were to go to this path that I just showed you in the presentation which is VAR Le Docker see there is no such directory so that could be a little little bit confusing but the way it works on Mac specifically on Linux you would actually have that path directly on your host but on Mech it's a little bit different so basically what happens is that Docker for Mech application seems to uh actually create a Linux VM uh in the background and store all the docker inform or doer data about the containers and the volumes Etc inside of that vm's storage so if we execute this command here so this is actually the physical storage on my laptop that I have where all the data is stored but if I execute this command I actually get the terminal of that VM and inside here if I look I have a virtual different virtual file system and I can find that path that I showed you here so it's VAR leap Docker see so I have all this Docker information here I have the containers folder and I have volumes folder so this is the one we need sort of that actually go to the volumes and this is a list of volumes that um I have created and this is the one that came from our Docker compose right this is the name of our app this is do this is what Docker compose actually takes as the name we can actually take a look here so when it's creating these containers it depends these name as a prefix and then there is mongodb and our volume has the same pattern it has the prefix and then mongod data this is the name that we defined here so now if we look inside of that mongod data volume directory we see that underscore data this would be the anonymous volumes so basically here you don't have a name reference it's just some random uh unique ID but it's the same kind of directory as this one here the difference being that this one has a name so it's more it's easier to reference it with a name so this is an onymous volume this is a named volume but the content will be used in the same way um so here as you see in this underscore data we have all the data that mongodb uses so this will be where it gets the default databases and the changes that we make through our application inside and if I go inside of the container so remember this volume is attached to mongodb and is replicated inside of the container under path SL dat DB so if we go go inside of the container actually it here PS SL DP we'll see actually the same kind of data here so we have all this index and collection um files just like we did in this one so now whenever we make changes to our application for example we change it to SM whatever and this will make the container update its data and that will Cascade into this volumes directory that we have here so that on the next startup of a container when the SL data/ DB is totally empty it will actually populate this directory with the data from this uh persistent volume so that we will see all the data that we uh created through our application again on Startup and that's how do loer volumes work in order to end that screen session that we just started because exit doesn't work in this case uh somehow on Mac you can actually click on control a k and then just type Y and the session will be closed so when you do screen LS you should see actually it's terminating congratulations you made it till the end I hope you learned a lot and got some valuable Knowledge from this course now that you've learned all about containers and Docker technology you can start building complex applications with tens or even hundreds of containers of course these containers would need to be deployed across multiple servers in a distributed way you can imagine what overhead and headache it would be to manually manage those hundreds of containers so as a Next Step you can learn about container orchestration tools and kubernetes in particular which is the most popular tool to automate this task if you want to learn about kubernetes be sure to check out my tutorials on that topic And subscribe to my channel for more content on modern devops tools also if you want to stay connected you can follow me on social media or join the private Facebook group I would love to see you there so thank you for watching and see you in the next video",-0.017129097133874893,0.04461759328842163,0.023830732330679893,-0.0032644770108163357,-0.001700526219792664,-0.08010023087263107,0.00548302847892046,-0.0010275992099195719,-0.08222150057554245,0.06510006636381149,-0.04777625575661659,-0.04184418171644211,0.011969173327088356,-0.03916804492473602,-0.05132380127906799,-0.039628107100725174,-0.010780168697237968,0.03521112725138664,0.0311969593167305,-0.023033615201711655,-0.09443611651659012,-0.02191435918211937,-0.027147963643074036,-0.04560244455933571,-0.03533456474542618,0.04334944114089012,0.0002833644102793187,0.026747513562440872,0.03647571802139282,-0.043289486318826675,0.005490888841450214,0.018955348059535027,0.07534009963274002,-0.016385575756430626,0.04731513187289238,0.06872294098138809,0.11049849539995193,-0.04548685625195503,-0.05835777521133423,0.006271038670092821,0.005984425079077482,-0.09765658527612686,-0.03266886621713638,-0.008773328736424446,-0.004110668320208788,-0.0630059689283371,-0.037347570061683655,-0.10050376504659653,0.07072986662387848,0.04708203673362732,-0.09189090132713318,-0.09940755367279053,-0.02743857353925705,-0.03818381577730179,0.004556266125291586,0.03288727626204491,0.010536735877394676,0.07768209278583527,-0.013180901296436787,-0.07934185117483139,0.005002642050385475,-0.03607996180653572,-0.05153618007898331,0.017719857394695282,0.07380342483520508,-0.04695700854063034,-0.021101506426930428,0.09109542518854141,0.08380427211523056,-0.0097817936912179,-0.0532279796898365,-0.022307587787508965,-0.05170586705207825,-0.042656973004341125,-0.03349272534251213,-0.0301960539072752,-0.01722024381160736,0.043193552643060684,-0.04314678907394409,0.0651654601097107,-0.02118644304573536,-0.007671479135751724,-0.0212501659989357,-0.0033792706672102213,-0.07891681790351868,0.023773951455950737,-0.007926682941615582,0.018980611115694046,0.056871458888053894,-0.06847711652517319,0.08931634575128555,0.022138085216283798,0.014087545685470104,0.017848946154117584,0.05442017316818237,0.00211295741610229,-0.047460053116083145,-0.05428497493267059,-0.05206850916147232,0.05413629487156868,0.007631249725818634,-0.049832116812467575,0.028983555734157562,-0.09364064037799835,0.04017585515975952,-0.00818907655775547,-0.015997152775526047,-0.0026496087666600943,-0.011221837252378464,-0.005795454140752554,-0.03380437567830086,-0.05744512751698494,-0.06738848239183426,-0.0010278202826157212,-0.003988250158727169,0.016334136947989464,0.008947085589170456,-0.05850759148597717,0.044762980192899704,-0.020209437236189842,0.05901390314102173,-0.0008294052095152438,0.07301884144544601,-0.07187845557928085,-0.0016363189788535237,-0.014276881702244282,-0.06602109968662262,8.129297405359575e-34,0.03127104789018631,-0.06551921367645264,0.005495211575180292,0.07735895365476608,0.1524512618780136,-0.048222534358501434,0.03808867186307907,-0.009753515012562275,-0.046483736485242844,0.05512206256389618,0.034876398742198944,0.04706460237503052,-0.0569184310734272,0.06720764935016632,0.0196363627910614,-0.1299961656332016,-0.08476268500089645,-0.02323426678776741,-0.001128310221247375,-0.05455606058239937,-0.008534551598131657,-0.03555663302540779,-0.024142494425177574,-0.05963502451777458,0.09014084190130234,0.052661046385765076,0.03622543066740036,-0.05826956033706665,0.07357324659824371,0.002396203111857176,-0.008433453738689423,-0.02866688370704651,-0.057039469480514526,-0.01634354330599308,0.04094388708472252,0.024284472689032555,0.024376392364501953,0.03363731876015663,-0.03541342914104462,-0.024735527113080025,-0.058879952877759933,-0.08376843482255936,0.02239072509109974,-0.00034750712802633643,0.024853583425283432,-0.05649295076727867,0.041089706122875214,-0.033581655472517014,0.06984642893075943,0.0693100094795227,0.0016577205387875438,-0.10607612878084183,-0.07856619358062744,0.06224432587623596,-0.04087856411933899,-0.0036934318486601114,-0.030407022684812546,-0.012262699194252491,-0.06259147077798843,0.02465910091996193,-0.12149346619844437,0.049670711159706116,0.014047829434275627,-0.02531077340245247,-0.023660751059651375,0.03779550641775131,-0.03742653504014015,0.07443957775831223,0.037274640053510666,0.0834396481513977,-0.03565351292490959,0.05358133837580681,0.08163274824619293,0.01114462036639452,-0.01737142726778984,0.025591179728507996,-0.026153527200222015,-0.03715691342949867,-0.03618504852056503,-0.012762808240950108,-0.029899446293711662,0.042794715613126755,0.01594185270369053,0.06610022485256195,-0.09376168251037598,-0.06599139422178268,0.086381696164608,0.049722444266080856,0.005525505635887384,0.01714996062219143,0.041681092232465744,0.029688237234950066,-0.008862731046974659,-0.03841728717088699,-0.036443427205085754,-2.9368152294890705e-33,0.01880255714058876,-0.0054082185961306095,-0.07910224050283432,0.05421948805451393,0.0564880296587944,0.013610810041427612,0.09055542945861816,0.02770826406776905,0.05337497591972351,-0.09060629457235336,-0.095209039747715,0.0890192836523056,0.028086427599191666,0.09608688950538635,-0.08023534715175629,-0.004173428285866976,-0.02133041061460972,-0.006664234213531017,0.011143840849399567,-0.02027943544089794,0.019227389246225357,0.046681903302669525,-0.002865196904167533,-0.042451102286577225,-0.07118236273527145,-0.03918488696217537,0.12202233076095581,-0.014788250438869,-0.01800938881933689,0.024142742156982422,0.04167041555047035,0.01148939784616232,0.05204183980822563,0.04396967962384224,0.027682526037096977,0.06856546550989151,0.05238119885325432,0.1023094654083252,-0.04811781272292137,-0.04889407753944397,0.06274139136075974,-0.08184409886598587,-0.003569243010133505,-0.07309021055698395,-0.02650364302098751,-0.05794128403067589,0.021790144965052605,0.036046359688043594,-0.08728867769241333,0.02073015086352825,-0.04981875792145729,-0.09317773580551147,0.0753956288099289,-0.0418594628572464,0.013519234023988247,-0.07768286019563675,0.05057191103696823,-0.022150155156850815,0.0013376206625252962,0.08334943652153015,0.04922366514801979,-0.02531328611075878,0.0022487386595457792,0.060048140585422516,-0.04471251741051674,-0.06762780249118805,-0.06979984045028687,0.011816788464784622,-0.09013645350933075,0.07033039629459381,-0.027916958555579185,-0.005469533149152994,0.023665711283683777,-0.008852219209074974,0.05394062399864197,-0.038433242589235306,-0.026718182489275932,0.04815312847495079,0.0312360767275095,-0.010146789252758026,0.028066998347640038,0.021102016791701317,-0.009581273421645164,-0.04872831702232361,-0.006928225513547659,0.03377237915992737,0.12279046326875687,0.021502727642655373,0.02913416363298893,-0.027385301887989044,-0.02066713385283947,0.0292939692735672,0.0024752728641033173,0.10961219668388367,-0.01639956794679165,-2.2223161977308337e-8,0.013816382735967636,0.012849003076553345,-0.009891792200505733,0.03706248477101326,-0.01238239649683237,0.038705334067344666,0.0596638098359108,0.026316745206713676,-0.044679347425699234,0.00022564854589290917,-0.041530609130859375,-0.053853314369916916,-0.0551774762570858,0.0036543167661875486,0.044795162975788116,0.12048202753067017,-0.012391977943480015,0.03174412623047829,-0.011760569177567959,-0.08635186403989792,-0.005258405115455389,0.0327727384865284,0.04631849005818367,-0.06263215839862823,0.0008751036366447806,0.06652123481035233,0.0808437392115593,0.07627177238464355,0.0284560639411211,-0.03666698560118675,0.06617232412099838,0.030632322654128075,-0.04114389792084694,-0.013875909149646759,0.031941186636686325,0.004534424282610416,-0.045607924461364746,-0.01739072985947132,0.0002474587527103722,-0.01281324215233326,-0.11527176201343536,-0.006400833837687969,0.003996755927801132,-0.07893992215394974,-0.05614021047949791,0.06343017518520355,-0.01654992066323757,-0.006737887393683195,-0.07034508883953094,0.04007343947887421,0.053236622363328934,-0.0242073405534029,0.02057751454412937,-0.01687663421034813,0.10514871031045914,0.1318388134241104,0.02887696400284767,0.06572682410478592,0.055686552077531815,0.03390558436512947,-0.01761988177895546,0.15091915428638458,-0.04343359172344208,0.0872495025396347,0.0037463074550032616,0.023027878254652023,0.021417420357465744,-0.039840009063482285,0.00726383738219738,-0.058102287352085114,-0.01620299182832241,0.005173627287149429,-0.022880949079990387,0.05326258763670921,-0.026069816201925278,-0.06357879936695099,0.036152757704257965,-0.09206743538379669,-0.0008366872789338231,-0.08297693729400635,0.0538318008184433,-0.005849512759596109,-0.03855625540018082,0.012651066295802593,-0.06001459062099457,0.025590995326638222,-0.02435022033751011,-0.014009651727974415,-0.1262512356042862,0.12111680954694748,-0.0006358925020322204,-0.001522911828942597,0.005072310566902161,-0.0714033842086792,0.016555551439523697,0.01612086221575737,0.07228196412324905,0.03835413232445717,-0.026203835383057594,0.04102499037981033,0.051444053649902344,-0.06949262320995331,-0.05287925526499748,0.0073090847581624985,-0.02791433595120907,-0.09810154139995575,-0.09250223636627197,-0.06613288074731827,0.03032567910850048,-0.018992900848388672,0.0020129953045397997,-0.09097076952457428,0.03639158979058266,0.05890993773937225,-0.03717882186174393,-0.03789665177464485,0.00727813970297575,-0.0074638728983700275,-0.06704235076904297,0.03212118148803711,0.04416869208216667,0.046866077929735184,-0.008618062362074852,-0.060766566544771194,-0.031248897314071655,-0.00013270947965793312,-0.02747265435755253,0.006305599585175514,0.08210676163434982,-0.05399959906935692,0.016989005729556084,0.06363698095083237,0.1408344805240631,-0.05069351568818092,-0.012311219237744808,0.00005275401781545952,-0.008035475388169289,-0.03270561248064041,-0.08867553621530533,-0.032193269580602646,-0.015529926866292953,0.03677969425916672,-0.009416320361196995,0.06374131888151169,0.03288988769054413,0.07182592153549194,-0.05555613711476326,-0.0142186488956213,-0.10994621366262436,-0.02120078355073929,0.017881350591778755,0.048472706228494644,0.025340387597680092,-0.034111108630895615,0.05892585963010788,-0.009627672843635082,0.003615587716922164,0.02071358636021614,0.15010367333889008,0.019307337701320648,-0.017459142953157425,-0.026358431205153465,0.05305412411689758,-0.0156271792948246,0.020209936425089836,-0.03199456259608269,0.012578452005982399,-0.06630003452301025,0.056370656937360764,0.04476167634129524,-0.040092356503009796,0.006618141196668148,0.013276897370815277,-0.04207447171211243,-0.009863896295428276,-0.040077678859233856,-0.06785719096660614,0.02247709035873413,0.0524112768471241,0.024294449016451836,0.00591388251632452,-0.08956169337034225,0.02062937431037426,-0.004904840607196093,0.05682796984910965,-0.0009691844461485744,0.11671830713748932,-0.0623626634478569,-0.028521383181214333,-0.005323627032339573,-0.09527357667684555,4.688332117928011e-33,0.007935366593301296,-0.05750414356589317,0.01153139304369688,0.08583255857229233,0.1452033966779709,0.011935465037822723,-0.0007562622195109725,0.060697514563798904,-0.042145706713199615,0.028286369517445564,0.0746518149971962,0.012265223078429699,0.019323259592056274,0.06867220997810364,0.02051229029893875,-0.08922350406646729,-0.07109774649143219,-0.05383830517530441,-0.025907360017299652,0.02781987190246582,0.0012464557075873017,-0.05080819129943848,0.019983194768428802,-0.02109362930059433,0.10245467722415924,-0.04538951441645622,0.024934686720371246,-0.041008587926626205,0.014475981704890728,-0.004496746230870485,-0.007205110043287277,0.013879708014428616,-0.04438801854848862,0.013846505433321,-0.0008543918374925852,0.011865859851241112,0.00585889583453536,0.0620180182158947,-0.06926709413528442,-0.046417057514190674,-0.008473851718008518,-0.03854323923587799,-0.012250993400812149,0.023294154554605484,0.02172200195491314,-0.02313023805618286,0.04707462713122368,-0.04961753264069557,0.04248058795928955,0.024591676890850067,0.00235342956148088,-0.142039492726326,-0.03064369224011898,0.03433068096637726,-0.011492257937788963,0.006615031510591507,0.016513308510184288,-0.08096016198396683,-0.09033624827861786,0.019223196431994438,-0.12057935446500778,0.004850772209465504,-0.0007057443726807833,0.03624166175723076,-0.05543828383088112,0.008479929529130459,-0.03227424994111061,0.06238892301917076,0.028690211474895477,0.019126450642943382,-0.038267966359853745,0.02822784148156643,0.07607227563858032,0.004397514741867781,0.031014416366815567,0.06432701647281647,0.021608496084809303,-0.015792209655046463,-0.03767221421003342,0.09437484294176102,-0.01906786486506462,0.05778275057673454,-0.025262169539928436,0.023602459579706192,-0.0774090588092804,-0.036418408155441284,0.02712574601173401,0.04962969571352005,0.06514135003089905,0.012109487317502499,0.05125948041677475,0.020438561215996742,-0.017287658527493477,0.005533221177756786,-0.009941146709024906,-7.404284632196044e-33,0.012958717532455921,0.07938829064369202,-0.08667959272861481,0.05748097598552704,0.04727325588464737,0.016374049708247185,0.032956305891275406,0.010366519913077354,0.006806459743529558,-0.09456829726696014,-0.12048572301864624,0.02958393469452858,0.01892777346074581,0.08698403835296631,-0.11616799980401993,0.003597264876589179,0.020461436361074448,-0.06192244961857796,0.011671618558466434,-0.008280513808131218,-0.006801934912800789,0.01872682385146618,0.001623673364520073,-0.07618158310651779,-0.07305750995874405,-0.037278421223163605,0.03189055994153023,-0.03432043641805649,0.025328539311885834,0.006117242854088545,0.07134249806404114,-0.008383126929402351,0.06448976695537567,0.011951614171266556,0.015548678115010262,0.03295476734638214,0.01279542688280344,0.03061424009501934,0.0063087427988648415,-0.09649727493524551,0.0667266994714737,-0.0871194526553154,-0.012782097794115543,-0.08657755702733994,-0.03095427341759205,-0.03133096918463707,-0.050432346761226654,0.05045725777745247,-0.06472762674093246,-0.02583044022321701,-0.07375761866569519,-0.017335575073957443,-0.00930002797394991,0.023446962237358093,0.007629133760929108,-0.07234860956668854,-0.0008140970021486282,0.022084560245275497,-0.05224913731217384,0.06334883719682693,0.05081052705645561,-0.015004408545792103,0.06879030913114548,0.04262495040893555,-0.0789455696940422,-0.07820340245962143,-0.023503584787249565,0.008804839104413986,-0.0698319673538208,0.02282050997018814,-0.06598445773124695,-0.01713487133383751,-0.039792150259017944,0.011126677505671978,0.02594817616045475,-0.03270506113767624,-0.01447262242436409,-0.06534459441900253,0.0159992054104805,0.0032595826778560877,0.02728189155459404,-0.007122326176613569,-0.032914046198129654,-0.033146876841783524,-0.07069078832864761,0.1251886934041977,0.07070710510015488,-0.014957661740481853,0.023070046678185463,-0.0019310555653646588,-0.03787793964147568,-0.07450088113546371,-0.036219917237758636,0.05151486024260521,-0.025138437747955322,-5.24934229417795e-8,0.008040759712457657,-0.04204661771655083,0.026553507894277573,-0.01922854222357273,-0.007578724063932896,0.054476574063301086,0.032620303332805634,0.06821031123399734,0.015037641860544682,0.0431094728410244,-0.05714255943894386,-0.029416922479867935,-0.08845578879117966,-0.007720624562352896,0.03496300056576729,0.1619579792022705,0.06884796917438507,0.06508926302194595,0.020098162814974785,-0.06144563481211662,0.0008968528709374368,-0.007867894135415554,0.02196638099849224,0.01945284567773342,-0.03433741629123688,0.03061896376311779,0.09201038628816605,0.017119772732257843,-0.059723544865846634,-0.02239196002483368,0.07320695370435715,0.009640004485845566,-0.05492442473769188,0.050323452800512314,0.03971954435110092,-0.06751769781112671,-0.07042137533426285,-0.07839226722717285,0.0525502972304821,-0.007500470150262117,-0.07337184250354767,-0.03769494220614433,-0.005328004248440266,-0.05708092451095581,-0.03620757535099983,-0.029536409303545952,-0.03763289377093315,-0.03778960183262825,-0.054642122238874435,0.08721725642681122,0.08487348258495331,0.015232140198349953,-0.002243287395685911,0.10042670369148254,0.11647437512874603,0.10410911589860916,0.042747270315885544,-0.02032577060163021,0.10217806696891785,0.05629909783601761,-0.015769371762871742,0.11227995902299881,-0.0174238421022892,0.06288175284862518
R8_veQiYBjI,2020-10-08T15:03:01Z,GitHub Actions Tutorial - Basic Concepts and CI/CD Pipeline with Docker,in this GitHub actions tutorial we'll go through the following topics first I'm going to explain what GitHub actions actually is and we're going to look at specific developer workflow use cases that you can automate with GitHub actions after that I will explain the basic concepts of GitHub actions including the events and actions and workflow and how GitHub actions actually automates these workflows using these components having understood what GitHub action solves and how it makes it possible I will go through the most common workflow which is CI CD pipeline I will explain shortly why it's not just another CI CD tool or what are the benefits of GitHub actions CI CD pipeline finally we will go through a Hands-On demo where I explain the syntax of GitHub action's workflow file and then we will go through a complete CI pipeline setup with my example Java Gradle project which we will build into a Docker image and push to a private Docker repository on Docker hub so what is GitHub actions GitHub actions is a platform to automate developer workflows so software development workflows many of the tutorials that I've seen seem to convey that GitHub actions is a CI CD platform but as I said it's for automating developer workflows and CI CD pipeline is just one of the many workflows that you can automate with GitHub actions so now we need to understand what are those developer workflows in other words what is that the developers typically do that is so time consuming or air prone or just tedious that it needs automation so let's go through a couple of specific examples now as you probably already know GitHub is a platform for a lot of Open Source projects so a lot of developers who have developed their own libraries for Java or some other programming language they can host their projects on GitHub and make them publicly available is open source projects so that the community can use those projects but also to contribute to those projects so when a team or individual developers who manage those projects can new contributors or things happen inside the repository people creating pull requests people joining in as contributors and so on they have a lot of organizational tasks to manage let's see examples of such tasks let's say you have created a library that makes it easier to work with daytime in Java so it's a Java library that you created and you have some contributors and users of that library and whenever a use of the library sees that a new release of the library has a bug or something isn't more working they can create an issue that something is not working so you have to check that issue you have to sort it is it minor is it major is it something urgent is it something that others may have also reported is it reproducible for example maybe you assign it to one of the contributors or to yourself and so on let's say one of the contributors fixes the issue and creates a pull request so that you can merge it into the next release of that Library so you look at the pull request you review the code you make sure that the issue is not reproducible anymore with the fix and you merge it into the master node so this is going to be part of the next release so to say so you want to release the next version so the people who use the library can upgrade the version where the issue is fixed so after the pull request is merged into the master Branch you want to start a pipeline a build pipeline that will test your code build your artifact and so on you also want to maybe prepare some release notes where you document and what got added in the new version and maybe also adjust the version tag or the version number so all these things are workflow examples of what you have to do as a maintainer of such repository so you can imagine the bigger the project gets and the more contributors you get and the more features and issues they fix and more pull requests they create and the more people use your project the more organizational effort it is going to be so obviously as a developer you don't want to be sitting there doing all these tedious organizational stuff you want to automate as much as possible of those management tasks so that you can also concentrate on programming and developing new features and new functionalities in the project and for that purpose GitHub actions was created so with GitHub actions every time something happens in your repository or to your repository you can configure automatic actions to get executed in response and these things that are happening in your repository or to your repository are events in the GitHub space so someone creating a pull request is an event someone creating an issue is an event someone joining as a contributor is an event or you merging that pull request into the master branch is an event also note that other applications or tools that you may have integrated into your GitHub can also produce such events that you can respond to with automatic actions so when you automate these flows basically the concept is pretty simple you listen to any such events and depending on what event happens you want a certain workflow to execute automatically so every time someone creates an issue that's an event maybe you want to automatically sort that issue maybe label it assign it to respective contributor or maybe assign it to you per default maybe categorize it and also maybe write a script or a test that will try to automatically reproduce the issue and then add some status or comment or something that says reproducible or not reproducible so all these things can be automated with actions so each small task that you automatically trigger on an event is going to be a separate action so writing a comment putting a label on an issue assigning it to someone etc those are actions and this chain of actions or these combination of actions actually make up workflow so now that we understand the basic concepts of GitHub actions let's look at a specific workflow example so obviously not everybody has an open source project on GitHub you can have your own private projects of GitHub for the application that you're developing so the most common workflow you will think of for your repository would be CI CD pipeline you commit your code the build starts it tests your code builds it into an artifact then pushes the artifact in some storage and then deploys the application on a deployment server now why is it a big deal to have just another CI CD tool well the first and obvious Advantage is that if you're already hosting your code on GitHub now you can use the same tool for CI CD pipeline as well you don't have to set up another third-party tool and manage it separately you have the integrated into your code Repository another advantage of GitHub actions that I see is that it makes it really easy to build your pipeline so the setup process of the CI CD pipeline is really easy it is actually meant to be a tool for developers so they made it so that if you have a developers team you don't need an extra devops person who is dedicated to setting up and maintaining that CI CD pipeline in your project so now the question is how did they make it easy or how does it compare to other CI CD tools like Jenkins for example and why is it much easier to set up and manage so you know that when you think about CI CD pipeline one of the most important things is it's integration with different tools so what do I mean by that whether you are developing a node.js application which will be built into a Docker image and then pushed into a Nexus repository and deployed on digitalocean server or you're developing a Java application with Maven you have integration tests to test your application on Linux and windows servers then build it into a Docker image and push it to AWS container registry and deploy it on AWS eks so basically you can have many different combinations of tools that you're using in your development process so you don't want to be sitting there trying to configure your CI CD Pipeline with all these tools like installing Java and Maven and Docker and all these Integrations with Nexus and AWS and so on installing plugins and configuring them instead you want a simpler way of saying hey I need an environment which has node and Docker both available without me installing any of it with a version that I want and the same way I wanted to do the deployment part easily by simply connecting to the Target environment and deploying the application there and that's exactly the advantage that you have when you're using CI CD pipeline in GitHub actions and of course I will show you and explain how this works in the next demo part with my example Java Gradle project which we will build into a Docker image and push to our private Docker Repository so to see all this in action let's go to GitHub in here we can create a test repository call it my project public and that's it so this is my Mt project so to say so whenever you create a new project you have this actions tab integrated into the project that lets you get started with automating one of your workflows so now I can push my local code to the remote Repository so let's go back and refresh it and here I have my Java application which uses Gradle project so let's go to actions so here if we scroll down we see a big list of workflow templates which means you don't have to start writing your workflow file from scratch you can use one of the templates that matches technology your project uses and these are actually grouped in three main categories here we see the deployment workflows to deploy your code to cloud services or using some automation tools and here we have big section of continuous integration workflows and here if you look at the list a lot of options based on what programming language you're using what tools you're using and also combinations of such tools so for example you have Java with Gradle and you also have Java with Maven and so on so you have the build and test workflows as well as publish workflows where you publish your artifact to some repository and that's where I was talking about when I mentioned that different applications use different combination of tools and it's important for Sci CD tool to have an easy integration with many different tools so that it works for different projects all the way down these are the workflow examples that I mentioned at the beginning like greeting someone for example if a contributor joins your project you might want to send an automated greeting message to welcome or labeling your issues and so on and obviously you can make your own workflow with different combination and adjust it so let's create a build workflow for our Java Gradle application and obviously I will choose the Java Gradle workflow template and let's see what the workflow file looks like and see what happens it automatically creates this configuration view in my project or my repository it creates this path dot GitHub workflows and this is the file that basically holds my workflow logic it is written in yaml it's a yaml format and what's great with this list of workflow suggestions is that you get a pre-configured workflow that you may need to adjust just a little bit but most of the stuff is already here so you don't have to start from blank file so let's go through the syntax of this workflow file in detail so that we understand how to write our own workflows so I'm gonna copy this in my editor so we can see better so first of all we have the name of the workflow this is basically for you to describe what the workflow is doing these are the events that I mentioned so every time an event happens or events happen we can trigger a certain workflow so this is a section where we Define events that should trigger the following workflow and I think it's pretty intuitive every time someone pushes to master Branch we want to trigger this workflow or every time a pull request gets created with Master Branch as a Target this workflow will get executed which in this case makes sense because every time something gets pushed into a master or you want to merge something into Master it makes sense to run tests or to test our application to make sure that it's mergeable so to say or that we didn't break something in the master branch so that's pretty straightforward other examples that I mentioned could be creating an issue or a contributor joining this will be all events listed here you have a complete list of such events documented on this page so here you see the list and here you see some more detailed explanation and also the usage and as always I will put all the relevant links for this tutorial in the video description and this is a part that gets executed whenever these events happen so we have jobs these are the names of the job this could be arbitrary just like the name of the workflow so you can name it yourself and job basically groups a set of actions that will be executed right so as I mentioned events trigger a chain of actions or combination of actions and these are defined here so let's look at the first one pretty logical whenever we want to build application or run tests we need to check out the repository or the code first so how does this get executed or what is behind this syntax so the actions path in GitHub is where pre-created or predefined actions are hosted so basically you can assume that everybody who uses a CI CD pipeline in GitHub actions will need to use checkout Command right so instead of letting everybody do that on their own they're creating an action called checkout that people can use so if I go to GitHub slash actions I will see list of repositories that contain all those actions so let's look for our checkout action so these are all these actions are basically repositories let's go inside and here you have action yemo so this is a normal repository with some code in it and we have action EML file here this is basically what checkout action does in the background or the logic that people already wrote so you don't have to write it in your workflow and just reuse it and each action in the repository will have some sort of documentation where you see if you can configure some additional parameters for this checkout action and this here is version of that action so to say because as I said these are simple repositories that are built and released and have versioning so this is our checkout step and whenever you're using an action that is already available either at slash actions or maybe some other community or team has created one you can basically use any such action using the uses attribute so these are the official ones but whenever someone creates an action basically a repository with action yaml file you can use it here using the uses attribute so the second one second step is action called setup Java which is another repository in this actions list and what it does is basically prepares your environment with Java with a version that you defined here and this is the part where I mentioned that you don't have to install or configure anything like in Jenkins for example you would go and configure job version here you just Define that you want to use environment with Java on it so Java version 1.8 will be installed and available there the next one is a command so here you see the difference whenever we are referring to action in repository we use this attribute whenever we're running a command just like a Linux command for example command line command we are using run attribute so this basically just changes the permissions of Gradle file and the next step just calls Gradle build and all of this is done in the same environment so your code gets checked out Java version gets installed and then you call Gradle build in the same environment so obviously for this to work you have to have Java application that is built with cradle and now let's actually go ahead and execute this workflow for our Java project the name of the yaml file is also something that you can decide for yourself we can actually call it CI and start commit let's create a new branch and create a pull request that will be merged into Master branch and here you see that the workflow got triggered because our event matched to what just happened so we created a pull request against must branch and that triggered the workflow this is in progress and if I go into details we're gonna see what is actually happening so the bill completed so let's actually look at the steps that got executed setup job which basically prepares the job environment for executing the workflow here you see for example this action repositories got downloaded so that it can be used here you see the checkout action and you actually see pretty helpful information in all these steps and they also highlight the comment that gets executed so that you can easily see first of all the command and differentiate it from the logs and also see how they kind of interpret your comments for example with the options and flags and environmental variables and so on then we have the setup jdk again these are the commands that are got executed and some log files this is where the build the actual build happened build successful and then we have some post build actions which we didn't Define these are out of the box things get cleaned up so in my opinion for an initial setup of workflow or such a workflow it it's actually pretty straightforward and easy to set up and it's pretty difficult to mess this up so now you may be asking where do all these things get actually executed because you see that the code got checked out then you see some commands got executed Java version got installed and the Gradle build actually happened so where do all these things happen and how do they get executed so the way it works is that workflows on GitHub actions get executed on GitHub servers so it's managed by GitHub you don't need to set up some servers and configure your build tool install some plugins or whatever and prepare it for building the application so GitHub will manage all of this for you the servers will be configured and ready to execute your jobs an important to note here is that whenever you create a new job or whenever you create a new workflow with a set of jobs for every single job a fresh new GitHub server will be prepared or used to execute all those steps inside the job so one job will run on a single server at a time so for example if you have a list of jobs here maybe you have a job that builds the application and then you have another job that publishes Java artifact let's say to a repository so one job will run on one server another job will run on another server by default these jobs will run in parallel but of course in such a case you would want to wait until the first job was successful to execute the publish so here I could have a publish job of course in this case we want to wait for the build job to successfully execute before we publish the artifact so we can override this default parallel execution using needs and we can reference the build that it depends on and then we'll have a set of steps and actions here and another thing that should be noted here as well is this line here runs on so the servers that I mentioned that GitHub makes available for the workflows to run come in three categories so you can choose either Ubuntu Windows or Mac OS so for example if you have an application that you are shipping out to customers that have all three operating systems you can test each release for example or each commit to master you can test that on all three operating systems and the way we do that is using those attributes so we have a strategy a metrics metrics is used basically whenever you want to use multiple operating systems or maybe multiple versions of Java or whatever technology you're using for your application and here I'm going to Define OS options as an array so we have the Ubuntu latest we have Windows latest and we have Mac OS latest and here on runs on we're going to reference at least using metrics dot OS and let's actually try to apply this change so I have merged my pull request so here you see in the master Branch we have this dot GitHub workflows path with the CI EML file inside so now this has become part of the application code so I can adjust it here and let's actually commit straight to master branch and let's see our workflow and here you see three builds are getting executed in parallel on all three operating systems so as next steps we are gonna take that Java artifact file and we're gonna build a Docker image out of it because we live in world with containerization so jar file won't do it so once we have the docker image built we're gonna publish that to a Docker Hub private repository so let's do that first of all I have my Docker repository set up on Docker Hub it is super easy actually just create an account and you get one private repository for free so this is my private repository and I just have two images here of different application and this is where we're gonna push our Java demo image so what we're gonna do is uh let's go back to the editor so we can see the syntax highlighting better so here as a next step I will add a step and let's call it build and push Docker image because that's what we are doing and here we have a choice of either running the commands or using an action so of course we can write here all the commands we need for building and pushing Docker image this will be Docker login with credentials because first we need to log into the repository from GitHub so that it can push the image there um Docker build Docker tag and Docker push two nodes here whenever you want to execute a step with multiple commands so our own command line command so to say you can do that using the pipe syntax so this is a multi-line syntax in yeml so here we would have Docker login and some credentials here then we would have Docker builds Docker tag and so on and another point is that on a Linux Ubuntu machine so this one here we have Docker pre-installed so I don't have to set up environment I can execute Docker commands right away but as an alternative to command as I mentioned we can use an action and since building and pushing a Docker image is a pretty common step something that a lot of projects will be doing we can expect an action to exist or multiple such actions to already exist so what I'm going to do is I'm gonna go and find an action that does exactly that so we can Google and here you see we land on the marketplace of GitHub actions so if I go here I see a bunch of actions and here I can look for different functionalism I may need in my pipeline so we can go with this action and here you see the usage example so what's important with actions is that you have a possibility to pass in the parameters so it basically does all those Docker login Docker build Etc commands but obviously we want to set our own credentials we want to tell which Docker registry it should connect to in this case we have a Docker Hub registry and of course the image name so we can actually pass all those as parameters here you see it supports multiple Docker Registries here we have the docker Hub and here we have the example usage as well so I'm just going to copy that and we can paste it right here so this is the action with the version this has a version four right here and these are the parameters that we can overwrite you also have the description of the parameters and which one does what and what parameters you have available so let's see which ones we need to overwrite the docker registry name for Docker Hub is Docker dot IO we need to set the image repository name and image name so I'm going to go back to my Docker Hub and just copy that so this is the docker ID and this is the repository name and here you see credentials for username and password because as I mentioned GitHub needs to authenticate itself with the private Docker registry because it's obviously secured and we need to provide credentials here and since this yaml file this workflow yaml file is part of the code we can't just put plain text credentials here so we're using placeholders instead so these are referencing secret so where do those Secrets come from these ones actually can be created in the GitHub itself which is pretty convenient way to store all your secrets for your repository so if you go to settings and secrets here you can add secrets that your workflow uses so I'm gonna post my secrets in here so this is the username and this is a docus password the name should be of course what you're referencing here so I'm going to put in the password so these are the username and password that you use to log in in the docker Hub right here so I have my secrets here for my repository so now I can reference those secrets from my workflow files using secrets.the name of that secret and note that the syntax right here is the same as here this is basically yaml Syntax for referencing values and for this example we actually don't need all three operating systems let's go back to Ubuntu also as I mentioned Ubuntu is the one that has Docker pre-installed so this will be basically our step for building and pushing Docker image and I think this is more convenient because I don't have to write out all this Docker commands for building and pushing the image it all happens in the background you can also override the tag name here you can override the location of dockerfi but default is just the current directory we're going to leave this at defaults so let's actually go ahead and execute this step so I'm going to copy the whole file and let's place that and let's start our commit I'm just going to commit it straight to the master branch so here is our new file and if I go to actions here I see that the workflow ran and it completed so let's actually look inside the steps here we have built with Gradle and here we have built-in push Docker images let's actually open this one up seems like everything executed just fine it was successful so if I go to my Docker Hub repository and refresh here I have a new tag of my Java application and this is the default tag that this action gives my Docker image which has a branch name as a prefix and as you saw here in the parameters you can actually override that tag as well with the tech para so that was our continuous integration workflow we built Java artifact we built a Docker image and we pushed it to Docker repository I will make a full course on the GitHub actions for multiple other use cases including deploying the docker image on cloud or kubernetes environment testing and building with node.js application as well and also automating some other workflows so if you're interested stay tuned for that so hope you learned a lot in this video let me know your feedback also what else you would like to see and learn on this channel or if you have any questions in the comment section below thank you for watching and see you in the next video,-0.05263137444853783,0.027521448209881783,-0.049186304211616516,-0.020912308245897293,-0.015065369196236134,-0.06272733956575394,-0.0026740948669612408,0.05398014560341835,-0.009538264945149422,0.0916658416390419,0.017087601125240326,-0.0403982438147068,0.05356334522366524,-0.05760203301906586,0.006013484206050634,-0.01157446764409542,-0.0021679906640201807,0.038883719593286514,-0.010869434103369713,-0.052558694034814835,-0.04398107901215553,-0.007536846213042736,-0.04768204316496849,-0.04432801157236099,-0.011786388233304024,-0.037515491247177124,-0.07424718886613846,-0.018243487924337387,-0.030120721086859703,-0.007464085705578327,0.10149071365594864,0.020891541615128517,0.06813576817512512,-0.027141984552145004,0.04410938546061516,0.14482824504375458,0.07025693356990814,-0.05829669162631035,-0.029531270265579224,-0.03814683482050896,0.033024564385414124,-0.05417097359895706,0.018027175217866898,0.004208521451801062,-0.03596349433064461,-0.07554177194833755,-0.045837026089429855,-0.08887342363595963,-0.028959771618247032,0.05225508660078049,-0.04967740923166275,-0.09082198888063431,0.0005512201460078359,0.006557858549058437,-0.049901075661182404,-0.006875953171402216,-0.03431303799152374,0.04949722811579704,0.07848202437162399,-0.07379818707704544,0.025987397879362106,-0.032357875257730484,-0.02830931358039379,0.02020977810025215,0.003517762292176485,-0.03555537015199661,-0.01192130520939827,0.008170444518327713,0.07074251770973206,-0.03785005956888199,-0.025732075795531273,-0.042250096797943115,-0.10738696902990341,-0.055706579238176346,-0.006931207608431578,-0.0355566181242466,-0.05241437628865242,0.08333874493837357,-0.06394146382808685,0.013608019798994064,0.04106767848134041,0.027409808710217476,0.0021600474137812853,-0.007333765272051096,-0.06895389407873154,0.13873541355133057,0.012220611795783043,0.027285398915410042,0.043576229363679886,-0.0161792803555727,0.04973394796252251,-0.05169675871729851,0.02359881065785885,0.01569024659693241,0.02651403658092022,-0.037490904331207275,-0.04213079437613487,-0.039306703954935074,-0.008468139916658401,0.030503569170832634,-0.0033785286359488964,0.007354241330176592,0.03179122880101204,-0.1016525998711586,0.027074655517935753,-0.015794668346643448,-0.017609579488635063,0.007835840806365013,-0.017135649919509888,-0.021128304302692413,-0.09287982434034348,-0.060303956270217896,-0.0617021881043911,-0.014554367400705814,0.03079497627913952,0.07472579181194305,0.05147610232234001,0.005569681990891695,0.03863532841205597,-0.07317949086427689,0.059961795806884766,-0.00383112789131701,-0.006726430729031563,-0.0447944812476635,0.015124281868338585,-0.038213711231946945,-0.039501409977674484,-1.3455059151107226e-33,0.01946120522916317,-0.07429829239845276,0.06546634435653687,0.03277438133955002,0.16457949578762054,-0.0803215429186821,0.028859997168183327,-0.08326122909784317,-0.09210222214460373,0.06760266423225403,-0.006998204626142979,-0.011016982607543468,-0.024723004549741745,0.10518896579742432,-0.010678891092538834,-0.06659260392189026,-0.08703472465276718,-0.01821652054786682,0.05442432314157486,-0.0256342813372612,0.037749283015728,-0.027041535824537277,-0.04091779887676239,-0.003700666595250368,0.0962497815489769,-0.030897632241249084,0.042624037712812424,-0.008053192868828773,0.017758922651410103,-0.016834449023008347,-0.0456216000020504,0.05213873088359833,0.013290870003402233,0.021482443436980247,0.04047767072916031,0.006799152120947838,0.0031208365689963102,0.02801586501300335,-0.010098714381456375,0.004965340252965689,-0.029033537954092026,-0.013522975146770477,-0.010575276799499989,0.014920013025403023,0.11248867213726044,0.003840397112071514,0.031077414751052856,-0.012477492913603783,0.12950772047042847,0.1010504737496376,0.07544458657503128,-0.008352639153599739,0.03402985632419586,0.029507003724575043,-0.015531934797763824,-0.008304269053041935,-0.06281126290559769,0.020287303254008293,0.0005621938034892082,0.023180773481726646,-0.11806440353393555,0.038490913808345795,-0.006768081337213516,0.02136457897722721,-0.04422066733241081,0.045676056295633316,-0.09051354229450226,0.06837189197540283,0.07822150737047195,0.04827859625220299,-0.03199949860572815,0.06876374036073685,0.01743600331246853,-0.0602007731795311,0.02307790517807007,-0.00736355921253562,-0.03488047420978546,-0.040859248489141464,0.049278099089860916,0.026125602424144745,-0.0434953011572361,-0.005524067208170891,-0.02012542635202408,0.05446775630116463,0.017146537080407143,0.00010124858818016946,-0.023973416537046432,0.063177689909935,-0.019049007445573807,0.00131370616145432,0.07106006145477295,0.016596002504229546,-0.09710843116044998,0.004859996493905783,0.058482903987169266,-1.8851979631052897e-33,0.04781472682952881,-0.048576585948467255,-0.009676335379481316,0.0883423462510109,0.031139900907874107,0.01471447292715311,0.013473800383508205,-0.05501075088977814,0.05770408362150192,-0.036058057099580765,-0.04692881926894188,0.1156681552529335,-0.10199455916881561,0.09352412074804306,-0.021427389234304428,-0.03731152042746544,-0.03423689305782318,-0.03596489876508713,0.06620736420154572,0.03197150304913521,0.03411785140633583,0.025884250178933144,-0.005730072036385536,0.014128804206848145,-0.08034665137529373,-0.019563961774110794,0.04818185046315193,-0.006781251635402441,0.05653882026672363,-0.01610327884554863,0.01729140616953373,0.011485936120152473,-0.03887685760855675,0.003612229134887457,-0.01442906353622675,-0.010138098150491714,-0.01985212415456772,0.14132559299468994,-0.01559232547879219,-0.06229221820831299,0.048019133508205414,-0.09553629159927368,-0.059205297380685806,-0.042260002344846725,0.0013698004186153412,-0.007826149463653564,0.0778018981218338,0.020245546475052834,-0.1503039449453354,0.01274086907505989,-0.027251621708273888,-0.006112596020102501,0.010467294603586197,0.006815738510340452,0.047269031405448914,-0.022591376677155495,0.05319052189588547,0.020279008895158768,-0.06909146159887314,0.015041579492390156,0.046656932681798935,0.02481658011674881,0.016106829047203064,-0.017997555434703827,-0.08218935132026672,-0.03898913040757179,-0.015198077075183392,0.04170197248458862,-0.08068238943815231,0.0375237800180912,0.0026860872749239206,-0.026354115456342697,0.011959047056734562,-0.06085178256034851,0.08406154066324234,-0.11660845577716827,-0.015183603391051292,-0.011801286600530148,-0.01769312098622322,0.07250291854143143,-0.038127388805150986,0.07869349420070648,-0.009641945362091064,-0.000030491924917441793,-0.026995543390512466,0.0898522213101387,0.010766962543129921,-0.01096464041620493,0.07168179005384445,0.006452658213675022,-0.01107675302773714,0.04993404448032379,0.021247010678052902,0.06291956454515457,-0.04680810868740082,-1.846882469180855e-8,0.0020450374577194452,0.08910101652145386,-0.0771654024720192,-0.008968545123934746,-0.04868362098932266,-0.0120755759999156,0.037439391016960144,0.04453888535499573,-0.03145754337310791,-0.008058796636760235,0.000028383818062138744,-0.005739440675824881,-0.035458605736494064,0.0028954208828508854,0.020134149119257927,0.07444324344396591,0.04560909420251846,0.03984609246253967,0.011517993174493313,-0.043546754866838455,-0.0828370526432991,0.013219333253800869,0.08608943223953247,-0.0007397420704364777,-0.03873364254832268,0.06727011501789093,0.05712854117155075,0.07970434427261353,-0.05292050167918205,0.010264012962579727,0.09274560958147049,-0.007315673399716616,-0.11839159578084946,-0.004216786939650774,0.02189815416932106,-0.08737324923276901,-0.016983341425657272,-0.09616191685199738,0.07959845662117004,-0.08663517981767654,-0.09847787767648697,-0.019759582355618477,0.029054168611764908,-0.05464892089366913,-0.06559296697378159,0.0635010302066803,-0.0037692866753786802,-0.04631703346967697,-0.02671489305794239,-0.009441576898097992,-0.005732548888772726,-0.006013412494212389,-0.1054580807685852,0.0924723669886589,0.11206832528114319,0.12054509669542313,0.0318756029009819,0.03395957872271538,0.05396666005253792,0.013049988076090813,-0.008927331306040287,-0.009965959936380386,-0.0035108381416648626,0.018637746572494507,-0.0889175608754158,-0.04668480157852173,-0.017932264134287834,-0.05455606430768967,-0.0035817797761410475,-0.029551027342677116,-0.006636317353695631,0.050616905093193054,0.06413628160953522,0.035291388630867004,0.008713704533874989,-0.008235751651227474,0.021604804322123528,-0.04420473054051399,0.02316756546497345,-0.036826182156801224,0.016136666759848595,0.022213421761989594,-0.061080221086740494,-0.08102158457040787,0.002558915177360177,-0.05877169594168663,-0.04911045730113983,-0.03104167804121971,-0.04813346639275551,-0.01783864013850689,-0.06400302797555923,-0.06149802356958389,-0.045145295560359955,-0.006622515618801117,0.054449163377285004,0.04737662151455879,0.036529138684272766,-0.015991397202014923,-0.06484104692935944,0.09745412319898605,0.036000385880470276,-0.017867598682641983,-0.03676169738173485,-0.06926373392343521,-0.024284787476062775,-0.041307397186756134,0.010142176412045956,0.01605636067688465,-0.022392895072698593,-0.060705989599227905,-0.0273872260004282,-0.1164163202047348,-0.06991230696439743,0.01823275350034237,-0.02518937550485134,-0.08417493104934692,0.003076077438890934,0.053891345858573914,0.007332945242524147,-0.015188077464699745,0.0036695420276373625,-0.005008450243622065,0.07605200260877609,-0.06639274209737778,0.04786296933889389,-0.02711184322834015,-0.05551569536328316,0.015680301934480667,-0.01069201435893774,-0.07436559349298477,0.009867563843727112,0.00244737695902586,0.09152792394161224,-0.11422911286354065,-0.052756138145923615,-0.04251793026924133,-0.07522174715995789,-0.018575523048639297,-0.004215015564113855,-0.034278273582458496,-0.04111326113343239,0.040464773774147034,-0.033509086817502975,-0.03123791702091694,0.044362712651491165,0.08343681693077087,0.031652625650167465,0.032317619770765305,-0.025042220950126648,0.12008689343929291,0.020282836630940437,0.059412263333797455,0.01906372420489788,0.02247680351138115,0.037687670439481735,-0.033180516213178635,0.019694607704877853,0.011638754047453403,0.02498268522322178,-0.024279028177261353,-0.029248204082250595,-0.0286459568887949,0.01630464196205139,0.009999140165746212,0.045906227082014084,0.019177857786417007,0.060252703726291656,-0.13992436230182648,-0.011359754018485546,-0.021099288016557693,-0.019291173666715622,0.012771189212799072,0.03617728129029274,0.003985570278018713,-0.13667230308055878,-0.07023774832487106,-0.02401137165725231,-0.040483418852090836,0.016036147251725197,0.08227532356977463,0.03787520155310631,0.04355339705944061,0.016820916905999184,-0.05141504853963852,0.03830733150243759,0.03693785518407822,-0.01948571391403675,-0.05899980291724205,0.03389378637075424,-0.020681556314229965,-0.05841449275612831,6.554060588505822e-33,0.021505817770957947,-0.033928804099559784,0.03413505479693413,0.03358391672372818,0.10262418538331985,-0.07904290407896042,0.013891457580029964,-0.04892376437783241,-0.057097941637039185,0.03367645666003227,-0.008687382563948631,0.040897589176893234,-0.043561991304159164,0.11541105061769485,-0.025584788993000984,-0.06236805021762848,-0.12222693115472794,-0.019610105082392693,0.07317755371332169,0.02705281600356102,0.034446585923433304,-0.04137137532234192,0.006938626058399677,0.03385324031114578,0.110972099006176,-0.06121770292520523,0.04238919913768768,0.02566296048462391,-0.003995033912360668,0.010837908834218979,-0.10868832468986511,0.04401810094714165,0.011340864934027195,0.024226881563663483,0.021717766299843788,0.02141430415213108,-0.04456942901015282,-0.05670604109764099,0.043872956186532974,-0.021723361685872078,-0.03474026918411255,0.009217718616127968,-0.07363476604223251,0.011035142466425896,0.11167916655540466,0.006931425537914038,-0.0008788813138380647,-0.019819872453808784,0.14488044381141663,0.06299939006567001,0.10766224563121796,-0.006249158643186092,0.1244717463850975,0.005012641195207834,-0.008095839060842991,0.05048118531703949,-0.010484847240149975,0.0038890126161277294,0.015295453369617462,0.07397140562534332,-0.08827241510152817,0.00772168068215251,-0.0056756227277219296,0.0725054070353508,-0.039960846304893494,0.03862699121236801,-0.0397455058991909,0.04763301834464073,0.08340227603912354,-0.012284536845982075,-0.04221014678478241,0.060986924916505814,0.01940295100212097,-0.07527955621480942,0.018926601856946945,0.00003989689867012203,-0.0248979814350605,-0.06463121622800827,0.02765883505344391,0.04402259737253189,-0.10000860691070557,-0.02525593340396881,-0.022808434441685677,0.02131461538374424,0.026488879695534706,0.02016168273985386,-0.04552799090743065,0.031972646713256836,-0.04569656029343605,-0.020807364955544472,0.0645398423075676,0.00008029314631130546,-0.09426120668649673,0.08062110841274261,0.09498181939125061,-8.195553960772681e-33,0.047602709382772446,-0.04960305988788605,-0.03970549628138542,0.08186282217502594,0.040772322565317154,0.02615373581647873,-0.03355608880519867,-0.08453088998794556,0.06442245095968246,-0.034177638590335846,-0.06834263354539871,0.06740087270736694,-0.09060493856668472,0.070714071393013,0.02131478115916252,-0.04726565629243851,-0.0014451598981395364,-0.02767089009284973,0.029185323044657707,0.01662001758813858,0.03056498058140278,0.054725274443626404,-0.03832269832491875,-0.03342724218964577,-0.07251469045877457,-0.0027404739521443844,-0.01622452214360237,0.0032268636859953403,0.09050603955984116,-0.017234966158866882,0.04067063331604004,-0.012717826291918755,-0.06543700397014618,-0.026313243433833122,-0.003448531962931156,-0.03459599241614342,-0.003970032092183828,0.09372680634260178,0.02525588870048523,-0.08308786153793335,0.04201453924179077,-0.05189892649650574,0.007077251095324755,-0.028163062408566475,-0.008404293097555637,0.05351804941892624,0.04616036266088486,0.02748403698205948,-0.08556903153657913,-0.005406546406447887,-0.01897948607802391,0.01764041557908058,-0.02459503337740898,0.012966790236532688,0.052264340221881866,0.010938090272247791,0.056451305747032166,0.012215766124427319,-0.08777450770139694,-0.002556599909439683,-0.011639182455837727,0.045673634856939316,0.026481470093131065,0.01175524853169918,-0.0745546817779541,-0.012519660405814648,0.00765237445011735,0.017672374844551086,-0.07918763905763626,0.02640792354941368,0.03540245071053505,-0.01767709292471409,-0.01676037348806858,-0.06509432196617126,0.06192845478653908,-0.09760068356990814,0.027291234582662582,-0.07801596075296402,-0.07616765052080154,0.042221225798130035,-0.03648015111684799,0.05768449231982231,0.02153761126101017,0.026326145976781845,-0.06669105589389801,0.08479167520999908,-0.03128713741898537,0.002534653525799513,0.05330370366573334,0.004303025547415018,-0.046095721423625946,0.062176622450351715,0.0278925858438015,0.03514690324664116,-0.03733965754508972,-5.0832852593885036e-8,-0.015338579192757607,0.07501702010631561,-0.042364537715911865,-0.057903893291950226,-0.0587921142578125,-0.020751332864165306,0.013247106224298477,0.12802712619304657,-0.00431663217023015,0.011704695411026478,0.08261869102716446,0.02084897831082344,-0.014305309392511845,-0.0038530740421265364,0.03735056519508362,0.07650835812091827,0.09147895127534866,0.020167799666523933,-0.016723278909921646,-0.04692992940545082,-0.04271536320447922,-0.0175781287252903,0.0077285910956561565,0.018597407266497612,-0.06877248734235764,0.015542504377663136,0.07735264301300049,0.08563992381095886,-0.041121434420347214,-0.001989964861422777,0.06683171540498734,0.0036554436665028334,-0.04623125120997429,0.010841681621968746,0.02908223122358322,-0.0611271932721138,0.00031578930793330073,-0.10413389652967453,0.08088841289281845,-0.06758985668420792,-0.046291202306747437,-0.03446337208151817,0.02258657105267048,-0.00844931323081255,-0.07272683084011078,0.03339717537164688,-0.06872411072254181,-0.049308694899082184,-0.01358182355761528,0.0009218702325597405,-0.043135400861501694,0.004840428940951824,-0.10040979087352753,0.10297778248786926,0.0826864242553711,0.1403147578239441,0.014746327884495258,-0.020341623574495316,0.1095607802271843,0.02185985818505287,-0.014298327267169952,-0.006096945144236088,0.03472474589943886,-0.009953717701137066
asIS4KIs40M,2020-05-30T13:55:30Z,Pull Image from Private Docker Registry in Kubernetes cluster | Demo,in this video I will show you how to deploy your own application in covenants cluster so let's look at a common setup when deploying your own application in Co brandies you commit your code get that triggers jenkins bill that packages your application with its environmental configuration into a docker image and this docker image then gets pushed to a docker registry and this can be nexus it could be AWS container registry or some other private docker repository and now that you have your docker image in the private registry the question is how do you get this docker image on your communities cluster for images like MongoDB elastic some of them that I've shown you in other videos there it's pretty straightforward because they are hosted in a public repository like docker hub and anyone can access them so I can pull them on my machine without excess permission but your own application lives in a private repository and needs explicit access from the cluster so how do you pull their application images from private repository on cabinets cluster you do that using two steps the first one is you create secret component in kubernetes that contains access token or credentials to your daughter registry so that it can authenticate with the registry and second is you configure your deployment or your pod to use that secrets using a specific attribute which is called image pool secrets so I'm gonna show you all that in practice and in order to show you the demo I have my environment already set up so first of all I have a docker private repository which is hosted on AWS so this is the container registry and I have one repository there for my app which is a simple node.js application if you want to learn how to set up AWS container registry I have a separate video about that where I demo the whole process of tagging and building the image locally and then pushing it to AWS container registry so there you can basically learn how to get to this state and I will link that video here and in addition I also link the git repository of this my application if you want to use it and inside the repository I have three images with different version text so we're gonna use that for the demo and luckily I have a mini cube cluster setup which is currently empty so we're gonna start from a clean state so the first step as I said is to create a secret component which will have the access token or credentials to this private repository which will allow docker to actually pull that image inside the cluster so the first thing we need to do in order to create this secret is we need to login to this repository and for that there is a docker login command that looks like this so basically with dr. Logan you provides options which is username or password and you have the doctor repository in point there and the third one is password standard in which basically means that you don't type in the password on the command line but you take it from a standard input source this is more secure and I think this is a recent addition or or more recent decision in docker because you don't have your password written in the command line history so I recommend you use this one generally so for AWS if you see the view push commands there is a log in command here actually that gets the login password into a standard input and then you can do doctor login on that but what I'm gonna show you just for demonstration is I'm gonna show you the complete log in command that this will execute and this is the one so you have docker login the user name this is a password and I'm showing you the password because I'm gonna delete the repository afterwards this is the email flag which I believe is deprecated in the new docker version and there is this URL and this is basically the endpoint of my private repository which is this one right here okay so with this command I will be able to log in so if I execute that command so doctor log in with all the credentials I see log in succeeded and what it does in the background is it creates or it generates a convict JSON file that holds the authentication to my private repository so in dot docker directory and user folder you have a configuration and this holds the repository access now there are two ways that this config Jason will store the authentication either you will have the authentication directly here or you had the external credit stored this is more secure because your access token isn't stored in the file but in a credential store and this is the file that we need for the secret so now whenever docker tries to pull the image from my private repository like this image for example it will use those credentials for this private registry to pull that image to authenticate itself and pull that image however there is a small problem with this specific file which is that I am running my cluster in mini cube and mini cube doesn't have access to my creds store because it's running in a virtual box right so it cannot access my max credential store so this is not gonna work so when the docker which is packaged in the mini cube which I explained in another video you can check that out how mini cube is set up some mini cube has its own darker so when docker inside the mini cube tries to pull that image from this private repository it will see the Kratt store anyone be able to access that ok but I showed you this one who demonstrate how dr. login works with credit store so what I'm gonna do now is enter the mini cube so I'm going to SSH into mini cube which goes like this you can do this pretty easy and here I am in the directory of home docker and just check there is no dot docker here so what I'm gonna do is I'm gonna login to my private repository from mini cube doctor directly not from my laptop okay and let's see how that looks like so I'm gonna copy that command like this and by the way mini cube has a recent more recent version of docker that's why it doesn't recognize the email flag because it got deprecated so I'm gonna remove that so you have the same username password and the private repository URL so I'm gonna execute that remember I'm in the mini cube login succeeded and now if I do - eh I see the dot docker directory created and now we can see what's inside the conflict Jason so you see config Jason doesn't have a credential store anymore but it has this is the repository URL it's the same one here and the credentials or the authorization is inside those brackets so right here you have the authorization token which is this whole thing so depending on your setup it might look like this for you or like this but as I said mini cube can't access my credit store on my operating system so that's why I'm logging in directly from the mini cube talker now what we gonna do is we're gonna use that file so this file right here to create the secret for kubernetes cluster and this is a secret configuration so basically I have a secret kind the name of the secret and note the type here so it's darker config Jason which is its own secret type for this specific use case and the dot docker config Jason the value of this attribute will contain the base64 encoded contents of this config JSON file so all this basics before encoded will be assigned as a value here now since I have my cube CTL setup on my laptop not in the mini cube what I'm gonna do is I'm gonna copy that file from inside the mini cube to my host so that I can use it for my cube CTL command so I'm gonna clear this up and I'm gonna secure copied from mini cube and by the way I'm gonna collect all these commands and the configuration files and I'm gonna put them in its repository and link it in the video description so you can check that out if you want to follow along the video so I'm gonna type out the whole command and I'm gonna explain it so what I'm gonna do is I'm gonna secure copy and for that I'm gonna need SSH key which you have in a variable like this so it will be the same for you can directly copy this command and this is the source so we want to copy it from mini cube this is a user inside mini cube and this is the IP address so this is the server IP you can also login on your console and you can see what the value of it is and inside that I want to copy dot docker slash config Jason and I want to copy now its destination I want to copied in my docker config so I'm gonna replace the one that I have and as I mentioned directly having the authorization inside the configuration file is not as secure as having it in credit or so if you are running your kubernetes cluster on some servers you may want to use credential store inside but this is just for mini cube demonstration so I'm gonna execute that and now if I check my own docker config see I have replaced the content now I can go and create a secret from this file so as I said this should be basics different Kodi content so what I'm gonna do is pipe that and base64 encode it and I'm gonna paste it directly in here okay so this is my secret or if you want to spare yourself this you know base64 encoding it on the command line and then copying the contents there you can actually do that with cube CTL command as well right so let's clear that up and I'm gonna show you that keep city away as well so the cube CTO command will be like this keeps it will create secret and this is the secret type generic so let's name of the secret and let's break the line to have it structured from file attribute from which file the secret content should be created and this is the same attribute that we have in the secret file docker config Jason this is the same as this one here and now we have to specify the file which it should base64 encode and finally we specify the type which is darker config Jason type so it's gonna create the secret of docker config Jason type from these files contents and set it as a valley for these attributes so I'm gonna apply that so this will do the same as applying this configuration file here so we have our secret my registry key in the cluster so just to review now we did talk her login in this case I did from mini cube Stoker and then we use that file first of all I copied that file from mini cube to my host where execute the cube CTL and I use that file to create the secret which now has contents like this let's actually see that gets secret this is output Y mo file that was created and I have my data here doctor config jason and this is the basics de for encoded contents now there is a second way to create this docker config jason secret where you don't have to do it in two steps you don't have to do doctor login and then create the secret from that convict JSON file you can do both in one step so let's see that as well so it's gonna be keep CTL create secret and now instead of generic I'm gonna specify docker registry the secret type and let's give it Oh let's give it name my registry key - and here I have different flags which are specific for docker registry right so I have docker server and I'm actually gonna execute this command again so that I see the values so I have docker server which is my AWS private registry URL so I'm gonna that here then I have docker username which is AWS I have docker password which is this whole thing here and this is basically it so this command will do both steps in one so it's gonna do docker login and it's gonna create a secret based on the login authentication so if I execute this I have both secrets and I can use any of those for my deployment now you may be asking why there are two different ways to do the same thing can we just go with one but there's a difference between the two and the difference is that with this command you can only create one secret that has access token for one dollar registering for this specific registry for example but it's convenient because you do doctor login and secret creation in one step however if in your cluster you're using more than one private registry where you pull the images from then it will be more practical more convenient to go with other option the first one because for example if you have five private repositories that I want to pull the images from I can do docker login in each one of them and all the access tokens will get stored in this config JSON file like this so you're gonna have a list of them and if you use that file in your secret then with one secret you can have access to all the reports so this is a difference so depending on your use case you may prefer to use one or the other okay so now I've cleared everything and we see that we have our two secrets and now the second step is to configure deployment for my app application so I have a deployment configuration here and this is just the minimum configuration you need for deployment and this is our pot specification I have one container the name is my app and this is the image and the image name of the application has to be the complete name which includes the repository URL and the image name so it's going to be the complete image URL I'm gonna copy that and paste it so this is the repository URL this is the image name and this is the image version because if you just write this one doctor won't know which repository to pull it from and I have the port 3000 because that's why my application runs is that no J's application and now since I already built this all locally on my laptop I have that image available locally show that so 1.3 with this version I have it locally however because we are testing pulling the image from the private repository I want to force docker to pull that image from a repository instead of taking it from the local docker repository which is on my laptop and to do that you can force it by image pull policy attribute and here you can say always and every time pod is created this will force docker to reap all the image even if it already exists locally on your localhost so that's what we're gonna do and the next step will be to configure these employment with the secret so I have to give this deployment access to the secret that I created so that it will be able to pull that image from the stream however I just want to demonstrate what its gonna do or how it's going to behave without that secret configuration so I'm just gonna leave it like this and let's actually apply this configuration apply have any documents like this and if I do cube CTL pod I see image pull back off and it can connect to the container because it's waiting trying and failing to pull the image because it doesn't have authorization so the pot started but container can't be pulled so it's gonna retry now multiple times so I'm gonna delete that and all let's actually add that secret reference to the docker authentication and the way to do that is in the pod specification so on the same level as containers we're gonna configure attribute which is called image pull secrets image pull secrets and here we provide a name of the secret and this is it these two lines will configure deployment with access to the secret that contains docker registry access okay so let's apply that configuration again documents and let's see the pot and you see it's running because it was able to pull the image so so here we see pulling image successfully pulled image so that's how you configure that plumbing now since we have the second secret as well it's actually make sure that both are working so I'm gonna rename my deployment let's call it like this and I'm gonna use the second secret here and let's execute that again as well so this is how you configure your cluster to be able to pull the images from private repository there is one important note here the secret has to be in the same namespace as the deployment or stateful set or any other component that you're creating that needs to pull the image from that repository it has to be in the same namespace which means we have three applications in three different namespaces that all pull images from the private repository you have to create the secret three times in each namespace so to quickly wrap up in order to configure that you have to create a secret there's two ways to creating a secret either you can do dr. Logan manually and use the generated config JSON file to create the secret out of it or you can do it in one step using cube CTL create secret of docker registry type where you provide all the credentials in that command and the second step you will use that secret in the deployment or any other component that needs to pull the image from the docker registry I hope this was helpful and you learned something from this video if you want to see other videos about kubernetes you can subscribe to my channel and follow all my tutorials thank you for watching and see you in the next video,0.017238039523363113,0.061594828963279724,-0.011470399796962738,0.020878054201602936,0.056526653468608856,0.005277564749121666,-0.011389391496777534,0.02887297049164772,0.028153546154499054,0.040075480937957764,-0.005843228194862604,-0.10133188962936401,-0.0013404592173174024,0.01527285948395729,0.052726708352565765,-0.01710696518421173,0.032784320414066315,0.02695375308394432,0.014461555518209934,-0.009879998862743378,-0.1057305857539177,0.03513380512595177,0.036712903529405594,-0.04190382361412048,-0.06362293660640717,0.05571883171796799,0.01792917028069496,-0.02737266942858696,0.030555078759789467,0.006641885731369257,-0.005054692272096872,-0.03862675651907921,0.05115954205393791,-0.0029867449775338173,0.149513378739357,0.08792747557163239,0.042410049587488174,-0.040876660495996475,-0.026176130399107933,-0.020403729751706123,0.08609841763973236,-0.06568442285060883,-0.0336761511862278,-0.07700909674167633,0.01292121410369873,0.015271550975739956,0.0018602306954562664,-0.048565544188022614,0.037632450461387634,-0.009747466072440147,-0.03994761034846306,-0.04343323037028313,-0.003550529247149825,0.02417520433664322,0.03395099565386772,0.07089800387620926,0.01906038261950016,0.06466123461723328,0.09248550236225128,0.016739163547754288,0.013089615851640701,-0.05114946886897087,-0.031077880412340164,-0.004069643560796976,0.014085168018937111,0.039455391466617584,0.023361733183264732,-0.014405754394829273,0.07372524589300156,-0.1289435774087906,0.01879601739346981,0.007824649102985859,0.03466728329658508,-0.04726042225956917,-0.028157180175185204,0.0002646985522005707,-0.08075863867998123,0.010459920391440392,-0.02735995687544346,-0.07237744331359863,0.0028094216249883175,0.005114259663969278,0.09247493743896484,-0.00854396540671587,-0.06753622740507126,0.017176255583763123,-0.021701805293560028,-0.028980588540434837,0.05528966709971428,-0.023588037118315697,-0.03128571808338165,-0.06011556461453438,-0.06547322869300842,-0.08870110660791397,0.06349103152751923,-0.010761922225356102,-0.0804518461227417,-0.019775211811065674,0.02205357514321804,0.006514477077871561,0.032122090458869934,0.027983687818050385,-0.04739629477262497,0.0035709328949451447,0.10154831409454346,0.0416237972676754,-0.04302290454506874,-0.007421144749969244,-0.03088499791920185,0.06325667351484299,-0.02981850691139698,0.0368194580078125,-0.02331879734992981,0.014444082975387573,0.014636222273111343,-0.07958974689245224,0.002009210642427206,-0.0533389188349247,0.02740056812763214,-0.007891502231359482,0.06440100818872452,-0.09878450632095337,0.07180866599082947,0.019943680614233017,-0.04134314879775047,0.03407442569732666,-0.0945000946521759,-1.0210513826910282e-34,0.00033055056701414287,-0.04880047217011452,0.11587631702423096,-0.05085861682891846,0.036753058433532715,-0.09949560463428497,-0.03563808649778366,-0.08982238173484802,-0.047104671597480774,-0.020031994208693504,-0.05614268034696579,0.023987362161278725,-0.0015091950772330165,-0.0058673229068517685,0.03795570507645607,0.03777928650379181,-0.08193620294332504,0.06888747960329056,0.06721998006105423,0.02008056454360485,0.008909156545996666,-0.03507319837808609,-0.024409599602222443,-0.020861782133579254,-0.019279584288597107,-0.06624141335487366,0.08555637300014496,-0.0556519441306591,0.0944688469171524,-0.003767662914469838,0.0601944774389267,0.009928271174430847,0.0931251123547554,-0.02525218017399311,-0.006033645011484623,-0.037641916424036026,0.02437109500169754,0.04698052257299423,-0.06773894280195236,0.07771524041891098,0.033370327204465866,-0.10225352644920349,0.025367913767695427,0.0009515445563010871,0.01690182089805603,-0.04518991708755493,-0.0018948750803247094,-0.05004968121647835,0.06281711906194687,0.0037321995478123426,0.05685942620038986,-0.09523940831422806,-0.07913435995578766,-0.029597997665405273,0.006159774027764797,-0.03355614095926285,0.05976257100701332,-0.02579467184841633,-0.04548133164644241,0.00011464037379482761,-0.07358276844024658,0.07418380677700043,0.04141050577163696,0.013461734168231487,0.004288509488105774,-0.015146353282034397,-0.02417338453233242,0.09419553726911545,-0.10194409638643265,0.027664372697472572,-0.005571289453655481,0.10828500986099243,-0.048917707055807114,-0.072635717689991,0.051518991589546204,-0.030160052701830864,-0.011316096410155296,0.0705258771777153,-0.07950057834386826,0.03665884956717491,-0.012799516320228577,0.0037046789657324553,-0.0402427539229393,0.02580539509654045,-0.05289321765303612,-0.018481845036149025,0.026724625378847122,0.04101226106286049,-0.0033289133571088314,0.04217172786593437,0.02683180943131447,-0.0019237129017710686,-0.11916255950927734,0.033859733492136,-0.12050813436508179,-1.804181423078679e-33,0.04611387848854065,0.031435154378414154,-0.003880503121763468,-0.014428986236453056,0.07464214414358139,0.01999734155833721,0.07686836272478104,0.08331072330474854,0.0021702139638364315,-0.00369643815793097,0.005770338699221611,0.057729050517082214,0.007710831705480814,0.019876718521118164,-0.04249647259712219,0.012902189046144485,-0.027675889432430267,-0.022158868610858917,-0.041155856102705,-0.009612475521862507,0.011132724583148956,-0.008440052159130573,0.05022180825471878,0.10906992852687836,-0.08019551634788513,0.022410593926906586,0.01997978799045086,0.03796091303229332,-0.058778975158929825,-0.01782953552901745,-0.037819549441337585,-0.03407241031527519,-0.07423832267522812,0.03930278122425079,0.06055562570691109,-0.00010629771713865921,-0.02644224278628826,0.03922224044799805,-0.06575442105531693,-0.047281499952077866,-0.017179014161229134,-0.016001902520656586,-0.1035764291882515,0.02966993674635887,-0.022065801545977592,-0.04810849949717522,0.10283257812261581,-0.057343728840351105,0.011153291910886765,0.011425395496189594,-0.01261806394904852,-0.038592204451560974,0.023953387513756752,0.10133613646030426,-0.04654873535037041,0.03853961080312729,0.003047238104045391,0.046779606491327286,-0.03367786854505539,0.016730722039937973,0.08936961740255356,-0.11863911896944046,-0.05291533097624779,0.04564087092876434,0.0404343418776989,-0.07437585294246674,0.011261970736086369,0.02334815077483654,-0.15017370879650116,0.031116802245378494,0.016886688768863678,-0.08951672911643982,0.007287413813173771,0.03788936883211136,0.001066237105987966,-0.02326556295156479,0.0319598987698555,0.0037748338654637337,0.02772025391459465,0.0149819515645504,0.006633357610553503,-0.002253870014101267,-0.018859531730413437,-0.1029708981513977,0.08843591064214706,0.023108484223484993,0.09129820019006729,-0.03395458310842514,0.052930798381567,-0.02636028453707695,-0.043905310332775116,-0.0464935265481472,-0.0035071431193500757,0.010157464072108269,0.03808397427201271,-1.810108685162959e-8,0.0266119372099638,-0.019621970131993294,0.029207846149802208,0.04105896130204201,0.03432118520140648,-0.03250803425908089,-0.00936074834316969,0.003970653750002384,-0.08530798554420471,-0.040697939693927765,-0.04806677997112274,-0.048319797962903976,-0.07049113512039185,0.034028150141239166,0.028944972902536392,-0.0005919593386352062,0.02435257099568844,0.02702874317765236,0.06559065729379654,-0.09816072136163712,-0.12134795635938644,-0.09504091739654541,0.06551343202590942,-0.04651271551847458,-0.08175460249185562,0.08925506472587585,0.04084557667374611,0.000046175373427104205,0.07828153669834137,-0.016593797132372856,0.0306236669421196,-0.03623675927519798,-0.030700046569108963,0.069153793156147,-0.019156167283654213,-0.0009044540347531438,-0.07931798696517944,0.043444059789180756,0.007434956729412079,0.0009153377031907439,-0.02467470057308674,-0.022001095116138458,-0.0673184022307396,-0.02654266729950905,-0.0028480691835284233,0.11103111505508423,0.07653091847896576,0.05542886629700661,-0.022722844034433365,0.011151659302413464,0.07178705185651779,-0.08651115745306015,-0.03518100082874298,0.1064661368727684,-0.007012228015810251,-0.041281942278146744,0.039359066635370255,-0.0020504542626440525,0.0483928918838501,0.11117127537727356,-0.0010646111331880093,0.04151957482099533,-0.03522900864481926,0.053191207349300385,0.0426221638917923,0.04973863810300827,-0.0200419332832098,-0.017164193093776703,0.061561550945043564,-0.03506088629364967,-0.0172329843044281,0.00901200994849205,0.024029366672039032,0.06106799468398094,-0.01784849911928177,-0.08190084248781204,0.04034258425235748,0.02577122114598751,0.017252197489142418,-0.03497504070401192,0.09240539371967316,0.014919307082891464,-0.016342459246516228,-0.00746111897751689,-0.05017159879207611,0.0006104311323724687,0.015204248018562794,0.008866301737725735,-0.06362399458885193,0.07353880256414413,-0.00936637818813324,0.0316881388425827,0.003692700993269682,-0.03183111920952797,0.023300541564822197,-0.013836590573191643,0.06777353584766388,-0.022718356922268867,0.05550333857536316,0.14992167055606842,0.03209825977683067,-0.04503989964723587,-0.024163994938135147,-0.04699799790978432,0.05221258103847504,-0.07686571031808853,0.0019153141183778644,-0.11025891453027725,-0.002894539153203368,-0.04569419473409653,-0.035157132893800735,0.002118679229170084,0.053146690130233765,-0.031349655240774155,-0.03266151621937752,-0.07383488863706589,-0.005566108040511608,-0.0037786371540278196,-0.014963706023991108,0.08233266323804855,0.028322981670498848,0.02664932608604431,0.062195949256420135,-0.040793731808662415,0.07158666104078293,-0.03287287801504135,-0.00701378146186471,0.05306849628686905,-0.041085995733737946,0.04604203253984451,0.04273343086242676,0.025760184973478317,0.0712316706776619,-0.14308792352676392,-0.00009145281364908442,-0.009195355698466301,0.011952398344874382,-0.1205945834517479,0.008328752592206001,0.07073961198329926,0.012747273780405521,0.007928394712507725,0.023673882707953453,-0.07640880346298218,0.0008506434969604015,0.01564834639430046,0.033786069601774216,-0.006041073706001043,-0.11442092806100845,0.016510186716914177,0.005296820774674416,-0.030291642993688583,0.04816172644495964,-0.017836181446909904,-0.0193486288189888,-0.07037679851055145,-0.02431333065032959,-0.058465342968702316,0.05566994845867157,0.00820896215736866,-0.042687542736530304,0.0005795228644274175,0.05594787001609802,0.008629753254354,0.01240952406078577,-0.049489330500364304,0.040881700813770294,-0.06509684026241302,0.08277477324008942,0.0411071814596653,-0.0473143495619297,0.0036956605035811663,0.03958267346024513,0.06153121963143349,-0.04797010123729706,0.004258241970092058,-0.06699026376008987,0.01813536509871483,-0.004777096677571535,-0.027046114206314087,0.0001972177706193179,-0.06025942414999008,0.012340487912297249,0.0448269248008728,0.09881389141082764,-0.06770764291286469,0.0821482241153717,-0.05073525756597519,0.02222297526896,0.06554117798805237,-0.11810589581727982,4.504825327479159e-33,0.0268543791025877,-0.028231538832187653,0.022358383983373642,-0.015223823487758636,0.11050698161125183,-0.02229735627770424,-0.026830216869711876,-0.09299387782812119,-0.08723470568656921,-0.013575158081948757,-0.04938989505171776,0.0665203258395195,0.006431450601667166,0.0591970756649971,0.02448437735438347,0.021663933992385864,-0.0596231147646904,0.02679191157221794,0.08156225830316544,0.019602015614509583,0.0005555955576710403,-0.042465098202228546,-0.10359916090965271,0.0583437904715538,0.053934454917907715,-0.06904613971710205,0.04778207838535309,-0.023882383480668068,0.031035076826810837,0.020757468417286873,0.021318987011909485,0.0547611378133297,0.053361181169748306,-0.02535926178097725,0.0177821796387434,-0.01508466899394989,0.002154923975467682,0.005260223988443613,-0.04934442788362503,0.03394242003560066,0.038622476160526276,-0.06771251559257507,0.028824804350733757,0.0032382099889218807,0.012446070089936256,-0.04205343872308731,0.06283007562160492,-0.05423688516020775,0.10693258792161942,0.04739086329936981,0.04998065158724785,-0.14082132279872894,-0.021435022354125977,0.01739841140806675,-0.007378787267953157,-0.022050175815820694,0.01891259104013443,-0.07857367396354675,-0.014577073976397514,-0.11866055428981781,-0.10942438244819641,0.027394495904445648,0.003606364829465747,0.08035045117139816,-0.025439199060201645,-0.026547890156507492,0.012850722298026085,0.07363507151603699,-0.03249536454677582,0.0203920379281044,0.0014023337280377746,0.08921507745981216,-0.007569759152829647,-0.05835144594311714,0.0003112870326731354,-0.03178821876645088,0.0076299998909235,0.06468529254198074,-0.061585210263729095,0.09458774328231812,-0.020508771762251854,-0.008185421116650105,-0.08438263088464737,0.04457569122314453,-0.06882675737142563,-0.02244115062057972,0.038775961846113205,0.037890706211328506,0.02867252752184868,-0.002908875234425068,0.027778781950473785,0.008887817151844501,-0.07640227675437927,-0.013010685332119465,-0.05668988451361656,-6.947956255838893e-33,0.03977496922016144,0.027923252433538437,0.05443926528096199,-0.014821067452430725,0.04863624647259712,0.02300388552248478,0.045245565474033356,0.03208361193537712,-0.008037871681153774,-0.07720516622066498,-0.041944053024053574,0.037675924599170685,0.0031723149586468935,-0.046358298510313034,-0.1409386545419693,-0.029287070035934448,0.02946540340781212,-0.014439386315643787,0.010901786386966705,-0.02507905848324299,-0.021134737879037857,-0.07210478186607361,0.02398810349404812,0.06245337426662445,-0.005491824820637703,-0.01000655721873045,-0.04528383910655975,-0.04934440553188324,-0.025777382776141167,-0.012638910673558712,-0.039458561688661575,-0.014008683152496815,-0.016697071492671967,-0.012966890819370747,0.020137842744588852,-0.0413522869348526,-0.0444658137857914,0.041728176176548004,-0.023532690480351448,-0.12424180656671524,-0.0018448405899107456,-0.03852187097072601,-0.06626668572425842,0.034347761422395706,-0.02564205229282379,-0.01754649728536606,0.03352535888552666,-0.041114166378974915,-0.0006349846953526139,0.04936772584915161,-0.0659443587064743,-0.0136373620480299,0.0364459790289402,0.08727306872606277,-0.0694914385676384,0.03412478789687157,0.02613530121743679,0.10469476133584976,0.010818755254149437,0.08010749518871307,0.11087203025817871,-0.09928973019123077,-0.05694638565182686,0.04082104191184044,-0.047561049461364746,-0.04228905960917473,-0.0540001355111599,-0.007451246492564678,-0.17032164335250854,0.1233239620923996,-0.04763273894786835,-0.01497828308492899,0.015552086755633354,0.0018194164149463177,0.027257157489657402,-0.0579669289290905,-0.009390369988977909,-0.035353515297174454,-0.022539416328072548,-0.010919884778559208,0.03159559890627861,0.024928655475378036,-0.029783161357045174,-0.034329853951931,0.0347299799323082,-0.07813222706317902,0.06434430927038193,-0.030225615948438644,0.042517535388469696,-0.009436577558517456,-0.0766272023320198,-0.04000217095017433,-0.048979099839925766,-0.009006280452013016,0.04488284885883331,-5.439245853722241e-8,0.04810815304517746,0.02117784135043621,-0.008444290608167648,-0.02840844914317131,0.006612416356801987,0.0402090847492218,-0.002019527368247509,0.009548836387693882,0.003526784013956785,0.003160986350849271,-0.0383511446416378,-0.005318290088325739,-0.1347762793302536,0.04905981943011284,0.011664506047964096,0.04870456084609032,0.04450752213597298,-0.01977483369410038,0.028582481667399406,-0.08783163875341415,-0.10307355970144272,-0.10977619141340256,0.06626082956790924,0.009482665918767452,-0.015918750315904617,0.07982684671878815,0.02656969241797924,-0.011064737103879452,0.020312413573265076,-0.00185334961861372,0.007514991331845522,-0.022984035313129425,0.0003844934399239719,0.09842857718467712,-0.026339124888181686,-0.01994527131319046,-0.0996137410402298,0.03632877394556999,0.023793937638401985,0.00567418709397316,-0.015580534934997559,-0.00934908539056778,-0.023283550515770912,-0.0590180866420269,-0.0005545780877582729,0.01874060183763504,0.043852515518665314,0.019552960991859436,-0.04642491787672043,0.04237150028347969,0.06218859553337097,-0.09137914329767227,-0.0495876669883728,0.08291137963533401,0.04484741762280464,0.05272762477397919,0.0948353037238121,-0.017572348937392235,0.11017294973134995,0.11600429564714432,-0.021404337137937546,0.04190820828080177,-0.025363732129335403,-0.023401346057653427
pMO26j2OUME,2020-02-15T13:12:59Z,Run Jenkins in Docker Container - Jenkins Pipeline Tutorial for Beginners 1/4,"so in this video we're gonna set up Jenkins from scratch in a docker container then we're gonna create a multi branch pipeline and connected with a git repository during this step I will also explain how to create different types of credentials in Jenkins and finally I will show you the basics of a Jenkins file to configure this multi branch pipeline so step one is to run Jenkins in a docker container so to use that we need to find an official image for Jenkins on docker hub so let's go and as you see here Jenkins results in an official image and some other images and if you click here you see that this image the official image has been deprecated and the last version is 2.6 T which is very old Jenkins version and instead of it we're gonna use this image here so that would be actually this one because this one is now officially maintained by the Jenkins community and also if you see the text the latest image actually has Jenkins version of to point 219 which for most of the plugins it's important to have a higher Jenkins version otherwise they can't be installed so we're going to take this image and this name of the image so on my command line I'm gonna execute docker run using this image right so I'm gonna dock run and the image however before I run this I need to add some options like I need to expose the port so that I can access it from my browser etc so let's actually go back and see the documentation of how to run this so all the explanation is here so these are some of the options that we're gonna use and actually let's go and do it so first one is I'm gonna expose the ports and the first part I'm gonna expose is port 8080 the Jenkins application inside container will run it port 8080 because Jenkins runs on Tomcat which by default starts at this port and I'm gonna bind it to my hosts port 8080 another port we can expose is 50,000 which is basically a port where drink is master and slave communicate so this will enable my Jenkins to find slaves in case I had some so the ports are open now another thing I'm gonna do is I'm gonna run it in detach mode and I'm also gonna bind volumes to it so to do that I'm gonna use minus B and I'm gonna use a named volume which I'm gonna call Jenkins home meaning I don't have to have this as a folder it's gonna be automatically created I'm just giving it a name which can be whatever you want and I'm gonna bind it to directory inside Jenkins container drink its image under slash bar slash Junkins hope this director is real and it's inside of docker container and this will create automatically create a volume now you have to be careful here because if you were to use a host volume here which basically means that you take an already existing directory on your laptop machine and binding it to the Jenkins container you might get some permission issues meaning the Jenkins user might not be able to write to that folder and that could be a problem you can actually check out my video which I made about docker volumes where you can learn in more detail how this works and the reason why we need to create a volume for Jenkins is to have data persistency for Jenkins so when we remove the container and restarted recreated the data will still be there and the reason why we need to persist this data is because all the Jenkins builds all the configuration and all the Jenkins plugins and also Jenkins users will be stored there so without this data you will basically have to reinitialize the whole Jenkins so important part here and we're gonna use the latest take of Jenkins and these are all the options we need so I'm gonna correct this one here look at here and I'm gonna run this and it's pulling the image from the docker hub it's gonna start in just couple of seconds so the image has been pulled and the docker container must be running already so if I do docker PS I see my Jenkins container running and we actually need its locks so I'm gonna do docker locks with the container ID and I'm gonna see that Jenkins started and its initial setup is needed and this is the password I'm gonna need to initialize it so I'm gonna copy that and if I go to localhost 8080 I will paste that password and it should start initializing so I'm going to go with the suggested plugins and this is gonna take some time to install all the plugins so depends on what technologies your application uses or what source management tools etc he will need different plugins for Jenkins and I'm just gonna go with the community one suggested ones and later of course in Jenkins you can manage these plugins you can delete them you can add new ones etc this is just the base so now that it's done I'm gonna create the first admin user let's go at Jenkins user some password really interesting I'm gonna just mine and I'm gonna leave it localhost Jenkins is ready and this is view I get so if I go to new item because I installed all these plugins I see different types of Jenkins projects I can create but default usually have the freestyle project freestyle project is used for simple single tasks like if you want to just run tests for example whereas with pipeline you can configure the whole delivery flow like test build package deploy your application etc pipeline is a more recent addition so before that they would just chain multiple freestyle projects to get a pipeline like project the pipeline project type is just for a single branch but in this video we're going to create a multi branch pipeline which will apply to multiple branches of the same repository and if I go to manage Jenkins that's where you as an admin user have all the tools to configure Jenkins and under manage plugins you can actually add or delete or manage or update the plugins that you have so in available I have all the plugins that I could install in addition to my Jenkins and install I have all the ones that I have actually selected at the beginning you can remove them again or you can add new plugins in the next section of this video I'm gonna show you how to create a multi branch pipeline and how to connect it to your kid repository and how to build your project using that pipeline",0.011964211240410805,0.07021138072013855,0.016757356002926826,-0.008994298987090588,-0.019978808239102364,-0.045444536954164505,-0.0904720351099968,-0.02135802060365677,-0.0336829349398613,-0.008867889642715454,-0.07721129059791565,-0.053136102855205536,-0.02705054171383381,0.009714330546557903,-0.053875453770160675,-0.016590362414717674,0.03072940558195114,0.07721934467554092,0.024747753515839577,-0.03329434245824814,-0.05300693213939667,-0.023804018273949623,-0.002112019807100296,-0.021227478981018066,0.027067307382822037,-0.006289046257734299,-0.0031810784712433815,0.00845948327332735,-0.037902526557445526,0.0007036877796053886,0.014407425187528133,-0.05084369331598282,0.07581919431686401,0.001864262274466455,0.06092676520347595,0.07965587824583054,0.11219201982021332,-0.03539133816957474,0.015105294063687325,0.024767978116869926,0.0402974896132946,-0.09314835071563721,0.009291792288422585,-0.05105074122548103,-0.03649440035223961,-0.03346532583236694,-0.0843099057674408,-0.09328421205282211,0.028931643813848495,0.04723058268427849,-0.08055142313241959,-0.10552605241537094,0.000996039598248899,-0.03534573316574097,0.007168489042669535,0.050866950303316116,-0.01894000545144081,0.12896636128425598,0.0016990804579108953,-0.03233494609594345,-0.006600961089134216,-0.0658143013715744,-0.00797093752771616,0.0649041086435318,-0.015472805127501488,-0.02777898497879505,0.001538353506475687,-0.0007318403222598135,0.008860370144248009,0.009210196323692799,-0.06045709550380707,0.014007147401571274,0.02597651258111,-0.11542568355798721,0.016221119090914726,0.025125883519649506,-0.002711311914026737,0.01628377102315426,-0.08035120368003845,0.028241967782378197,-0.026155520230531693,-0.03371237963438034,-0.04398064687848091,-0.011371495202183723,-0.13693936169147491,0.10517056286334991,0.013838289305567741,-0.02598378248512745,0.05047231167554855,-0.014251252636313438,-0.011447608470916748,-0.022523194551467896,-0.08496935665607452,0.03007563203573227,0.0002197026915382594,0.004317007958889008,-0.08718282729387283,-0.012882906012237072,0.035129863768815994,-0.05441410839557648,0.021505890414118767,-0.021168101578950882,0.08576735109090805,-0.02331654168665409,0.005497520323842764,-0.007982554845511913,-0.025783753022551537,-0.003493033116683364,-0.02949931100010872,-0.03846120461821556,-0.002867024391889572,-0.06536874175071716,0.00632075360044837,0.04135768488049507,0.03127461299300194,0.00463750259950757,0.012511229142546654,-0.05230377987027168,-0.029232194647192955,0.0504588857293129,0.06619247794151306,-0.058885253965854645,0.017040763050317764,-0.03512231260538101,-0.0045390953309834,0.04396975785493851,-0.043113529682159424,-2.9489516576483337e-34,0.08135594427585602,-0.07271510362625122,0.06605788320302963,0.057711292058229446,0.17966938018798828,-0.010491828434169292,0.030382294207811356,-0.06197115033864975,-0.11314606666564941,0.09032424539327621,-0.001824077102355659,-0.010545136407017708,-0.047727350145578384,0.031300876289606094,-0.05540033057332039,-0.10098066926002502,-0.07256542146205902,0.009827831760048866,-0.02414131537079811,-0.04688132554292679,0.059245914220809937,-0.07133758813142776,-0.10471048206090927,0.007076803129166365,0.04360711947083473,-0.05297461524605751,0.04225398972630501,-0.007706284523010254,0.04693194478750229,0.007659316994249821,-0.042069192975759506,0.031162362545728683,-0.04044019803404808,-0.03686530888080597,0.021755721420049667,0.012412021867930889,0.04809017851948738,0.06562677770853043,-0.03529756888747215,0.02806692197918892,-0.059011783450841904,-0.044289927929639816,0.05436113104224205,-0.07379784435033798,0.05837064981460571,-0.05747634544968605,0.0022582130040973425,-0.027511605992913246,0.05724122002720833,0.04437212646007538,0.027151163667440414,-0.11221939325332642,0.0046564252115786076,-0.008049244061112404,0.03947794437408447,-0.038912903517484665,-0.04341743141412735,-0.0161767415702343,-0.050394900143146515,-0.03840767592191696,-0.13582269847393036,0.11855477839708328,-0.04154812544584274,-0.0238497257232666,-0.03863270580768585,-0.007679020054638386,0.033892981708049774,0.04135771468281746,0.02177940495312214,0.12329363822937012,0.03454854339361191,0.06192515790462494,0.01772322505712509,-0.008395859971642494,0.07285601645708084,0.022732436656951904,0.020569780841469765,0.019633105024695396,0.04518058896064758,0.011608157306909561,0.0007729544304311275,0.003095766296610236,0.027859870344400406,0.02865525521337986,-0.03883736953139305,-0.025910021737217903,0.026167118921875954,0.05326376110315323,0.045199017971754074,0.009472642093896866,-0.007543359417468309,-0.04409182071685791,-0.0811118334531784,-0.020486151799559593,-0.05354022607207298,-2.7173168223989556e-33,0.08202406764030457,0.03563594073057175,-0.04088430851697922,0.12786120176315308,0.033290598541498184,-0.006370650138705969,0.11909020692110062,0.003983120433986187,0.1069386750459671,-0.09871876239776611,-0.09842749685049057,0.03767530247569084,-0.009897501207888126,0.07946392148733139,-0.03657057508826256,-0.056249186396598816,-0.048843275755643845,-0.02824012190103531,0.04007178544998169,-0.0019415640272200108,0.01094990223646164,0.036528583616018295,-0.05361238494515419,0.02668888121843338,-0.029398242011666298,-0.05097975954413414,0.05812618508934975,0.014256030321121216,-0.08271916955709457,0.016130905598402023,0.02799464762210846,-0.03720526397228241,0.0206315815448761,0.06532653421163559,-0.007890238426625729,-0.011384272016584873,0.017914464697241783,0.10071578621864319,0.026907384395599365,-0.06212181597948074,-0.008133345283567905,-0.11157891899347305,0.007120490074157715,-0.05832824856042862,-0.022504577413201332,-0.03516272082924843,0.1637267917394638,-0.011643804609775543,-0.12228452414274216,0.08200675249099731,-0.11120611429214478,0.04276449605822563,-0.032878659665584564,0.003299795323982835,-0.006465018726885319,-0.04293644428253174,0.055774882435798645,0.007255152799189091,-0.06771708279848099,0.11745207756757736,0.033698953688144684,-0.00402333028614521,0.06896301358938217,0.07721401751041412,-0.016542425379157066,-0.05127962678670883,-0.05963330715894699,0.034752510488033295,-0.06278756260871887,0.037239182740449905,-0.022080088034272194,0.022753601893782616,0.022628983482718468,0.02629304677248001,0.0023277602158486843,-0.10884971916675568,-0.08189734816551208,0.014289958402514458,0.009361837059259415,0.09297802299261093,-0.011178702116012573,0.04009821638464928,-0.059102848172187805,-0.03083844482898712,-0.004650351125746965,0.025126079097390175,0.12619513273239136,0.02701726369559765,0.0023975297808647156,-0.02143087610602379,0.024937542155385017,-0.008699852973222733,-0.0010423030471429229,0.023903684690594673,-0.029461026191711426,-2.0943058842703977e-8,0.03379339724779129,0.05353589728474617,-0.011647846549749374,0.03493713587522507,0.0003757406084332615,0.024614540860056877,0.06358654052019119,0.059970270842313766,-0.03674996271729469,-0.012409632094204426,-0.032609518617391586,0.014306919649243355,-0.05235901102423668,0.049817558377981186,0.03248796984553337,0.04713244363665581,-0.013878446072340012,-0.047879353165626526,0.0148161044344306,-0.01580643467605114,-0.013057433068752289,-0.0058154151774942875,-0.026305217295885086,-0.05490081384778023,0.006003232207149267,0.054213784635066986,0.01933320425450802,0.0675695538520813,-0.004944145679473877,-0.023004936054348946,0.011258979327976704,-0.002024301327764988,-0.07585342228412628,0.015229652635753155,-0.004883667919784784,-0.021900849416851997,0.009993363171815872,0.022991908714175224,0.02592899277806282,-0.02776629477739334,-0.019819442182779312,0.011754228733479977,0.02609063871204853,-0.07854226231575012,-0.08937084674835205,0.05182185024023056,-0.0039058036636561155,-0.020882735028862953,-0.034278519451618195,0.024533657357096672,0.03309710696339607,0.014777269214391708,0.005893801338970661,0.006766738370060921,0.13182705640792847,0.09868301451206207,0.10868639498949051,0.004808568861335516,-0.012425456196069717,-0.0047306520864367485,0.01106935739517212,0.05512337386608124,0.006855065003037453,0.010093440301716328,-0.029887251555919647,0.024019019678235054,-0.0007537431665696204,-0.017193803563714027,0.025053365156054497,-0.049862466752529144,-0.05330386012792587,0.03633928298950195,0.05379867926239967,-0.008253377862274647,-0.04317846894264221,-0.05514448136091232,0.038414958864450455,0.025348449125885963,-0.03733125701546669,-0.03946428373456001,0.03401844948530197,0.021194057539105415,-0.04051490128040314,-0.03452550619840622,-0.07252388447523117,-0.044843483716249466,-0.011209066957235336,-0.02378148026764393,0.02029082551598549,-0.009452058002352715,0.026560792699456215,0.0044400859624147415,-0.09654950350522995,-0.06701671332120895,0.009865394793450832,-0.0012256375048309565,0.032384954392910004,-0.02330702356994152,0.016650980338454247,0.07965909689664841,0.048666298389434814,0.01586153358221054,0.0815739557147026,-0.02650679275393486,0.06164148822426796,-0.06401986628770828,0.07802177220582962,-0.08143932372331619,-0.022310109809041023,0.041575945913791656,-0.1125439926981926,-0.09233072400093079,0.011996285989880562,0.04070040583610535,-0.06294326484203339,-0.09112532436847687,0.0019986170809715986,0.0033672356512397528,0.049418672919273376,0.08548585325479507,0.05654595419764519,0.11005736142396927,-0.006559785921126604,0.016824541613459587,0.02240207977592945,0.03724298253655434,-0.003874480724334717,0.025997739285230637,-0.027335960417985916,-0.03228192403912544,0.02202829159796238,-0.06358982622623444,0.015560154803097248,-0.09366215765476227,-0.03640666976571083,0.019077125936746597,0.0286455936729908,-0.14539432525634766,-0.004039624240249395,-0.002550510223954916,0.001068680314347148,0.05218050628900528,-0.022529693320393562,-0.06468670815229416,0.0469941645860672,0.004208976868540049,-0.03367216885089874,-0.013149200938642025,-0.10925918817520142,0.0731133222579956,-0.0015108833322301507,-0.015574625693261623,0.04139937460422516,0.0005305053200572729,-0.02119997888803482,-0.04277176782488823,-0.08018007129430771,0.02850814163684845,0.060797639191150665,0.03369041904807091,-0.08424199372529984,0.02378639578819275,0.037574972957372665,-0.05755283683538437,0.008200302720069885,-0.01982834003865719,0.12456832826137543,-0.028083868324756622,0.06412479281425476,0.0007998097571544349,-0.01799883134663105,-0.053343720734119415,0.06212190166115761,-0.03586030751466751,0.01411152258515358,-0.07251065224409103,-0.08380775898694992,0.01639907993376255,0.016718665137887,0.012668823823332787,-0.0463748499751091,-0.03202270716428757,0.013575366698205471,0.03321477770805359,0.08538931608200073,-0.04161813110113144,0.04848850890994072,-0.03623167797923088,-0.030367283150553703,0.04610099270939827,-0.06998308002948761,3.7018521159301625e-33,0.04582846164703369,-0.029688505455851555,0.05345806106925011,0.037986304610967636,0.1757453978061676,-0.003587291808798909,-0.00224012928083539,-0.0720391571521759,-0.10252155363559723,0.015058881603181362,-0.0721815973520279,-0.01950301043689251,-0.09409181028604507,0.08563995361328125,-0.038453176617622375,-0.05771433562040329,-0.058588236570358276,0.0006120200851000845,-0.05402865633368492,0.002647585468366742,0.03809644654393196,-0.024912631139159203,-0.14196659624576569,0.020300637930631638,0.059139184653759,-0.09773837774991989,0.04635770991444588,0.043247826397418976,-0.00638723187148571,-0.006025135517120361,-0.04158109426498413,0.011362714692950249,0.01838507503271103,0.015825442969799042,0.050303030759096146,-0.042148407548666,-0.0015380465192720294,0.03607238829135895,-0.08123904466629028,0.036481019109487534,0.047868166118860245,-0.03717146813869476,-0.004503745120018721,-0.01655529998242855,0.07987241446971893,-0.061971694231033325,0.007545917760580778,-0.05362636595964432,0.1414635330438614,0.02385810762643814,0.06200270354747772,-0.10720960050821304,0.024392981082201004,-0.01008694525808096,-0.033570922911167145,-0.02581685222685337,-0.028054222464561462,-0.023886196315288544,-0.03172425925731659,-0.06449169665575027,-0.09998072683811188,0.06236952915787697,-0.022202907130122185,0.05353514105081558,0.011186325922608376,0.01625198684632778,0.011944672092795372,0.03704073280096054,0.004591161850839853,0.09131374210119247,-0.010217283852398396,0.05730801448225975,-0.007700169458985329,-0.024806708097457886,0.05528175085783005,-0.03118828497827053,0.05266505479812622,0.06743305176496506,0.05180606245994568,0.07996445894241333,-0.017808817327022552,0.0546698123216629,-0.06115015223622322,-0.009255028329789639,0.00007385146454907954,0.0045522102154791355,0.03585469722747803,0.05585341155529022,0.0685596615076065,0.05427495390176773,0.021090419963002205,0.0540044791996479,-0.10902095586061478,0.030491244047880173,-0.022052178159356117,-7.045967505442517e-33,0.04011676087975502,0.04661719501018524,0.04956551641225815,0.04619969427585602,-0.012103968299925327,0.026544950902462006,0.06598904728889465,-0.058136556297540665,0.05156632885336876,-0.13942910730838776,-0.036887820810079575,0.062240373343229294,-0.013911837711930275,-0.027456626296043396,-0.004588938318192959,-0.08115050196647644,-0.05030966177582741,-0.0336851105093956,0.0071233524940907955,0.02046137861907482,0.03769998624920845,-0.013157119043171406,-0.03599772974848747,0.04347739741206169,-0.028341421857476234,0.006144721060991287,0.02060065045952797,0.011515509337186813,-0.036733467131853104,0.03337972238659859,-0.009858229197561741,-0.04854637756943703,-0.0032648956403136253,0.0700593963265419,-0.0009362251148559153,-0.03404872864484787,0.044015198945999146,0.0627896711230278,-0.04235537350177765,-0.07392992824316025,-0.003168886061757803,-0.09995647519826889,0.00443875789642334,0.027726059779524803,-0.0009438779088668525,-0.04227040335536003,0.07769080251455307,-0.07320268452167511,-0.05343974754214287,0.11035329103469849,-0.060130756348371506,-0.06169110909104347,-0.0592222660779953,0.0639994814991951,-0.029242167249321938,-0.015918930992484093,-0.046830739825963974,0.10624490678310394,-0.0018423950532451272,0.04343665391206741,0.04949342459440231,-0.03270287811756134,-0.011896858923137188,0.10592205077409744,-0.08701622486114502,-0.009623762220144272,-0.06245240941643715,-0.025647995993494987,-0.11442149430513382,0.08168825507164001,-0.03072584606707096,-0.015409310348331928,-0.010553555563092232,0.00861749704927206,0.04346156865358353,-0.0845564678311348,-0.022466039285063744,0.009140913374722004,-0.010393679141998291,0.06878256797790527,0.04005928710103035,0.07361075282096863,-0.06830234825611115,-0.023574290797114372,-0.003758436068892479,-0.015593156218528748,0.056782275438308716,0.024727992713451385,0.041072383522987366,-0.08969242870807648,0.027865681797266006,-0.025035206228494644,-0.06642545759677887,0.02816607616841793,0.033858589828014374,-6.403529084764159e-8,0.07655897736549377,0.017132224515080452,-0.046023786067962646,-0.029434876516461372,0.05444708094000816,-0.03585672006011009,0.030106056481599808,-0.011123224161565304,-0.023609448224306107,-0.0037609355058521032,-0.0354587621986866,0.018820470198988914,-0.0768442377448082,0.014197910204529762,0.038870252668857574,0.014853738248348236,-0.0222456157207489,-0.05864997208118439,0.03880709037184715,-0.02153770998120308,-0.09297168254852295,-0.07156059890985489,0.00015593168791383505,0.004085273947566748,-0.05498925596475601,0.09568735212087631,0.006499608512967825,0.08629599958658218,-0.0774483010172844,0.010594299994409084,0.0657198578119278,0.012186357751488686,-0.08890904486179352,0.01897798664867878,0.043193887919187546,-0.039910491555929184,-0.024906927719712257,0.021809812635183334,0.050375279039144516,0.00031555909663438797,-0.021039187908172607,-0.05985967814922333,0.01350527722388506,-0.04747115075588226,-0.03884351998567581,0.0060224272310733795,0.01008955854922533,-0.018292170017957687,-0.050147492438554764,0.036338500678539276,0.02619718387722969,-0.045172564685344696,-0.004389023873955011,0.05055039003491402,0.07870981097221375,0.06344696879386902,0.11847542971372604,0.007366142235696316,0.031162412837147713,0.046362075954675674,0.015823673456907272,-0.0009940668242052197,0.04117369279265404,0.004260836634784937
9_s3h_GVzZc,2019-12-15T18:24:40Z,Docker vs Kubernetes vs Docker Swarm | Comparison in 5 mins,I've seen this question a lot and many of you have also asked what is the difference between docker and kubernetes because I guess it seems like they're competing technologies but the fact is they're not alternatives to each other in fact they go hand in hand together you could use this docker without kubernetes and you can use communities without docker however many projects in best practices actually combine those two technologies to get the best out of both so to demonstrate that docker and kubernetes go actually hand-in-hand here a couple of points for each technology so docker is a container technology which basically means that it creates an isolated environment for applications while kubernetes is an infrastructure for managing those containers where docker really shines is actually automating the building and deployment process of applications so it's actually widely used in the CI CD process while kubernetes comes into action after the application container has been deployed and it takes care of automating scheduling and management of that deployed application containers so overall docker is a container platform to configure build and distribute those build containers or kubernetes is an ecosystem for managing a cluster of multiple docker containers here's a diagram that shows exactly where docker and kubernetes fit in the whole process so docker is mainly used in the local development process so when you're developing a software application you would use docker containers for different services that your application depends on like databases message brokers etc and it's also used in the CI process to build your application and package it into an isolated container environment as we mentioned before once built that container gets stored or pushed into a private repository so now is where kubernetes actually comes into the game so if you have a development server that is made up of multiple virtual or physical servers you would basically install kubernetes on top of those servers and once kubernetes is running you will create a cluster that would actually run your docker containers on top of it and this diagram actually demonstrates how docker and kubernetes technologies can actually be used together so now in order to get a little bit more detailed view of how kubernetes cluster works so you have a kubernetes engine that spends multiple virtual physical servers to create one cluster where docker containers are actually running and you can distribute the number of doctor containers across those physical or virtual servers as you wish where each container will be its own application and the kubernetes service that actually enables docker to run in that cluster is cubelets so each node in the community's cluster will actually have one cubelet and the technology that is actually comparable with kubernetes is docker swarm so as we saw this is a kubernetes cluster set up and the docker swarm is basically an alternative to kubernetes which is a container orchestration tool so instead of cubelets you would have services called docker daemons that will run on each node and instead of the kubernetes engine you would just have docker that actually spends those multiple nodes that make up the cluster and the rest is the same so you have the same docker containers with the same applications running on that cluster set up so now that we saw that docker swarm is an alternative to kubernetes let's see how they actually compare what are the advantages and disadvantages of each technology so the first difference is that kubernetes is much more complex to install and set up then toku swarm and the reason for that is that kubernetes is actually more complex and has much more power but of course comes with a higher learning curve whereas docker swarm is more lightweight however is limited in its functionality so some of the powerful functionality that kubernetes offers in comparison is that it supports auto scaling where a stockist worm needs manual scaling to be configured it also has a built-in monitoring where as docker swarm depends on third-party tools for monitoring but also to talk about some advantages of docker swarm for example kubernetes doesn't support auto load balancing whereas docker swarm supports that feature and also with kubernetes you actually need to learn a new command-line tool which is the cube CTL for example whereas with docker swarm you actually have the same docker command line that you use with docker so you don't have a need for a separate command-line tool there thanks for watching the video I hope it was helpful and if it was don't forget to like it if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in a comment section below and I will try to answer them so thank you and see you in the next video,0.022413842380046844,0.029186764732003212,0.02703871577978134,-0.008721863850951195,0.04039270058274269,-0.04171507805585861,-0.06595245748758316,-0.02862439677119255,0.06616771966218948,0.05966738983988762,-0.05576387792825699,-0.025491073727607727,-0.03336109593510628,-0.011365598067641258,-0.01687295362353325,-0.071169413626194,0.08122560381889343,-0.034756820648908615,-0.012435483746230602,-0.03023340366780758,-0.0672171339392662,-0.04858962818980217,-0.047372546046972275,-0.03217284008860588,-0.002366430824622512,0.0891440212726593,-0.04566704481840134,0.009432979859411716,0.03252917900681496,-0.010400918312370777,-0.0717284232378006,0.0653574988245964,0.08323849737644196,0.03698834776878357,-0.041320811957120895,0.07761196047067642,0.060629360377788544,-0.03129925578832626,-0.022167300805449486,0.022343380376696587,0.047404032200574875,-0.12303168326616287,-0.03965941071510315,-0.07295234501361847,0.015239573083817959,-0.02705851010978222,-0.02220291458070278,-0.035439033061265945,0.03486192226409912,0.06117931008338928,-0.011664759367704391,-0.10964859277009964,0.024270109832286835,0.01258347649127245,-0.0008285639923997223,0.03774963319301605,-0.013306552544236183,0.03700708970427513,0.06363257765769958,0.0016662998823449016,0.017602592706680298,-0.0649932250380516,-0.021431073546409607,0.05254054814577103,0.1066736951470375,-0.027296271175146103,0.028239533305168152,-0.009192191995680332,0.06729487329721451,-0.059277746826410294,0.07681311666965485,-0.0035212195944041014,0.033293213695287704,-0.04168654605746269,-0.038876067847013474,0.03516954183578491,0.020402416586875916,0.00031237670918926597,0.007654271554201841,-0.02605549246072769,0.03902766481041908,0.039284635335206985,-0.019446825608611107,-0.0271036047488451,-0.11318255215883255,-0.026670435443520546,0.018974343314766884,0.014185067266225815,0.01552345510572195,-0.04429394379258156,-0.008819262497127056,0.07927382737398148,0.010446026921272278,-0.04783731326460838,0.034869734197854996,0.053162094205617905,-0.0468897745013237,0.0014128959737718105,0.0019318455597385764,-0.04673048108816147,0.05350996553897858,-0.007073806598782539,-0.032055094838142395,-0.027694733813405037,0.08899276703596115,-0.016053153201937675,0.004622307140380144,-0.036208610981702805,-0.024230463430285454,0.06891854107379913,-0.009039784781634808,0.005065304692834616,0.0037361569702625275,0.04265451431274414,-0.0028425785712897778,-0.012934356927871704,0.028623780235648155,-0.020383933559060097,0.04785003513097763,0.08002633601427078,0.08934690803289413,-0.09467177093029022,0.0806267037987709,-0.050516486167907715,0.002112901769578457,0.0939885824918747,-0.07755570858716965,3.6370405920491026e-34,-0.08588577806949615,-0.08414313197135925,0.002047986490651965,-0.0683160200715065,0.13510079681873322,-0.07165610045194626,-0.007205849047750235,-0.0355452336370945,-0.023628002032637596,-0.025680983439087868,-0.09705638885498047,0.06700872629880905,0.024830704554915428,-0.015649214386940002,0.11933592706918716,-0.05467934533953667,-0.04903513938188553,0.010348523035645485,-0.034047484397888184,-0.010891402140259743,0.03070303052663803,-0.06958205997943878,-0.06993143260478973,0.01256250124424696,0.10013055801391602,-0.09014181047677994,0.07886522263288498,-0.08064929395914078,-0.018893659114837646,-0.006120707839727402,0.01730155386030674,-0.04607776924967766,0.01701410859823227,0.054425496608018875,-0.06495261192321777,0.04061395674943924,0.04977940022945404,-0.0026590502820909023,-0.06759931147098541,-0.02295135334134102,-0.08123726397752762,-0.01367155835032463,0.00640919990837574,0.02916089817881584,0.11793394386768341,-0.06507844477891922,0.0076993294060230255,-0.04576707258820534,-0.03278391435742378,-0.0011093697976320982,0.026003345847129822,-0.007788561284542084,-0.032037459313869476,-0.007122104987502098,0.04740944504737854,0.05100022256374359,0.08119016140699387,-0.030597567558288574,-0.07094544172286987,0.04282553121447563,-0.09315261989831924,0.0008300340850837529,-0.022027049213647842,-0.050556063652038574,0.016018982976675034,0.011190595105290413,0.04952428862452507,0.11462379992008209,-0.02097843959927559,0.06884104758501053,0.06540606170892715,0.023509230464696884,0.0026456431951373816,0.012201141566038132,0.013422651216387749,-0.0004246485186740756,-0.01896101050078869,-0.009702888317406178,-0.06535240262746811,0.013871812261641026,0.02049427293241024,0.05139254778623581,-0.058694057166576385,0.07812002301216125,-0.08974632620811462,-0.009229026734828949,0.05091727897524834,0.05341543257236481,-0.020456351339817047,0.033349405974149704,-0.030093330889940262,0.003389409277588129,0.007123463321477175,0.000379742996301502,-0.08647237718105316,-1.9253247484675547e-33,0.0131338806822896,-0.015633152797818184,-0.03293083980679512,0.10505945980548859,0.07289590686559677,0.024981727823615074,0.04380550608038902,0.05169111117720604,0.011058165691792965,-0.057419147342443466,-0.08882709592580795,0.031017063185572624,0.002023629378527403,0.020191680639982224,-0.05217472091317177,-0.007886729203164577,0.024879349395632744,-0.11199670284986496,0.042787741869688034,-0.024176472797989845,0.06292259693145752,0.03332741931080818,0.02823609672486782,0.0059528411366045475,-0.08292482048273087,0.005978752393275499,-0.03761106729507446,-0.008203788660466671,-0.09116420149803162,0.0019433358684182167,0.03919019177556038,-0.056526586413383484,0.02009769156575203,0.0346851721405983,0.12178841233253479,0.0697263553738594,-0.0081630889326334,0.07570458203554153,-0.03751561418175697,-0.0335901603102684,-0.019255848601460457,0.003965357784181833,0.006211529951542616,-0.0740014836192131,-0.03234119340777397,0.031989309936761856,0.003951481077820063,-0.04119893163442612,-0.05839081481099129,0.024005742743611336,-0.04773717373609543,-0.036500588059425354,-0.06925535947084427,0.016104521229863167,-0.03528541699051857,-0.0498657189309597,-0.006398752797394991,-0.035172272473573685,-0.11973929405212402,0.1027180626988411,0.0860186442732811,-0.05784710869193077,0.02478974498808384,0.12661395967006683,-0.011829355731606483,0.02749078907072544,0.05664258450269699,0.047108739614486694,-0.03811803460121155,0.0023580696433782578,0.018864493817090988,-0.0038528069853782654,-0.019352536648511887,0.06260553002357483,-0.06757333129644394,-0.029088091105222702,0.029780058190226555,0.06042126566171646,0.0020481254905462265,-0.017792021855711937,-0.095256507396698,0.05638787895441055,-0.07211783528327942,-0.06781197339296341,-0.0688561275601387,0.09508489817380905,0.11256647855043411,-0.015229294076561928,0.08477070182561874,0.03209276124835014,0.03903394937515259,-0.027362145483493805,-0.025733191519975662,0.0029308642260730267,-0.03395823761820793,-1.696740881129699e-8,0.09579774737358093,0.028323166072368622,0.009827772155404091,0.006620749365538359,0.041562195867300034,-0.05015122890472412,-0.06576099246740341,0.014207446947693825,-0.005572448018938303,0.01729217916727066,0.01795773394405842,-0.01784052699804306,-0.07164476811885834,0.03749692440032959,0.05695931240916252,0.04703393951058388,0.019909193739295006,-0.09574892371892929,0.0003739301464520395,-0.05697071552276611,-0.03263760730624199,0.05072217434644699,-0.016982726752758026,-0.07493540644645691,-0.03584372252225876,0.0973212793469429,0.0015221360372379422,-0.0009602578356862068,-0.01444628369063139,0.01458044070750475,-0.05450062453746796,0.04044203832745552,-0.14982907474040985,0.07969824224710464,-0.00366034428589046,-0.06401664763689041,-0.05675441771745682,0.013079625554382801,-0.017960160970687866,0.05533256009221077,-0.0037481975741684437,-0.04943588003516197,-0.028341569006443024,-0.033009644597768784,0.004521203227341175,0.0034918999299407005,-0.007869725115597248,-0.029451623558998108,0.042616598308086395,-0.06647054105997086,0.07263606786727905,-0.030258482322096825,-0.006529920734465122,0.05156819894909859,0.0743279680609703,-0.013926496729254723,0.009754682891070843,-0.07610243558883667,0.10886885970830917,0.014023958705365658,-0.018593264743685722,0.02108842507004738,-0.038458678871393204,0.06565382331609726,0.032892223447561264,-0.00452966894954443,0.022503061220049858,0.01478666253387928,0.007358886767178774,0.0022923131473362446,0.001135902013629675,0.009069337509572506,0.13075485825538635,0.02316976897418499,-0.01738840341567993,-0.051865238696336746,0.030352814123034477,-0.0017282586777582765,0.004535370972007513,-0.07339245080947876,0.057180482894182205,-0.04045769199728966,-0.02159150131046772,0.03419458866119385,-0.06203112006187439,-0.023189164698123932,-0.07370340824127197,-0.0014275627909228206,-0.06592679023742676,0.06713294982910156,-0.06442628800868988,-0.05712699890136719,-0.0016845465870574117,0.018711857497692108,0.0024876196403056383,0.06441562622785568,0.05071663111448288,0.025311816483736038,-0.00624899473041296,0.01923437975347042,0.04407723620533943,0.02988077700138092,-0.05436094105243683,0.018191557377576828,-0.0708232969045639,-0.100032277405262,-0.08483805507421494,-0.027445949614048004,0.005698150955140591,-0.01717069372534752,-0.046646904200315475,-0.09295585751533508,-0.011832262389361858,0.0012535451678559184,0.005465252790600061,-0.0223049558699131,0.008694089949131012,0.01730644702911377,-0.0036450980696827173,0.03662283346056938,-0.03829662501811981,0.06409604102373123,0.06043339893221855,-0.057057272642850876,0.0325038805603981,-0.024386750534176826,0.021134255453944206,0.026245908811688423,0.041736651211977005,-0.04397895932197571,0.01205903198570013,0.043649811297655106,0.07590900361537933,-0.07452503591775894,0.09034830331802368,-0.04145920276641846,-0.009498965926468372,-0.024272751063108444,0.02202508971095085,-0.035470712929964066,-0.010750091634690762,0.04549073055386543,-0.027855174615979195,0.037277400493621826,0.04365237057209015,0.09494921565055847,0.04694775119423866,-0.08073734492063522,-0.16543595492839813,-0.013950077816843987,-0.06436420232057571,0.013088581152260303,0.02097347378730774,-0.09080936759710312,-0.010067454539239407,0.03715215623378754,0.04475507140159607,-0.06422630697488785,0.07907972484827042,0.0002558715350460261,-0.012265392579138279,0.004580387379974127,0.02867763862013817,-0.012674757279455662,0.06547587364912033,-0.06251835078001022,-0.020958667621016502,-0.11395616829395294,0.054348982870578766,-0.008654452860355377,-0.024947430938482285,-0.013742024078965187,0.03066476620733738,0.029925834387540817,-0.03481574356555939,-0.02026998996734619,-0.02106918953359127,0.03554292395710945,0.03551860898733139,-0.02895367331802845,0.023093393072485924,-0.005980712827295065,0.11157164722681046,0.09209443628787994,0.010852810926735401,-0.08431868255138397,0.08881174027919769,-0.03127231076359749,-0.022444652393460274,0.048816606402397156,-0.0857178345322609,5.134805443521455e-33,-0.041663285344839096,-0.10104192048311234,0.0231996551156044,-0.06604871898889542,0.13084550201892853,-0.0805850699543953,0.007063237484544516,-0.052521150559186935,-0.02270141988992691,-0.04432480037212372,-0.07025790214538574,0.049750328063964844,0.040295280516147614,0.042087893933057785,0.11940544098615646,0.01384834572672844,-0.0976090356707573,-0.03287982940673828,0.036950401961803436,-0.022907672449946404,0.031059378758072853,0.007712364662438631,0.04774013161659241,0.062090735882520676,0.09343986958265305,-0.13915038108825684,0.06260547041893005,-0.04954594001173973,-0.0720716267824173,-0.009238360449671745,0.01311079878360033,0.012433404102921486,0.047458164393901825,-0.028740067034959793,-0.03509017825126648,0.00832927692681551,0.044114019721746445,-0.012553708627820015,-0.07065911591053009,-0.03740449622273445,-0.11400919407606125,-0.03777230903506279,-0.021226929500699043,0.0006547587690874934,0.11632905155420303,-0.05188131332397461,0.036589909344911575,-0.06874972581863403,0.006591256242245436,-0.013080568052828312,0.0548650398850441,-0.04211742803454399,0.017757728695869446,0.00825215969234705,0.019228961318731308,0.026210302487015724,0.10576372593641281,-0.07735757529735565,-0.037578653544187546,-0.02130572870373726,-0.0939938873052597,-0.03048614040017128,0.007601546123623848,-0.03429693728685379,0.021867109462618828,0.02054009586572647,0.02026902139186859,0.14873109757900238,-0.013789192773401737,0.052978046238422394,0.011790581978857517,0.0020035081543028355,-0.0072752428241074085,0.018186889588832855,0.03461572527885437,-0.020831793546676636,-0.06938475370407104,0.006065156310796738,-0.09330548346042633,0.1306689977645874,-0.05558846518397331,0.027407851070165634,-0.07629095017910004,0.05976076424121857,-0.03754125162959099,-0.03567147254943848,0.024884164333343506,0.06461814045906067,0.05742587521672249,0.032572921365499496,0.03216245397925377,-0.005667089484632015,-0.06872963160276413,0.05982717499136925,0.0034465098287910223,-7.466846645598714e-33,0.009627087973058224,0.09767910838127136,-0.045572780072689056,0.026519013568758965,0.03175955265760422,0.03084470145404339,0.03148038685321808,-0.06074137985706329,0.0008928551687858999,-0.12040647864341736,-0.09528698772192001,-0.00974911917001009,-0.020322149619460106,0.07386543601751328,-0.12958936393260956,0.003195265308022499,-0.028960680589079857,-0.06360197067260742,-0.06405171006917953,0.002315821824595332,0.053313951939344406,-0.03964557871222496,-0.003914881031960249,0.0025094475131481886,-0.0845513641834259,-0.054407596588134766,-0.04667612165212631,-0.0047873808071017265,0.013143673539161682,0.0024703205563127995,0.04435216262936592,-0.03041607327759266,0.0753217414021492,-0.03410738706588745,0.052602943032979965,0.010097194463014603,-0.03741486370563507,-0.05449262633919716,-0.0340685173869133,-0.1315125823020935,-0.005745954345911741,0.02422371134161949,0.041552841663360596,-0.03109351545572281,-0.06038770452141762,0.055914390832185745,-0.015111087821424007,-0.03677428141236305,0.004619824234396219,-0.05534905195236206,-0.0352119542658329,-0.0053596096113324165,-0.06476254761219025,0.00392536073923111,-0.03408564254641533,-0.04326372221112251,0.017796780914068222,0.10297136753797531,-0.11140546947717667,0.005538279190659523,0.0699755921959877,-0.062459852546453476,0.010119859129190445,0.07504069805145264,-0.0247685294598341,-0.006865158677101135,0.027469711378216743,0.03740185126662254,-0.07921519130468369,-0.03782523795962334,-0.025130847468972206,-0.0408601313829422,0.0002974505187012255,0.035791367292404175,-0.0222714152187109,-0.023099878802895546,0.05900616943836212,0.023288819938898087,0.03853234648704529,-0.08380695432424545,-0.010486943647265434,-0.02390293963253498,-0.018137043341994286,-0.04908224195241928,-0.01406791340559721,0.09276246279478073,0.09327398985624313,-0.02815668284893036,0.032640982419252396,0.020951297134160995,0.045759689062833786,-0.005573008209466934,0.005519512575119734,0.056277550756931305,0.024457750841975212,-5.161523475294416e-8,0.05904683843255043,-0.016468549147248268,-0.02395011857151985,-0.0655059814453125,-0.034084949642419815,-0.011423069052398205,0.04810366407036781,0.043758850544691086,-0.020757660269737244,0.02938099019229412,-0.025483526289463043,0.0024704623501747847,-0.1314917653799057,-0.010309773497283459,0.070079006254673,0.09826217591762543,0.015264450572431087,-0.011107562109827995,0.072836734354496,-0.074002206325531,-0.02396520785987377,-0.04481133073568344,-0.02111072652041912,0.02134762331843376,-0.00007413730054395273,0.051039695739746094,0.006697072181850672,0.011581857688724995,0.030153749510645866,-0.040998123586177826,0.007610336411744356,-0.011890551075339317,-0.0943499207496643,0.07872126251459122,0.04277007281780243,-0.0062384349294006824,-0.045844580978155136,-0.018402574583888054,-0.01500886119902134,0.018078945577144623,0.007523822598159313,-0.03719170019030571,-0.04618372395634651,-0.0632174089550972,-0.007156500592827797,0.028849739581346512,0.029128510504961014,-0.007275404408574104,-0.056387025862932205,0.011793785728514194,0.04457452893257141,-0.04502012953162193,0.012380242347717285,0.036512888967990875,0.029435232281684875,0.053583163768053055,0.006698049139231443,0.009128482080996037,0.07419919967651367,0.028142521157860756,0.01757882721722126,0.04914671927690506,0.08704432845115662,0.021491343155503273
SBUCYJgg4Mk,2019-12-13T15:28:40Z,Docker Volumes Demo || Docker Tutorial 13,in this video we are gonna look at docker volumes in practice and this is a simple node.js MongoDB application that we're gonna attach the volume to so that we don't lose the database data every time we restart them I'm going to be container so let's head over to the console and I'm gonna start the MongoDB with the docker compose so this is how the compose looks like we're gonna start the MongoDB on container in the Express container so that we have a UI to it so I'm gonna execute the docker compose which is gonna start MongoDB and the Express so when it started I'm gonna check that Express is running on port 8080 and here we see just a default databases so these are just created by default on startup and we're gonna create our own one for the node.js application and inside of that database I'm gonna create users collection so these are the prerequisites or these are the things that my node.js application needs so this one here in order to connect so the database my DB this is what we just created my DB and inside of that to the collection called users so let's start the application which is running on port 3000 so here and this is our app which when I edit something here will write the changes to my database now if I were to restart now the MongoDB container I would lose all this data so because of that way to do it as explained in the previous video docker volumes we're gonna use named volumes inside of the docker compose file persist all this data in the MongoDB let's head over to dr. Campos so the first step is to define what volumes I'm gonna be using in any of my containers and I'm gonna do that on the services level so here I define the list of all the volumes that I'm gonna need in any of my containers and since we need data persistence in for MongoDB we're gonna create data volume here now this is gonna be the name of the volume reference but we also need to provide here a driver local so the actual storage path that we're gonna see later once it's created it is actually created by toker itself and this is a kind of an information additional information for docker to create that physical storage on a local file system so once we have a name reference to a volume defined we can actually use it in the container so here I'm gonna save volumes and here I will define a mapping between the data volume that we have on our host and the second one will be the path inside of the MongoDB container but it has to be the path where MongoDB explicitly persists its data so for example if you check it out online you see that the default path where MongoDB stores its data is data slash data slash to B and we can actually check that out so if I say doc repeat s and go inside the container it's minus 80 I can actually see data DP and here is all the data that MongoDB actually holds but this is of course only the container so when the container restarts the data get regenerated so nothing persists here so this is the path inside of the container not on my host that we need to reference in the volumes here so we're attaching our volume on the host to data slash data slash to be inside of a container so for example for my sequel it's going to be far leap my sequel for Postgres it's also going to be Varley Postgres sequel slash data so each database will have its own so you have to actually find the right one so what this means is that all the data with that we just so here all of this will be replicated on a container start up on our host on this persistent volume that we defined here and vice-versa meaning when a container restarts all the data that is here will be replicated inside of that directory inside of a container so now that we have defined that let's actually restart the document post and restart it so once we create the data and I'm gonna collection and let's actually change this one and update it so we have the data here so now that we have the persistent volume defined if I were to restart all these containers these data should be persisted so on the next restart I should see the database my DB collection ends the entry here so let's do that great so let's check see the database is here the collection is here and the entry has persisted so now let's actually see where the darker volumes are located on our local machine and that actually differs between the operating systems for example on a Windows laptop or computer the path of the docker volume will be at program data docker slash volumes the program data docker folder actually contains all the other container information so you would see other folders in this docker directory besides the volumes on Linux the path is actually /var leap docker volumes which is comparable to the Windows path so this is where the docker saves all this configuration in the data end on the Mac it's also the same one inside of this volumes director you actually have a list of all the volumes that one or many containers are using and each volume has its own hash which is or which has to be unique and then slash underscore data will actually contain all the files and all the data that is persisted let's head over to the command line and actually see the volumes that we persisted for MongoDB now interesting a note here is that if I were to go to this path that I just showed you in the presentation which is var Lib docker C there is no such directory so that could be a little little bit confusing but the way it works on Mac specifically on Linux you would actually have that path directly on your host but none Mac it's a little bit different and actually I learned this fact from the stack or a flow discussion so basically what happens is that docker for Mac applications seems to actually create a Linux VM in the background and store all the docker information or toker data at all the containers and the volumes etc inside of that VMs storage so if we execute this command here so this is actually the physical storage on my laptop that I have where all the data is stored but if I execute this command I actually get the terminal of that VM and inside here if I look I have a virtual different virtual file system and I can find that path that I showed you here so it's var leap docker see so I have all this docker information here I have the containers folder and I have volumes folder so this is the one we need sort of that is usually go to the volumes and this is a list of volumes that I have created and this is the one that came from our docker compose right this is the name of our F this is the this is what docker compose actually takes as the name you can actually take a look here so when it's creating this containers it depends this name is a prefix and then there is MongoDB and our volume has the same pattern it has the prefix and then data this is the name that we defined here so now if we look inside of that data volume directory we see that underscore data and if you have seen my previous video where I explain the different types of doc-doctor volumes this would be the anonymous volumes so basically here you don't have a name reference it's just some random unique ID but it's the same kind of directory as this one here the difference being that this one has a name so it's more it's easier to reference it with the name so this is anonymous volume this is a named volume but the contents will be used in the same way so here as you see in this underscore data we have all the data that MongoDB uses so this will be where it gets the date the default databases and the changes that we make through our application inside and if I go inside of containers so remember this volume is attached to MongoDB and is replicated in side of the container under path slash data / dB so if we go inside of the container here PS / DP we'll see actually the same kind of data here so we have all this index and collection files just like we did in this one so now whenever we make changes to our application for example we change it to Smith and this will make the container update its data and that will cascade into these volumes directory that we have here so that on the next startup of a container when the slash data slash to be is totally empty it will actually populate this directory with the data from this persistent volume so that we will see all the data that we created through our application again on startup and that's how docker volumes work in order to end that screen session that we just started because exceeds doesn't work in this case somehow on Mac you can actually click on ctrl a K and then just type Y and the session will be closed so when you do screen LS you should see actually it's terminating thanks for watching the video I hope it was helpful and if it was don't forget to like it this is a video series so I will create a new one every week so if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in the comment section below and I will try to answer them so thank you and see you in the next video,0.0009409631602466106,0.027864012867212296,0.0001908267440740019,-0.029847409576177597,0.02308364026248455,-0.07003679126501083,-0.007203974761068821,0.00862457137554884,0.021896297112107277,0.02285202033817768,-0.026998640969395638,-0.03823872283101082,0.022042782977223396,-0.025568293407559395,-0.08411482721567154,-0.06199495121836662,-0.03930595889687538,0.03557769954204559,-0.012481123208999634,0.05629580467939377,-0.07331585884094238,0.05409659445285797,-0.03948384150862694,-0.031974565237760544,0.006765872705727816,0.0278948824852705,-0.03255285695195198,-0.011406891979277134,0.02883145958185196,-0.021061712875962257,0.05217825993895531,0.030846407637000084,0.06599503010511398,-0.004754990339279175,0.08854829519987106,-0.03755684942007065,0.0493600107729435,-0.020564310252666473,-0.03678133711218834,-0.059154003858566284,0.024680033326148987,-0.08855415880680084,0.005496751982718706,-0.006711395923048258,-0.06626573204994202,-0.06871194392442703,-0.01266841683536768,-0.0807136595249176,0.058167826384305954,0.06512271612882614,-0.08469387143850327,-0.14744237065315247,-0.008406867273151875,0.07734818756580353,-0.009274302050471306,0.04064049944281578,0.01477979589253664,0.09195127338171005,0.03397977724671364,-0.04608946293592453,0.021650105714797974,-0.02714439108967781,-0.030475443229079247,0.006982755847275257,0.05190068483352661,-0.08528383076190948,-0.05336670204997063,0.023857519030570984,-0.04017694666981697,0.012890019454061985,0.02145940065383911,0.05578562244772911,-0.013952561654150486,-0.050774652510881424,0.011233164928853512,0.006205023266375065,-0.014405584894120693,0.02185165137052536,-0.031796399503946304,0.05488908290863037,-0.05088789388537407,-0.004657773766666651,-0.04557814821600914,0.014337765984237194,-0.09971226751804352,-0.020865771919488907,-0.05696572735905647,-0.027721378952264786,-0.017960842698812485,-0.06675391644239426,0.057293280959129333,-0.028580179437994957,0.03212224692106247,0.00669074198231101,0.01009928248822689,-0.04053445905447006,-0.07109338045120239,-0.0571397989988327,0.020355094224214554,0.011727076955139637,-0.024342846125364304,-0.0048571014776825905,0.025197738781571388,-0.04991040751338005,0.013335962779819965,-0.04985884204506874,-0.003539175260812044,-0.005317739211022854,-0.038306329399347305,-0.0010031161364167929,0.022002622485160828,-0.007005067076534033,-0.041432980448007584,0.03748735412955284,0.0389692559838295,0.018162373453378677,-0.016536371782422066,-0.03382551297545433,-0.03099450096487999,-0.05820901691913605,0.08995917439460754,-0.020756641402840614,0.027033237740397453,-0.05899600684642792,0.005424834787845612,0.0078109740279614925,-0.028233753517270088,5.2765516951313915e-34,0.05417009815573692,-0.14665690064430237,0.0498284250497818,0.07882186770439148,0.163749560713768,-0.037843335419893265,0.02712750993669033,-0.04380805417895317,-0.07887725532054901,0.012871759943664074,-0.010712667368352413,0.044362232089042664,-0.05513180419802666,0.08790044486522675,-0.040819112211465836,-0.11444000154733658,-0.027934759855270386,0.032302942126989365,-0.04389502480626106,-0.07583487778902054,0.0423128716647625,-0.029265332967042923,-0.023808931931853294,-0.052232712507247925,0.024170827120542526,0.013305285014212132,0.04034914821386337,-0.020980002358555794,0.04063188657164574,0.03243085741996765,-0.09794341027736664,0.014723585918545723,0.029339181259274483,-0.00709020160138607,0.02994409017264843,0.022583460435271263,0.039200011640787125,0.04398931935429573,-0.09579717367887497,-0.026747949421405792,-0.035168472677469254,-0.1067163497209549,0.04604716598987579,0.014992342330515385,0.05607256665825844,0.030449513345956802,0.024113595485687256,-0.03702545166015625,0.06632431596517563,0.13028299808502197,0.028651399537920952,-0.06208191439509392,-0.06417122483253479,0.02572760544717312,-0.010812162421643734,-0.023784630000591278,-0.06314840912818909,-0.0063752830028533936,-0.06213647499680519,-0.0033240830525755882,-0.1022074818611145,0.08078540116548538,0.055535417050123215,0.025124086067080498,-0.04515136778354645,0.027976019307971,0.009642748162150383,0.04923318326473236,0.09648588299751282,0.037351593375205994,-0.022771989926695824,0.04978490620851517,-0.002885064110159874,-0.006649127695709467,0.013086560182273388,-0.019602088257670403,0.004595143720507622,0.004121136385947466,0.012459177523851395,-0.036851707845926285,-0.03776494041085243,-0.008457810617983341,-0.05913606658577919,0.04823227971792221,-0.07573598623275757,-0.03989195451140404,0.07555804401636124,0.11551296710968018,0.033819641917943954,-0.04514794796705246,0.022909360006451607,-0.016645582392811775,-0.03887949138879776,-0.056871503591537476,-0.0403393916785717,-3.23034443408405e-33,0.04950286075472832,0.014690239913761616,-0.07072078436613083,0.006533977575600147,0.028971794992685318,0.05249585211277008,0.10324110090732574,0.02957313321530819,0.026902280747890472,-0.06852816790342331,-0.09108327329158783,0.059494730085134506,-0.02725444920361042,0.035348743200302124,-0.06655723601579666,0.0037090417463332415,-0.006464856676757336,-0.05457567796111107,0.052362218499183655,0.04116436466574669,0.018068477511405945,-0.0029008439742028713,0.02299414575099945,0.03227407485246658,-0.06256283819675446,-0.0538971945643425,0.09772256761789322,-0.0071213566698133945,-0.010792434215545654,0.021829072386026382,0.015895996242761612,0.04050493985414505,0.01888478733599186,0.028620999306440353,0.05077146366238594,0.0297801923006773,0.04843154177069664,0.045799076557159424,-0.062406398355960846,-0.14042776823043823,-0.054055020213127136,-0.0775008276104927,-0.01031579915434122,-0.04539307951927185,-0.04246358200907707,-0.04617318883538246,0.13428354263305664,-0.0100236302241683,-0.060182973742485046,0.022953834384679794,-0.05701075866818428,-0.08795347064733505,0.032037075608968735,0.009528114460408688,0.027176231145858765,-0.04037624970078468,-0.00124678376596421,0.005630379542708397,0.039986833930015564,0.06534823030233383,0.04947325214743614,0.01408094260841608,0.0006295102648437023,-0.02260914444923401,-0.06374356895685196,-0.011847270652651787,-0.027771390974521637,0.012316637672483921,-0.07376357167959213,0.07423640042543411,0.014712587930262089,0.01426058728247881,0.06504898518323898,0.02660980075597763,0.03443048149347305,-0.045992616564035416,-0.03752407804131508,-0.032572660595178604,0.014325706288218498,0.012433364056050777,-0.013910738751292229,0.020709853619337082,-0.019225459545850754,-0.05270082503557205,-0.00059042515931651,0.013074145652353764,0.1110989898443222,0.037722520530223846,0.007896587252616882,0.009959296323359013,0.011549483053386211,0.01977062039077282,0.026657957583665848,0.10368554294109344,0.06197632476687431,-1.8895160991405646e-8,0.026934204623103142,0.010524430312216282,-0.03504440188407898,0.032972779124975204,-0.011290758848190308,-0.07019565999507904,0.07746578752994537,0.1130916103720665,-0.07992624491453171,0.040546953678131104,0.01127129141241312,-0.03582925722002983,-0.06614307314157486,-0.008623622357845306,0.014979095198214054,0.08237295597791672,-0.03267265483736992,0.03656855598092079,-0.014586396515369415,-0.10123266279697418,-0.010439632460474968,-0.011818957515060902,0.08862000703811646,-0.08816082030534744,0.0409066267311573,0.07172364741563797,-0.014454362913966179,0.036548927426338196,0.001812079339288175,-0.06254710257053375,0.10274510830640793,0.03565613552927971,-0.0639888271689415,0.039747677743434906,0.025759248062968254,0.03212007135152817,-0.010503693483769894,0.033916350454092026,0.049664441496133804,-0.013969303108751774,-0.1146840751171112,-0.050382714718580246,-0.010064665228128433,-0.09391119331121445,-0.04676300287246704,0.057675980031490326,-0.03407981991767883,0.09405617415904999,-0.0972912460565567,0.020199691876769066,0.04119241610169411,-0.01643439382314682,0.029617736116051674,0.01875367760658264,0.1221746876835823,0.08480080962181091,0.005627593025565147,0.07336384803056717,-0.0013411270920187235,0.05870092287659645,0.03532944992184639,0.16934023797512054,-0.06092634052038193,0.007561597041785717,0.03319204971194267,-0.011562159284949303,-0.000751130806747824,0.041512057185173035,-0.02658693864941597,-0.05489647388458252,-0.03092542290687561,0.0660829246044159,0.06126851961016655,0.02793191932141781,-0.0626509040594101,0.005800778511911631,0.009572816081345081,-0.0009974350687116385,-0.05080597475171089,-0.0010349057847633958,0.045295532792806625,-0.06947584450244904,0.012258874252438545,0.09142465889453888,-0.0527707003057003,0.02015022560954094,0.00814796146005392,0.03427228331565857,-0.010145778767764568,-0.02665679156780243,-0.006328958552330732,-0.02265719696879387,-0.0019789673388004303,-0.0034953434951603413,0.023773228749632835,0.023749377578496933,0.030261898413300514,-0.01337403990328312,-0.0834193229675293,0.08406643569469452,0.09636137634515762,-0.10140884667634964,-0.08194063603878021,-0.11991430819034576,0.025642426684498787,-0.04389200732111931,-0.04234377294778824,0.018212631344795227,0.033910125494003296,-0.06293996423482895,-0.07560878247022629,-0.029831526800990105,0.060044560581445694,0.046865738928318024,0.0021632802672684193,-0.057830579578876495,-0.055990830063819885,0.04367011412978172,-0.0005370327271521091,0.1589670330286026,0.030248112976551056,0.02140611968934536,0.015752499923110008,0.06514706462621689,0.0007873281138017774,-0.020142531022429466,-0.0004291169170755893,0.015216095373034477,0.06868667155504227,-0.07003636658191681,-0.018323853611946106,0.02569742687046528,-0.0034705488942563534,-0.03929544985294342,0.0041076927445828915,0.06564357131719589,-0.10553139448165894,-0.08196090161800385,-0.061900001019239426,-0.018045218661427498,0.007137781474739313,-0.03086709789931774,-0.05433804914355278,0.08633200824260712,-0.040404774248600006,-0.004739635158330202,-0.04379671439528465,-0.044581104069948196,-0.08271265774965286,0.0529402457177639,-0.001888413680717349,-0.05785258859395981,-0.0285651832818985,-0.02854522131383419,-0.004458768293261528,-0.05833213031291962,0.021755162626504898,0.014208168722689152,0.08302251249551773,0.06551317870616913,-0.04228150472044945,0.0532367005944252,0.07621535658836365,-0.015231765806674957,0.030626395717263222,0.023618724197149277,0.009288346394896507,-0.020604951307177544,0.058297049254179,-0.08369236439466476,-0.03548121452331543,0.012185455299913883,-0.047032564878463745,-0.017426971346139908,0.032005175948143005,-0.04226989299058914,-0.015448488295078278,0.08082080632448196,-0.060721591114997864,0.046715687960386276,-0.0019869764801114798,-0.08911880850791931,-0.028709573671221733,0.10394784808158875,0.037592146545648575,0.042279426008462906,0.033137597143650055,-0.049054406583309174,0.022345827892422676,-0.02523699589073658,0.009235232137143612,2.72089308029034e-33,0.06968285143375397,-0.1239490658044815,0.0788988471031189,0.08027661591768265,0.11385080963373184,0.011182308197021484,-0.018554072827100754,-0.011023815721273422,-0.05758471414446831,0.020608844235539436,-0.06147832050919533,0.08847109228372574,0.029532289132475853,0.009816035628318787,-0.024072367697954178,-0.04993274062871933,0.04742066562175751,0.030259933322668076,0.0151425926014781,-0.05956195294857025,0.027889499440789223,-0.0441090352833271,-0.04952157661318779,-0.04531294107437134,0.06542692333459854,0.004368944093585014,-0.06842158734798431,0.039677977561950684,-0.018597206100821495,0.0007786111091263592,-0.008801853284239769,-0.045379411429166794,-0.08253011107444763,0.049007490277290344,-0.001976886996999383,-0.018035685643553734,0.021544598042964935,0.00785780604928732,-0.11515631526708603,-0.04499312490224838,0.03955095633864403,0.0017213704995810986,-0.08296550810337067,0.027477623894810677,-0.02640511281788349,-0.0048157451674342155,0.0445282980799675,-0.040028996765613556,0.044133637100458145,0.08868564665317535,-0.024627069011330605,-0.04829395189881325,-0.004658219404518604,0.08556754142045975,-0.004655944183468819,0.00013166843564249575,-0.026002246886491776,-0.10830388963222504,-0.02820541337132454,-0.07186931371688843,-0.10584928095340729,0.047626104205846786,-0.02429930865764618,0.05356628820300102,0.04560292139649391,0.03863213583827019,0.004223375581204891,0.02558024413883686,0.06870011240243912,0.031534112989902496,-0.021212764084339142,0.0068394821137189865,0.031704530119895935,0.029908377677202225,0.032140590250492096,0.026252033188939095,-0.0844016969203949,-0.0011858728248625994,-0.08489847928285599,0.037006925791502,0.08541885763406754,-0.006627494934946299,-0.15514981746673584,0.09543309360742569,-0.01762964390218258,0.05830926075577736,0.010038407519459724,0.024535106495022774,0.04398271068930626,0.07924062013626099,-0.0024203495122492313,0.08566482365131378,0.05003910884261131,-0.06937967985868454,-0.055226124823093414,-5.890063502660652e-33,0.002275946317240596,-0.04720897600054741,-0.04419350251555443,-0.03004622645676136,0.06600184738636017,-0.013681618496775627,0.047525499016046524,-0.03205186501145363,-0.018628278747200966,-0.08336412906646729,-0.03340314328670502,-0.005332949571311474,0.024165838956832886,0.04139189422130585,-0.1542893946170807,0.019600002095103264,-0.042529355734586716,-0.058419376611709595,0.03133390471339226,-0.0005757377366535366,-0.059679675847291946,0.028853191062808037,0.0492325983941555,0.003153180703520775,-0.0740228220820427,-0.03106096386909485,-0.030413685366511345,-0.08412953466176987,-0.08394020050764084,-0.003831845009699464,-0.00440593808889389,0.0037640808150172234,0.03865259885787964,0.009971282444894314,-0.03955954313278198,-0.04947318136692047,-0.04200053960084915,0.10049774497747421,0.05827911198139191,-0.04718654975295067,0.006340064108371735,-0.001908276230096817,-0.04138210415840149,0.0017849744763225317,-0.041285593062639236,-0.05433759093284607,0.015384082682430744,-0.02770509198307991,-0.019096458330750465,-0.022058721631765366,-0.06999221444129944,-0.050909772515296936,0.06493931263685226,0.008324732072651386,0.005303356796503067,-0.025884490460157394,0.06018532067537308,-0.03933531790971756,0.07251570373773575,0.07125694304704666,0.13489298522472382,-0.014110407792031765,-0.031148770824074745,-0.023271799087524414,-0.05950753390789032,-0.051149580627679825,-0.04080557823181152,0.0354200154542923,-0.0002674431598279625,0.003056443529203534,-0.03484369441866875,-0.005286078900098801,0.07284534722566605,0.051314447075128555,0.04394388943910599,-0.09953004866838455,-0.037160586565732956,-0.12829749286174774,0.014805259183049202,0.013438362628221512,-0.025642938911914825,0.041923895478248596,-0.04373925179243088,-0.054471444338560104,-0.003188161412253976,-0.13473859429359436,0.03566025197505951,-0.023229025304317474,-0.08563466370105743,0.029148586094379425,-0.08602673560380936,0.05324508994817734,-0.0872146338224411,0.04870099946856499,-0.014554173685610294,-5.688969650918807e-8,-0.004695138428360224,0.031913891434669495,-0.02435777336359024,0.05607321858406067,0.0034911055117845535,-0.016075942665338516,0.04545068368315697,0.04593624174594879,0.014340000227093697,0.037593767046928406,-0.02522391267120838,0.02043028362095356,-0.0448475107550621,0.0006265372503548861,0.04262945428490639,0.017300941050052643,0.08343149721622467,-0.05422644317150116,-0.020912783220410347,-0.022222531959414482,0.007776848506182432,0.03423422574996948,0.010345978662371635,-0.012339751236140728,0.044199176132678986,0.051169440150260925,0.09302064031362534,0.02696210704743862,-0.04180871322751045,0.022212032228708267,0.007917912676930428,0.055496662855148315,0.034653399139642715,0.06269782781600952,-0.061268944293260574,0.01159930694848299,-0.022040335461497307,0.006838724482804537,0.005938275251537561,-0.01113012246787548,-0.01713641919195652,-0.0185397919267416,0.0302013847976923,-0.04103173688054085,-0.05565490573644638,-0.04117836430668831,0.08434157073497772,0.08802139759063721,0.037810031324625015,0.05716906487941742,0.0458722822368145,-0.048071056604385376,0.06554447114467621,0.005038176663219929,0.13943777978420258,0.06754334270954132,0.020692242309451103,-0.011912094429135323,0.01671646721661091,0.03546867147088051,0.023790091276168823,0.07046809792518616,0.031108766794204712,-0.02818267047405243
ZowjOhpAcIc,2019-12-06T16:03:56Z,Deploying the containerized application with Docker Compose || Docker Tutorial 12,so in this video we're gonna see how to deploy an application that we built into a docker image so after you package your application in a docker image and save it in the private repository you need to somehow deploy it on a development server or integration server or whatever other environment in this specific video we are using a docker registry of Amazon Web Services called ECR that's where we have pushed our own application docker image and we're gonna use docker compose to deploy that application this video is part of a docker tutorial series so if you want to actually follow through the whole process of developing an application packaging it into a docker image pushing it into a private repository and then finally deploying it on a application server here's a link to the video series so you can check that out so again back to our initial overview we have gone through all these individual steps so we built an image just like a Jenkins server would do and we pushed it into a repository so now let's actually simulate a development environment so let's imagine we have logged into a development server and we want to run our image that we just pushed the repository so our my app image and the MongoDB image both the database in the Express on the development server so the my app image will be pulled from private repository of EWS the in the to containers will be pulled from the docker hub so let's see actually how that would work so usually again you have developed your application you're done with it and you have created your own docker image right now in order to start an application on development server you would need all the containers that make up that application environment okay so we have a longer  Express already so what we are going to do is here we're gonna add a new container in the list which is gonna be our own image so let's go ahead and copy the image from our repository so let's actually use the 1.0 so again remember we said that this image name is a shortcut for having a docker dot IO dot library slash with like a specific version so instead of that because we are pulling these images from a docker hub we can actually skip that repository domain in front of the images but here because we're pulling it from a private repository so if we were to specify our image like this docker will think that our image resides on docker hub so we try to pull it from docker hub and of course it won't find it because we have to tell docker go and look at this repository with this repository name in this tag and of course in order to be able to pull this image or the docker composed to be able to pull this image the environment where you're executing this docker compose file has to be logged into a docker repository so here as the development server has to pull the image from the repository what we would need to do on the development server is actually do a docker login before we execute the docker compose and obviously you don't need a doctor login for doc hub those images will be pulled freely ok so the next thing that we have to configure are the ports because obviously want to open the ports if we go back we see that our application runs on port 3000 so the port of the container or that where the container is listening on is 3000 and here we can open the port on the host machine so it's going to be 3000 map to 3000 we have actually the environment variables inside of the docker file but obviously we could have configured them in the docker compose just like this so it's an alternative so this will be a complete docker compose file that will be used on a development server to deploy all the all the applications inside so again if we're trying to simulate a development server that the first step will be to dock to the docker login in this case you have this on command for logging in to the AWS repository which I have done already in this terminal so the next step is to have the docker compose file available on this development server because we have to execute the docker compose file because we're simulating here the way I would do it is I'm gonna create an demo file in the current directory where I am I'm gonna copy this and save so now I have my ml file and now we can start all three containers using munger docker compose comment - eff up and here we see that app started on 3000 and MongoDB and Express started as well so let's check again now and here we saw that database is lost every time we recreate a container and of course that's not good and we're going to learn how to preserve the database data between the container restarts using docker volumes in the later tutorials because this is not an ideal State okay so now that we have database in a collection let's actually refresh in our application works as well let's check awesome so our application works let's refresh this one as well and there is actually one thing that I needed to change in the code to connect no J's with MongoDB so let's actually go and look at that so this is my these are my handlers you know no J's where I connect to the MongoDB database so the your eyes are the same and what I changed here is that it was a localhost before so instead of localhost I changed it to MongoDB because this actually is a name of the container or of the service that we specify here so this actually leads back to the doctor Network and how docker compose takes care of it is that in the URI or when I connect one application in a docker container with another one in an other docker container I don't have to use this localhost anymore actually I wouldn't even need to use the port even because I have all that information so the host name and the port number in that configuration so my application will be able to connect to MongoDB using the service name and because of that you don't have to specify here a localhost and the port number which is actually even more advantage when you consider using docker containers to run all of your applications because it makes the connectivity between them even more easier and that actually concludes the this diagram that we saw previously we have gone through all of the steps where we saw how to develop a JavaScript application locally with docker containers then we saw how to build them into an image just like continuous integration build we'll do it then we pushed it into a private repository and we simulated a development server where we pull the image from private repository and the other images from the docker hub where we started the whole application set up with our own application in the two applications using a docker compose which is how you would deploy an application on a dev server so that now testers or other developers will be able to access the development server and actually try out the application that you just deployed or you can also use it for demos thanks for watching the video I hope it was helpful and if it was don't forget to like it this is a video series so I will create a new one every week so if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in a comment section below and I will try to answer them so thank you and see you in the next video,0.021017884835600853,0.03778595104813576,0.01553333830088377,-0.06104308366775513,-0.028373051434755325,-0.039498377591371536,0.0035968823358416557,0.04236694425344467,-0.05589613690972328,0.03716104105114937,-0.012906476855278015,-0.04417426139116287,0.033458441495895386,-0.04173898324370384,0.012089041993021965,-0.03238743543624878,0.10814782977104187,0.03472328931093216,0.010594906285405159,0.10107052326202393,-0.1028686985373497,0.06177487224340439,-0.026138560846447945,0.028861161321401596,0.03436891734600067,0.0038978427182883024,-0.04413982480764389,-0.01680123247206211,0.037971995770931244,0.025041865184903145,0.0007612613844685256,0.07276850938796997,0.048247382044792175,0.038587894290685654,0.053298577666282654,0.12988267838954926,0.0860866829752922,-0.04528243467211723,-0.022980842739343643,-0.07832423597574234,-0.0048317150212824345,-0.07619715481996536,-0.03218962624669075,-0.0038652420043945312,-0.027381960302591324,-0.1444360911846161,0.028804296627640724,-0.08401036262512207,0.008535698987543583,0.06032080575823784,-0.12084203958511353,-0.04795094206929207,-0.027546856552362442,-0.010215585120022297,-0.049946799874305725,0.0136948823928833,-0.047368913888931274,0.07228744029998779,0.012657418847084045,0.015416853129863739,-0.017737621441483498,0.025122275575995445,0.031363584101200104,0.061142317950725555,0.03827467933297157,-0.05274340882897377,-0.02376611717045307,-0.0007681199931539595,-0.015651337802410126,-0.028417078778147697,0.018061203882098198,0.01631774939596653,-0.048353493213653564,-0.13629601895809174,-0.08589289337396622,-0.042307961732149124,-0.0017310853581875563,-0.013194583356380463,-0.05294991284608841,0.040979232639074326,0.04751124978065491,0.04804033413529396,-0.008692885749042034,0.004353141877800226,-0.09607186913490295,0.01816987618803978,0.009674330241978168,-0.055528223514556885,0.009264045394957066,-0.014806884340941906,0.022995010018348694,-0.02925853617489338,0.005557178054004908,-0.024158814921975136,0.04543525353074074,-0.0444360114634037,-0.09424857795238495,0.004079422447830439,-0.014724461361765862,0.016914084553718567,0.0019197439542040229,-0.033681463450193405,0.025300385430455208,-0.0767354965209961,0.037831783294677734,0.007891681045293808,-0.023286189883947372,-0.03383242338895798,-0.028573689982295036,-0.031211338937282562,0.007098239380866289,-0.006522033363580704,-0.06230345368385315,-0.005550645757466555,-0.01298876479268074,-0.0027575113344937563,0.05489093437790871,-0.06822764128446579,0.006193163804709911,0.06900173425674438,0.02124578133225441,-0.059824634343385696,0.05351286381483078,-0.03406141325831413,-0.027771752327680588,0.005959977861493826,-0.0027982278261333704,-8.72525834754709e-34,0.0344357043504715,-0.10976137965917587,0.04746605083346367,0.1351093351840973,0.19250568747520447,-0.053151968866586685,0.031089015305042267,-0.054585155099630356,-0.04247087612748146,-0.02583305910229683,-0.0059958104975521564,-0.004231092054396868,-0.015107478015124798,0.0831073597073555,-0.030316349118947983,-0.10478274524211884,-0.046633280813694,0.06952521204948425,0.03963650390505791,-0.10055405646562576,0.024236038327217102,-0.05843975767493248,-0.036262381821870804,-0.03339969739317894,0.015657581388950348,0.012815355323255062,0.020683038979768753,0.0016966585535556078,0.037823837250471115,0.02037954330444336,0.026790644973516464,-0.010686511173844337,-0.011197621934115887,0.01997995935380459,0.0076505993492901325,-0.034459684044122696,0.041085101664066315,0.04899052157998085,-0.0598277673125267,0.02380344085395336,-0.0173590499907732,-0.033719252794981,-0.02773273177444935,0.027188042178750038,0.04384245350956917,-0.0451652929186821,0.0629831925034523,0.023339012637734413,0.09778454899787903,-0.003685766365379095,0.045180246233940125,-0.07399691641330719,-0.03913133591413498,0.028155075386166573,0.0016204876592382789,0.03820294886827469,-0.0568915456533432,-0.0436149425804615,-0.02691134437918663,-0.04880606010556221,-0.15868887305259705,0.017292700707912445,-0.07464686781167984,-0.018520265817642212,0.047847066074609756,0.06077514961361885,-0.03269068896770477,0.027169188484549522,0.01529297512024641,0.09014416486024857,0.0027655386365950108,0.06034083291888237,0.029545901343226433,0.0059790825471282005,0.05597514286637306,-0.015734724700450897,0.0022696733940392733,-0.003099452704191208,0.013707047328352928,0.031683940440416336,-0.01131650060415268,0.04568314924836159,-0.05749256908893585,0.10202738642692566,-0.060713738203048706,-0.05725192278623581,0.032974954694509506,0.054014842957258224,-0.013931245543062687,0.09444311261177063,0.025669919326901436,-0.0029965632129460573,-0.0398428738117218,-0.060015011578798294,-0.08364280313253403,-2.725783320460753e-33,-0.003691262798383832,-0.01706364005804062,-0.08744996041059494,0.021607674658298492,0.03943164274096489,-0.018960146233439445,0.07855009287595749,0.057528261095285416,-0.0015467926859855652,-0.04632727429270744,-0.0647968277335167,0.08463786542415619,0.026038162410259247,0.05552264302968979,-0.23372139036655426,0.06048162281513214,0.015553214587271214,0.051195498555898666,0.050915054976940155,-0.018447380512952805,0.009773868136107922,0.019587818533182144,0.07136940211057663,0.01393162738531828,-0.04583018273115158,-0.06176895648241043,0.055155880749225616,-0.005459061358124018,-0.016116732731461525,0.022251753136515617,0.06638237088918686,0.025170758366584778,0.007589629385620356,-0.005655369255691767,-0.03524917736649513,0.06335101276636124,-0.09348341077566147,0.04182124510407448,-0.0004502834926825017,-0.08795125037431717,0.008231960237026215,-0.07704922556877136,-0.05833477899432182,-0.027091315016150475,-0.021398277953267097,-0.06101132184267044,0.035070303827524185,-0.022827161476016045,-0.026558028534054756,0.023482011631131172,-0.032363586127758026,-0.04924532398581505,0.030299829319119453,-0.01606026291847229,0.041603703051805496,0.01904044672846794,0.02782563678920269,0.03047572262585163,-0.06144815683364868,0.05972987040877342,0.09281164407730103,-0.02740376628935337,0.04341825470328331,-0.0019877192098647356,0.035661596804857254,0.018801694735884666,-0.05651550367474556,0.037468425929546356,-0.08244841545820236,0.040134113281965256,0.0410483218729496,-0.009588810615241528,0.041488662362098694,0.033406585454940796,-0.01956811733543873,-0.07052817940711975,0.037952497601509094,0.04093559831380844,0.019766317680478096,-0.008105939254164696,-0.06443257629871368,0.03191601112484932,-0.05582720413804054,-0.08724700659513474,-0.03663581982254982,-0.029708314687013626,0.1260237693786621,0.010105806402862072,0.028222596272826195,0.039966944605112076,0.03203615918755531,0.02333066239953041,-0.03521347790956497,0.019655397161841393,0.0007485836977139115,-2.1865377064500535e-8,0.014278923161327839,-0.0062429048120975494,-0.08754757046699524,-0.022204095497727394,-0.06489004194736481,0.021233754232525826,0.11314915865659714,-0.03847093507647514,-0.0018722820095717907,-0.006610299460589886,-0.0963967964053154,-0.004097361117601395,-0.08817346394062042,0.03224156051874161,0.01417322363704443,0.016871660947799683,-0.000042157193092862144,0.023649003356695175,-0.031648822128772736,-0.07736565917730331,-0.036213964223861694,0.013211166486144066,0.06487353891134262,-0.033962152898311615,0.015555989928543568,0.07381048053503036,0.008559249341487885,-0.03783794865012169,0.025068873539566994,0.022217532619833946,0.014076863415539265,0.060739822685718536,-0.08978123217821121,0.03316522389650345,-0.09086742252111435,0.0003897679562214762,-0.04524405673146248,-0.00010086301335832104,0.03624039143323898,-0.025079628452658653,-0.07929277420043945,0.009479718282818794,0.003309867810457945,-0.09292022138834,-0.004367175977677107,0.013182002119719982,-0.004231665749102831,0.026992585510015488,-0.034835103899240494,0.08153775334358215,0.07727454602718353,0.024831999093294144,-0.015540354885160923,0.01327850203961134,0.10681485384702682,0.10659084469079971,0.05313108116388321,0.026615168899297714,0.05417123809456825,-0.03187800198793411,-0.02812671661376953,0.0693732500076294,0.017199968919157982,0.02754513919353485,-0.011839043349027634,0.0036555477418005466,-0.03818385675549507,-0.025403138250112534,0.06622496992349625,-0.07112684845924377,-0.042162999510765076,0.009980052709579468,0.0282121654599905,0.053424302488565445,0.030718637630343437,-0.052772171795368195,0.062343526631593704,-0.03785364329814911,0.019349735230207443,-0.03430451452732086,0.05890994891524315,-0.048928484320640564,-0.014702102169394493,0.031005101278424263,-0.07985682040452957,0.012369795702397823,-0.0017394062597304583,0.04045579954981804,-0.03947838023304939,0.06240289285778999,0.025227487087249756,0.05688080936670303,-0.007546122185885906,-0.07157151401042938,0.063639797270298,-0.01842034049332142,0.019462544471025467,-0.0029974498320370913,0.019638003781437874,0.16654838621616364,0.034663718193769455,-0.05972922965884209,-0.012694505043327808,-0.06783048063516617,0.028363868594169617,-0.07502319663763046,-0.0030297935009002686,-0.07049555331468582,-0.02126328833401203,-0.0639353096485138,-0.0030916486866772175,-0.06076035648584366,0.023584047332406044,-0.05120212212204933,-0.03142906725406647,-0.07625443488359451,-0.07816768437623978,-0.019273223355412483,-0.05392042547464371,0.057471536099910736,-0.0075851501896977425,0.024674493819475174,0.00784691609442234,0.039007533341646194,0.0645841658115387,0.031778484582901,0.009636642411351204,0.0609310157597065,0.02680446021258831,0.005622732453048229,0.0538875050842762,-0.01905970089137554,0.05167064443230629,-0.14916065335273743,-0.07288902252912521,-0.008200952783226967,-0.04367274045944214,-0.1356290727853775,-0.057356446981430054,-0.02192237600684166,0.028507210314273834,0.007188832387328148,-0.03043016418814659,-0.0024542324244976044,0.04015650972723961,0.011841180734336376,-0.03492123261094093,0.007114112377166748,-0.11514375358819962,-0.0016066640382632613,0.07906574010848999,0.008427522145211697,0.06320146471261978,0.0015899415593594313,0.017986048012971878,-0.09431495517492294,-0.018327081575989723,0.019176827743649483,0.058049339801073074,-0.009324334561824799,-0.020258866250514984,0.03633459284901619,0.03813018277287483,-0.010731416754424572,0.05694403499364853,-0.06062908470630646,0.04332299530506134,-0.08198139071464539,0.09311701357364655,0.0014945932198315859,-0.026936087757349014,0.03743022307753563,0.0248186606913805,0.03166823834180832,-0.060169629752635956,-0.03609183058142662,-0.057608019560575485,0.05443717911839485,-0.03799957409501076,0.03102131187915802,-0.06292951852083206,-0.07811003178358078,-0.01824207976460457,0.003519760211929679,0.10377657413482666,-0.0011432789033278823,0.08037189394235611,-0.062239162623882294,0.0063743991777300835,0.007865823805332184,-0.041197389364242554,1.1316188405068533e-33,0.04623202607035637,-0.08642957359552383,0.008368588984012604,0.019505281001329422,0.12689712643623352,0.008464912883937359,-0.029447365552186966,0.019831670448184013,-0.04315723478794098,-0.023993343114852905,0.016338709741830826,0.0036308509297668934,-0.0030470455531030893,0.08334376662969589,-0.0038817862514406443,-0.05166926234960556,-0.09153443574905396,0.06486636400222778,0.05469899624586105,0.03539695963263512,-0.040998704731464386,-0.029403412714600563,-0.08106053620576859,-0.010303100571036339,0.06536611169576645,-0.001130822696723044,0.014821554534137249,-0.011714713647961617,0.004089122638106346,0.005488587077707052,0.039877474308013916,0.018628908321261406,-0.007754289545118809,0.025688670575618744,0.041929956525564194,-0.0651758462190628,0.0022420226596295834,-0.01724252849817276,-0.022052960470318794,0.0813179686665535,0.07591216266155243,-0.024544235318899155,-0.02893170714378357,0.0777151957154274,0.01847749762237072,-0.03053048625588417,0.03296021744608879,-0.017136871814727783,0.08342316001653671,-0.010551218874752522,0.047236889600753784,-0.1068604364991188,0.03954697772860527,0.008892670273780823,0.0076524605974555016,-0.001999294850975275,0.031460948288440704,-0.09692181646823883,-0.026355840265750885,-0.06965749710798264,-0.10061308741569519,0.03935922309756279,-0.04826543852686882,0.021790318191051483,0.024943217635154724,-0.03813904896378517,-0.018589789047837257,0.07124411314725876,-0.018613306805491447,0.005005513317883015,0.01129934098571539,0.07838230580091476,0.052944768220186234,-0.0695817694067955,0.031406767666339874,-0.014990432187914848,-0.016609884798526764,0.090516097843647,-0.02969244308769703,0.06846415996551514,-0.013555497862398624,0.040807824581861496,-0.11947791278362274,0.030731230974197388,-0.03501810505986214,0.003384361509233713,0.022974686697125435,0.05125247687101364,0.027076123282313347,0.05225817486643791,0.018866900354623795,0.012881276197731495,-0.08507633209228516,-0.06372242420911789,0.010321944020688534,-4.299121530266936e-33,-0.0011064392747357488,-0.006414797157049179,-0.0017682529287412763,0.056753795593976974,0.0646308958530426,-0.011906653642654419,0.05910506844520569,0.030623918399214745,0.018063277006149292,-0.0639287605881691,-0.07763750106096268,0.05477994680404663,-0.007741898763924837,-0.027967415750026703,-0.15400950610637665,-0.06006966531276703,-0.006100758444517851,-0.007373278960585594,-0.018081655725836754,0.017973804846405983,0.018037298694252968,0.018532006070017815,0.07032230496406555,0.036674778908491135,-0.007319582626223564,-0.03544238209724426,0.004255592357367277,-0.020732469856739044,0.01392209529876709,-0.011316872201859951,-0.0014109009644016623,0.016100801527500153,-0.03901557996869087,-0.04765291139483452,-0.07046820968389511,0.009541450999677181,-0.004640731029212475,0.07229273021221161,0.01913638226687908,-0.09693000465631485,0.0012103263288736343,-0.06646782904863358,-0.10214659571647644,0.01593177206814289,-0.019770056009292603,-0.020955922082066536,-0.003219884354621172,-0.018558068200945854,0.001882831915281713,0.03161786496639252,-0.09744491428136826,-0.024733399972319603,0.023717014119029045,0.0202091783285141,-0.006856172811239958,0.0032973301131278276,-0.014836017042398453,0.020051347091794014,-0.008190304972231388,0.05871883034706116,0.12484703212976456,-0.047790270298719406,0.04809706658124924,-0.05886054039001465,-0.11507321894168854,-0.02256002463400364,-0.06699927151203156,0.022832579910755157,-0.09888771921396255,0.11999776214361191,-0.04550787806510925,-0.04466472566127777,-0.014207503758370876,-0.0034517257008701563,0.019753705710172653,-0.053721483796834946,0.019602514803409576,-0.09546341001987457,-0.0030482513830065727,0.0004866891249548644,-0.02268356643617153,0.01710636354982853,0.002039234386757016,-0.07417462766170502,0.021999912336468697,-0.03935970366001129,0.05995139107108116,-0.04719546437263489,0.019563306123018265,-0.021677980199456215,-0.050913985818624496,-0.01371824461966753,-0.013085431419312954,0.005237112287431955,0.015129582025110722,-4.963862920703832e-8,0.029634207487106323,0.007634562905877829,-0.007655378431081772,0.007013425230979919,0.0275022704154253,0.030961593613028526,0.06221473962068558,-0.02376486361026764,0.0742393434047699,-0.016385573893785477,-0.09742480516433716,-0.02530059404671192,-0.08577091991901398,0.08235176652669907,-0.02179933525621891,0.05800013989210129,0.06527014821767807,0.04344068840146065,0.007695429027080536,-0.071700818836689,-0.09704841673374176,-0.06315542012453079,0.06876745820045471,0.005214349832385778,0.029367439448833466,0.08732844889163971,0.058100052177906036,0.0038628699257969856,0.00920318253338337,-0.0016087762778624892,0.07231474667787552,0.003890890395268798,0.0015893751988187432,0.07136557251214981,-0.0034028503578156233,-0.04252074658870697,-0.05532122775912285,0.020903252065181732,0.03590681776404381,-0.033846430480480194,-0.044276606291532516,-0.007633512374013662,0.00001352470280835405,-0.03320152312517166,0.025257963687181473,0.009148219600319862,-0.013045362196862698,-0.014577663503587246,-0.06919833272695541,0.03820761665701866,0.11062811315059662,-0.10692103207111359,0.002090333728119731,0.06457612663507462,0.1580486297607422,0.08996888250112534,0.10333053767681122,-0.028671078383922577,0.1159030869603157,0.10685929656028748,-0.02593078836798668,0.07569887489080429,0.03845459222793579,-0.024906732141971588
p2PH_YPCsis,2019-11-30T17:45:27Z,Docker Volumes explained in 6 minutes,[Music] so in this video we're gonna learn about docker volumes in a natural docker volumes are used for data persistence in docker so for example if you have databases or other stateful applications you would want to use docker volumes for that so what are the specific use cases when you need docker volumes so container runs on a host let's say we have a database container and a container has a virtual file system where the data is usually stored but here there is no persistence so if I were to remove the container or stop it and restart the container then the data in this virtual file system is gone and it starts from a fresh state which is obviously not very practical because I want to save the changes that my application is making in the database and that's where I need docker volumes so what are the docker volumes exactly so on a host we have a physical file system right and the way volumes work is that we plug the physical file system path it could be a folder a directory and we plug it into the containers file system path so in simple terms a directory a folder on a host file system is mounted into a directory or folder in the virtual file system of docker so what happens is that when it container rights to its file system it gets replicated or automatically written on the host file system directory and vice-versa so if I were to change something on the host file system it automatically appears in the container as well so that's why when a container restarts even if it starts from a fresh state in its own virtual file system it gets the data automatically from that from the host because the data is still there and that's how data is populated on the startup of a container every time you restart now there are different types of docker volumes and so different ways of creating them usually the way to create docker volumes is using the kourin command so in the docker run there is an option called - V and this is where we define the connection of the reference between the host directory and the container directory and this type of volume definition is called a host volume and the main characteristic of this one is that you decide where on the host file system that reference is made so which folder on the host file system you mount into the container so the second type is where you create a volume just by referencing the container directory so you don't specify which directory on the host should be mounted but that's taking care of the docker itself so that directory is first of all automatically created by docker under the VAR lip docker volumes so for each container there will be a folder generated that gets mounted automatically to the container and this type of volumes are called anonymous volumes because you don't have a reference to this automatically generated folder basically just have to know the path and the third volume type is actually an improvement of the anonymous volumes and it specifies the name of that folder on the host file system and the name is up to you it just to reference the directory and that type of volumes are called named volumes so in this case compared to anonymous volumes you have you can actually reference that volume just by name so you don't have to know exactly the path so from these three types the mostly used one and the one that you should be using in production is actually the named volumes because they are additional benefits to letting docker actually manage those volume directories on the host now they showed how to create docker volumes using docker run commands but if you're using docker compose it's actually the same so this actually shows how to use volume definitions in a docker compose and this is pretty much the same as in docker run commands so we have volumes at buuuut and underneath you define your volume definition just like you would in this - B option and here we use a named volume so DB - data will be the name reference name that you can just think of it could be anything and inviolable data is the path in the container then you may have some other containers and at the end so in the same level as the services you would actually list all the volumes that you have defined you define at least volumes that you want to mount into the containers so if you were to create volumes for different containers you would list them all here and on the container level then you actually define under which path that specific volume can be mounted and the benefit of that is that you can actually mount a reference of the same folder on a host to more than one containers and that would be beneficial if those containers need to share the data in this case you would mount the same volume name or reference to two different containers and you can mount them in two different paths inside of the container thanks for watching the video I hope it was helpful and if it was don't forget to like it if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in the comment section below and I will try to answer them so thank you and see you in the next video,0.01532168872654438,0.055591851472854614,0.042928434908390045,-0.0005666908691637218,0.060702767223119736,-0.07889017462730408,-0.08129624277353287,-0.01739230565726757,0.09242869913578033,-0.0009305921848863363,-0.06782838702201843,0.022364487871527672,-0.03363193944096565,-0.0011690532555803657,-0.12487146258354187,-0.11568018049001694,-0.0058165499940514565,-0.03811541572213173,-0.09438706934452057,0.02250216156244278,-0.07863884419202805,0.03927110508084297,-0.07436881214380264,0.00860417727380991,0.04220053181052208,0.015737004578113556,-0.018652619794011116,0.016116829589009285,0.03939548507332802,-0.01995910331606865,0.03118797205388546,0.07648427784442902,0.08757349103689194,0.027386369183659554,0.02420489303767681,0.014029869809746742,0.028474830090999603,-0.03113195113837719,-0.009681571274995804,-0.057312291115522385,0.07868330180644989,-0.0828997939825058,0.006661240477114916,0.053999871015548706,-0.03172953426837921,0.02025790326297283,-0.008823507465422153,-0.06735113263130188,0.0459025502204895,0.07530378550291061,-0.055534858256578445,-0.08317522704601288,0.0008759934571571648,0.023989185690879822,-0.019692733883857727,0.060274768620729446,0.05393100902438164,0.04156786948442459,0.02604951709508896,-0.011991346254944801,-0.044922150671482086,-0.029005112126469612,0.002952990122139454,0.012181435711681843,0.09363159537315369,-0.025118844583630562,-0.022893637418746948,-0.003696656785905361,0.005560543853789568,-0.006364801898598671,0.06798236817121506,0.08170956373214722,0.0004655153024941683,-0.05396081507205963,-0.04106149822473526,-0.006299558095633984,0.00857281032949686,0.012653321027755737,-0.0039043084252625704,-0.0014032624894753098,-0.0017079978715628386,0.016653768718242645,-0.03129134699702263,0.013023783452808857,-0.10621925443410873,-0.029445050284266472,0.004114245064556599,0.013988831080496311,-0.04393471032381058,-0.0664568692445755,0.052712731063365936,-0.000900128623470664,0.012325759045779705,-0.0010803511831909418,0.03492952883243561,-0.024108460173010826,-0.05918370932340622,-0.029619185253977776,0.0631023421883583,0.02050093188881874,-0.011145660653710365,0.04737524688243866,0.009920042008161545,-0.0393846370279789,0.06396663188934326,-0.05518762394785881,0.0027998832520097494,0.062283966690301895,-0.08861871808767319,0.051364388316869736,0.04421410337090492,-0.03434164822101593,-0.026910077780485153,0.07513345032930374,0.03167574480175972,0.06944090873003006,-0.02998913824558258,-0.021523520350456238,-0.0012771774781867862,-0.03287866711616516,0.09253691136837006,-0.011139127425849438,0.0729617327451706,-0.09440679103136063,-0.02057958021759987,0.07013555616140366,-0.005276730749756098,3.0678288165234854e-38,-0.07422683387994766,-0.13697181642055511,0.02527751587331295,0.030597023665905,0.10735294222831726,-0.028543440625071526,0.0256815142929554,-0.027330908924341202,0.01188238151371479,-0.017167866230010986,-0.06647487729787827,0.11899743974208832,-0.02374284341931343,0.03468183055520058,-0.04743927717208862,-0.08456643670797348,-0.0022414710838347673,0.11938253045082092,-0.09866848587989807,-0.05489622429013252,0.0438493937253952,-0.07974626123905182,-0.052168309688568115,-0.06132417917251587,0.0689440444111824,-0.014813441783189774,0.015001252293586731,-0.057316798716783524,0.005212365183979273,-0.00310097960755229,-0.018125202506780624,0.029077952727675438,0.009225451387465,-0.025344012305140495,0.028714478015899658,-0.010912356898188591,0.07954572886228561,0.0030578470323234797,-0.04253825172781944,-0.0012571297120302916,-0.021712996065616608,-0.07411232590675354,-0.017398206517100334,0.0019011314725503325,-0.02474486269056797,0.0027210102416574955,-0.011130842380225658,-0.05829014629125595,-0.004944574553519487,0.14726968109607697,0.06485925614833832,0.0009854568634182215,-0.04756813868880272,0.02351313829421997,-0.023880474269390106,0.005710882600396872,-0.02344413287937641,-0.05496911704540253,-0.020111020654439926,0.0601046085357666,-0.05735330283641815,0.062161773443222046,0.042409878224134445,-0.00586334802210331,-0.041472725570201874,0.03677941486239433,0.027921373024582863,0.10925216972827911,0.06302965432405472,0.060826871544122696,-0.02593878097832203,0.000042067738831974566,0.044526878744363785,-0.03930503875017166,0.0015179765177890658,-0.05280383676290512,-0.02045084349811077,-0.02909054420888424,-0.06430905312299728,0.007076510228216648,0.040330663323402405,-0.0055087776854634285,-0.014076205901801586,0.03152185678482056,-0.07987645268440247,-0.04503500461578369,0.05934919789433479,0.07414557039737701,-0.07623328268527985,-0.0098659573122859,0.014826228842139244,0.04338899999856949,-0.025253957137465477,-0.03166310116648674,-0.0466311015188694,-1.0838383930592852e-33,0.02501157857477665,-0.050069332122802734,-0.04400920495390892,0.03149346634745598,0.07459012418985367,0.005711405072361231,0.021462246775627136,0.11597417294979095,-0.018016498535871506,-0.04805444926023483,-0.06190149113535881,0.02652267925441265,-0.0023842963855713606,-0.0057439240626990795,-0.044527050107717514,0.04178118333220482,0.061667535454034805,-0.09675321727991104,0.07242026925086975,0.0643511414527893,0.08003085106611252,-0.045770905911922455,-0.01889658346772194,-0.010709504596889019,-0.07457267493009567,0.021331787109375,0.05594731867313385,-0.0567055344581604,-0.03225468471646309,0.005202913656830788,-0.027802782133221626,-0.011559616774320602,0.004677335266023874,0.007174874655902386,0.029278988018631935,0.03687099367380142,0.0011734763393178582,0.08710183948278427,-0.032741378992795944,-0.08758620917797089,-0.01803218014538288,-0.05934855341911316,-0.01067249197512865,-0.02300334721803665,-0.0513763427734375,-0.05175578594207764,0.06303567439317703,-0.01493915356695652,-0.03831692412495613,0.023419518023729324,-0.020099984481930733,-0.015945788472890854,0.07429999113082886,0.03065579943358898,0.03541942685842514,-0.04579121991991997,-0.06081702932715416,-0.047718584537506104,0.03403691574931145,0.07491306960582733,0.09239687025547028,-0.00399056077003479,-0.0177368875592947,-0.0028008113149553537,-0.0003476905985735357,0.029182715341448784,0.01437532901763916,-0.012957100756466389,-0.04999972879886627,0.06542306393384933,0.07809329777956009,-0.02026204764842987,-0.02723853848874569,0.014774358831346035,-0.019284861162304878,-0.056115951389074326,-0.055634789168834686,-0.040675725787878036,0.012158920988440514,-0.0012228633277118206,-0.033308275043964386,0.04164517670869827,-0.016672099009156227,-0.05326465517282486,-0.006395401433110237,0.0072976876981556416,0.07893601804971695,0.030899226665496826,0.07371222972869873,0.023726630955934525,0.03102482296526432,-0.01166959386318922,-0.09892965853214264,0.09872761368751526,0.03500029072165489,-1.4501055467519564e-8,0.052892301231622696,-0.018621809780597687,-0.00047994553460739553,0.02186763659119606,0.027529122307896614,-0.06683514267206192,0.02486225962638855,0.1608305126428604,-0.06238951534032822,0.05448378622531891,0.054133716970682144,-0.07708431780338287,-0.07750000059604645,-0.027148108929395676,0.017056958749890327,0.06242819130420685,-0.01205714326351881,-0.0301335658878088,-0.0423334501683712,-0.11331666260957718,-0.01106521300971508,0.04543139040470123,0.05967625975608826,-0.10860922932624817,-0.012012236751616001,0.05656218156218529,0.06934338808059692,0.05368689447641373,-0.000600729079451412,-0.05477524548768997,0.03639284521341324,0.01832147128880024,-0.13072794675827026,0.037936024367809296,0.02079392410814762,0.03218259662389755,-0.04819434508681297,-0.03946978971362114,0.03675634041428566,0.02938411384820938,-0.12012456357479095,-0.07265733182430267,0.018498951569199562,-0.06125270575284958,-0.012504557147622108,0.02356058545410633,-0.07408654689788818,0.0907721221446991,-0.03167368844151497,0.020389975979924202,0.05786314979195595,-0.023356102406978607,-0.013432527892291546,0.07920713722705841,0.10644419491291046,0.07395759969949722,0.0018470472423359752,0.002186971018090844,0.03688984736800194,0.05722574517130852,-0.019675331190228462,0.12025236338376999,-0.07291751354932785,0.04233706742525101,-0.0009300366509705782,0.0020369021221995354,-0.04483676329255104,0.026500670239329338,0.01927066594362259,-0.03364400193095207,-0.01469157449901104,0.029505468904972076,0.11818475276231766,0.03788087144494057,-0.02474951185286045,0.060059189796447754,0.06183471903204918,-0.03266776353120804,-0.06206737086176872,-0.053303059190511703,0.03363620489835739,0.0994696095585823,-0.030689166858792305,0.10740657895803452,-0.020182516425848007,0.04981471225619316,-0.05202201008796692,0.027886975556612015,-0.03660457208752632,0.04362587630748749,-0.05050557479262352,-0.06474890559911728,0.006523369811475277,-0.04429242014884949,0.018098557367920876,0.055385660380125046,0.02621537074446678,-0.02349204383790493,-0.011468907818198204,0.030495867133140564,0.020310334861278534,-0.055622730404138565,-0.10624612867832184,-0.03961710259318352,0.006073609460145235,-0.050314515829086304,-0.026752449572086334,0.02654043771326542,-0.07892812788486481,-0.050157155841588974,0.026115385815501213,-0.04935124143958092,-0.006002071779221296,0.0566510334610939,-0.032557930797338486,-0.032495755702257156,-0.018698547035455704,0.1645607054233551,-0.008177162148058414,0.061626482754945755,0.05169657990336418,0.11383763700723648,-0.039806704968214035,0.037571463733911514,0.06904870271682739,0.045500267297029495,0.0030744150280952454,-0.008896604180335999,0.07809150218963623,-0.02104351483285427,-0.004802368115633726,0.03845700994133949,0.037115033715963364,-0.1079997718334198,0.011528564617037773,0.05467994883656502,-0.05444299429655075,-0.05882705748081207,-0.008543645963072777,-0.012565105222165585,0.0003516811702866107,0.03565842658281326,0.008991910144686699,0.08625365048646927,0.0308988057076931,0.046449143439531326,0.00026205831090919673,-0.038142941892147064,-0.07982661575078964,-0.017485592514276505,-0.014346986077725887,-0.0005174647667445242,0.00769615825265646,-0.06600531190633774,0.04728562384843826,-0.011972583830356598,0.09900841116905212,-0.04034917801618576,0.05781502649188042,-0.03076169639825821,-0.02936338260769844,0.008863749913871288,0.15451805293560028,-0.03360075131058693,0.026221010833978653,-0.027773698791861534,-0.018435275182127953,0.003582468256354332,0.05442097783088684,-0.047858599573373795,0.0006302516558207572,-0.03766271099448204,-0.048687372356653214,0.002244449919089675,-0.024511223658919334,0.0032169283367693424,-0.06117264926433563,0.02384987287223339,0.02212267741560936,-0.019958268851041794,-0.04752212017774582,0.0037191917654126883,-0.02556070126593113,-0.00657239556312561,0.03992952033877373,-0.06333035975694656,0.11190766841173172,-0.053118254989385605,-0.020735211670398712,-0.012136071920394897,-0.06569881737232208,7.644882152692961e-34,-0.07739367336034775,-0.12867453694343567,0.09360552579164505,0.04040991887450218,0.08506226539611816,-0.07730074971914291,0.03369993343949318,-0.008280890993773937,0.027627497911453247,-0.011217963881790638,-0.008512417785823345,0.10511084645986557,-0.023164093494415283,0.03353869169950485,0.06481480598449707,-0.05439033731818199,-0.08261056244373322,0.0347224660217762,0.03622312471270561,-0.07294201850891113,0.06222936511039734,0.07400301843881607,-0.009217724204063416,-0.048231106251478195,0.07476305961608887,-0.04860563203692436,0.007779986131936312,-0.05580003187060356,-0.052088405936956406,0.008206474594771862,-0.05199640616774559,-0.013568511232733727,0.011973252519965172,0.002770661609247327,-0.01198846660554409,0.056833721697330475,-0.017294730991125107,0.031442224979400635,-0.11630771309137344,-0.04728333652019501,0.043154824525117874,-0.03712542727589607,0.032670456916093826,0.03346307948231697,0.00270309136249125,-0.06162736937403679,0.02899419143795967,-0.019950255751609802,-0.03147289156913757,0.0689263567328453,0.08332571387290955,-0.04663228243589401,-0.029431676492094994,0.058018241077661514,-0.05007129907608032,-0.008597063831984997,-0.036565668880939484,-0.09064766764640808,-0.03258490562438965,-0.01139326486736536,-0.1334918886423111,0.024790262803435326,0.04450348764657974,0.02091795578598976,-0.028623804450035095,0.012127980589866638,0.03529823198914528,-0.05948750302195549,0.08592463284730911,0.00424365745857358,-0.031309016048908234,0.023106470704078674,-0.019536904990673065,-0.03943788260221481,-0.03755975142121315,-0.011291906237602234,-0.02866724506020546,-0.05800187215209007,-0.08550190180540085,0.020392855629324913,0.0121890464797616,-0.05959361419081688,-0.09787776321172714,0.07727646082639694,-0.032445382326841354,-0.08275758475065231,-0.0026466629933565855,-0.0053898850455880165,-0.0011363455560058355,-0.05457860231399536,0.05055111646652222,0.02013866975903511,0.042528606951236725,-0.03605863079428673,0.0021704554092139006,-3.242683818689822e-33,0.05393081530928612,-0.030239013954997063,-0.05014525726437569,0.044810451567173004,-0.028999101370573044,0.06108696758747101,0.03177276998758316,0.020943952724337578,-0.03694620728492737,-0.10576649010181427,-0.14941325783729553,0.04970794916152954,-0.0010603012051433325,0.06765829026699066,-0.09709589928388596,0.012646667659282684,-0.03786139562726021,-0.12468579411506653,-0.0000962972262641415,0.009787889197468758,-0.01612592302262783,-0.004178292118012905,0.04954005032777786,0.023391082882881165,-0.07634777575731277,-0.042484547942876816,-0.045620325952768326,-0.04554896801710129,-0.03982241824269295,0.002086375607177615,0.019944429397583008,-0.0570831224322319,0.032226596027612686,-0.07407413423061371,-0.01210898719727993,-0.027053577825427055,-0.008896641433238983,0.028997160494327545,-0.04398186132311821,-0.04815135896205902,-0.010304370895028114,-0.02624461054801941,0.016389667987823486,-0.0011617204872891307,-0.04592641815543175,-0.02245773933827877,-0.0033675481099635363,0.03540932014584541,0.004770445171743631,-0.021975260227918625,-0.00226329336874187,-0.02960682287812233,0.009795350953936577,0.014995930716395378,0.05690881609916687,0.0022828304208815098,-0.06288450211286545,0.03275853022933006,-0.029321009293198586,0.043667685240507126,0.1135987788438797,-0.020705407485365868,-0.03138319030404091,0.008156074211001396,-0.10430006682872772,-0.022708022966980934,-0.014550121501088142,-0.016188383102416992,-0.09047089517116547,0.0523676723241806,0.03766651079058647,0.013611053116619587,0.04853840917348862,0.05727878957986832,0.02185935527086258,-0.049541763961315155,0.0052490863017737865,-0.10481509566307068,0.04262413829565048,0.012856543064117432,-0.07569603621959686,0.0048049758188426495,-0.004305432550609112,-0.06636282056570053,-0.014716630801558495,-0.02772587165236473,0.0278913751244545,-0.0425541065633297,0.07291002571582794,-0.003034661989659071,-0.017076265066862106,0.009147264994680882,-0.07319997996091843,0.05030751973390579,0.005129470024257898,-4.303955236650836e-8,0.02177315764129162,0.02615351416170597,0.018879566341638565,0.027570664882659912,-0.03331783041357994,-0.0461013987660408,0.0766381025314331,0.12183798104524612,0.011086443439126015,0.053503818809986115,0.04617999121546745,-0.008517117239534855,-0.10482010990381241,-0.07356511056423187,-0.004489796236157417,0.11930709332227707,0.10089634358882904,-0.009924614802002907,-0.01828017085790634,-0.01919620856642723,-0.0060548135079443455,0.05463540554046631,0.016107328236103058,0.0022286544553935528,0.062448762357234955,0.019858261570334435,0.10406766086816788,0.03217093273997307,0.008986090309917927,0.040048614144325256,0.09748327732086182,0.022953256964683533,-0.017589159309864044,0.10517267137765884,-0.015264141373336315,0.018649451434612274,-0.025293100625276566,-0.00451450003311038,0.019948232918977737,-0.03220880776643753,-0.05825730785727501,-0.06716261059045792,0.03750123828649521,-0.0524066723883152,-0.015336182899773121,-0.004394237417727709,-0.013512643054127693,0.06708558648824692,-0.038642432540655136,0.03812980651855469,-0.019774191081523895,0.011197080835700035,-0.06224029138684273,0.0696454793214798,0.09867807477712631,0.08883581310510635,0.01300007477402687,0.07614095509052277,0.024821270257234573,0.016340216621756554,-0.002784018637612462,0.13936834037303925,0.04259864613413811,-0.0030865732114762068
vWSRWpOPHws,2019-11-29T16:59:37Z,Private Repository explained | Registry on AWS - Docker in Practice || Docker Tutorial 11,so in this video we're gonna create a private repository for docker images on aws ecr there are many more options for docker registries among them nexus and digitalocean so we're gonna see how to create a registry there build and tag an image so that we can push them into that repository and in order to push the images into a private repository you first have to log into that repository so we're going to see how that works this video is part of a video series of how to use docker in practice in a software development and later in deploying that application so if you want to go through the whole series here's a link to the playlist and make sure to check it out so let's see how it all works [Music] so the first step is to actually create a private repository for docker it's also called docker registry um in this case we're gonna do it on aws so let's see so i already have an account on avws so the service that we're going to use is called elastic container registry so ecr docker container registry and because i don't have a repository there yes i am presenting with the screen so in order to create a repository click on get started and here we have a repository name and we are actually going to name it the name of the application that we have so i'm actually going to name it my app this is the domain of the registry from aws and this is the repository name which is the same as my image name and don't worry about the other stuff right now and just create a repository it's as simple as that now one thing i think specific to amazon container service is that here you create a docker repository per image so you don't have a repository where you have uh where you can actually push multiple images of different applications but rather for each image you have its own repository and when i when you go inside of the repository here it's empty now but what you store in a repository are the different tags or different versions of the same image so this is how the amazon container service actually works there are other docker registries that work differently for example you create a repository and you can just throw all of your container images inside of that one repository so i think this is more or less specific for aws so anyways we have repository which is called my app and let's actually see how we can push the image that we have locally so actually check that once more so we want to push this image here into that repository so how do we do that if you click on this one the view push commands will be highlighted this is different for each registry but basically what you need to do in order to push an image into repository are two things one you have to login into the private repository because you have to authenticate yourself so if you are pushing from your local laptop or local environment you have to tell that private repository hey i have access to it this is my credentials if a docker image is built and pushed from a jenkins server then you have to give jenkins credentials to login into the repository so docker login is always the first step that you need to do so here aws actually provides a docker login command for aws so it doesn't say docker login but in the background it uses one so i'm going to execute this login command for aws docker repository so in the background it uses actually docker login to authenticate so in order to be able to execute this you need to have aws command line interface and the credentials configured for it so if you don't i'm gonna put a link to uh the guide of how to do that in the description i have configured both of them so i can execute this command and i should be logged in successfully to the docker repository so now i have authenticated myself to the docker repository here so i'm able to push the image that i have locally to that repository but before i do that there is one step i need to do so i've already built my image so that's fine and now i have to tag my image and if this command here looks a little bit uh too complicated for you or too strange let's actually go and look at image naming concepts in docker repositories so this is the naming in docker registries this is how it works the first part of the image name the image full name is the registry domain so that is the host port etc slash repository or image name and the tag now you may be wondering every time we were pulling an image out of docker hub we actually never had this complex long name of the image right so when we were pulling an image it looked like this docker poll 4.2 the thing is with docker hub we're actually able to pull an image with a shorthand without having to specify a registry domain but this command here is actually a shorthand for this command what actually gets executed in the background when we say docker pull is docker pull the repo the registry domain so docker dot io slash library is a registry domain then you have the image name and then you have the tag so because we were working with docker hub we were able to use a shortcut so to say in the private registries we can't just skip that part because there is no default configuration for it so in our case in aws ecr what we're gonna do is we're gonna execute docker pull the full registry domain of the repository this is what we're gonna see here and a tag and this is how aws just generates uh the docker registry name that's why we see this long image name with the tag here and we have to take our image like this so let's go back and take a look at our images our image that we built again and under the repository it says my app now the problem is we can just push an image with this name because when we say docker push my app like this docker wouldn't know to which repository we're trying to push by default it will actually assume we're trying to push to docker hub but it's not going to work obviously because we want to push it to aws so in order to tell docker you know what i want this image to be pushed to aws repository with the name my app we have to take the image so we have to include that information in the name of the image and that is why we have to tag the image tag basically means that we are renaming our image to include the repository uh domain or the address and the name okay and aws already gives us the command that we can execute we want to use the specific version so i'm gonna use 1.0 in both so what this is going to do is it's going to rename this is what tech does my app 1.0 this is what we have locally this is what the name is to this one here so let's execute that and let's see what the outcome is and as you see it took the image that we had made a copy and renamed it into this one so these two are identical images um they're just called in a different way and now when we go back we see the docker push command so basically this thing here is the same as docker push and name of the image and the take so this push command will tell docker you know what i want to take the image with take 1.0 and push it into a repository at this address so when i execute this command see the push command will actually push those layers of the docker image one by one this is the same thing as when we're pulling it we already we also pulled the images layer by layer and this is what happens in the reverse direction when we push it so this is also gonna take a little bit great so the push command was complete and we should be able to see that image in the aws repository now so if i go inside see i have image tag with 1.0 this is our tag here and push the time the digest which is the unique hash of that image and the image uri which is again the name of the image using the the repository address image name or repository name in this case and the tag so now let's say i made some changes in the docker file um you know let's say i re renamed this home slash home slash app to node app like this or what could also lead to need to recreate an image is obviously where when i um change something in the code right so you know let's say i were to delete this line because i don't want to console.log to be in my code and now i have a different version of the application where i have changes in the application so now i want to have those changes in the new docker image so now let's build a new docker image out of it so docker build let's call it my app with a version 1.1 and a path to a docker file and now i have a second image which is called my app with version 1.1 so now again because i want to push this to a repository i have to rename it to include the repository address inside of it so i'm going to do docker tag the first parameter is the image that i want to rename and the second one is the name of that image a new name so it's going to be the same as the previous one because the repository name and the address is the same remember we have one repository for one image but for different versions so we're building a version 1.1 so it should end up in the same repository so now here we have 1.1 and if i take that and images i have a second image here so i'm gonna copy that and i'm gonna do docker build and do not forget the tag it's important because it's part of the complete name sorry it's docker push and now some of the layers that i already pushed are there only the ones that changed are being re-pushed so to say and also know that i just have to do docker login once at the beginning and then i can pull and push images uh from this repository uh as as many times as i want so docker login is done once so now that is complete let's actually reload this so my repository now has two versions so this is pretty practical if you are for example testing with different versions and you want to have a history of um those were image tags um if you want to for example test a previous version and i think in aws the repos each repository has a capacity of holding up to 1 000 image versions so for example my app here you can have a thousand different tags of the same image okay so now again to compare it to the initial diagram that we saw for this complete flow let's actually switch back to it quickly so here what we did is basically simulate how jenkins would push an image to a docker repository so whatever we did on our laptop will be the same commands executed on a docker on the jenkins server and again jenkins user or jenkins server user has to have credentials to the docker repository to execute docker login depending on the registry or repository configuration will look different and jenkins needs to tag the image and then push it to the repository and this is how it it's done and the next step uh of course we need to use that image that that is lying now in the repository and we're gonna see how it's uh pulled from that repository and again we're gonna do it on the local environment but it's the same thing that's a development server or any other environment will actually execute thanks for watching the video i hope it was helpful and if it was don't forget to like it this is a video series so i will create a new one every week so if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in the comment section below and i will try to answer them so thank you and see you in the next video,-0.055435776710510254,0.04376653954386711,-0.04970928654074669,-0.0023030417505651712,0.05768859013915062,-0.0014094620710238814,-0.006187066901475191,-0.01235581561923027,-0.000044169977627461776,0.04925520345568657,0.020741939544677734,-0.025747166946530342,0.04002761095762253,-0.059730079025030136,0.026255128905177116,-0.026805538684129715,0.0474303737282753,-0.036000341176986694,-0.039973754435777664,-0.025571290403604507,-0.12013278901576996,0.051911283284425735,-0.02729305438697338,0.04435478150844574,-0.08605576306581497,0.052634306252002716,-0.014821596443653107,-0.010740638710558414,0.0306223277002573,0.02096863090991974,0.04255568981170654,-0.00034360477002337575,0.11123611778020859,0.006013413425534964,0.06793331354856491,0.06990013271570206,0.028097623959183693,-0.025205979123711586,-0.05450454354286194,-0.000033394419006071985,0.028274251148104668,-0.07587291300296783,-0.027073753997683525,-0.0953664556145668,-0.03030376136302948,-0.03041219525039196,0.01868588849902153,-0.08277382701635361,-0.027308426797389984,0.002522324677556753,-0.02426018752157688,-0.05230938270688057,-0.024856647476553917,-0.0024402651470154524,-0.03183344006538391,0.015751197934150696,0.022934677079319954,0.09385666251182556,0.029556715860962868,-0.08457160741090775,0.057957470417022705,-0.07076297700405121,-0.02404589205980301,0.016759667545557022,0.04859771952033043,0.005114472005516291,0.04425670579075813,0.0006490561063401401,0.13911862671375275,-0.07437198609113693,-0.0764678418636322,-0.00033995654666796327,-0.006327595561742783,-0.03885892406105995,-0.006970132701098919,-0.010953732766211033,0.003781328909099102,0.03159060701727867,-0.012336049228906631,-0.022230181843042374,-0.0465482696890831,0.01894887536764145,-0.01623212918639183,-0.02379491925239563,-0.09971856325864792,0.004838300868868828,0.0038196127861738205,0.007074978668242693,0.08783803880214691,0.036368176341056824,0.05012509971857071,-0.05184962600469589,0.061069123446941376,-0.05070692300796509,0.015716690570116043,0.015045832842588425,-0.04133685305714607,0.0012467866763472557,0.0005873820628039539,-0.0108936233446002,0.06418067216873169,-0.02782479114830494,-0.028972452506422997,-0.038461774587631226,0.06794428080320358,0.05259019881486893,-0.05317340046167374,0.01554371789097786,0.01356153842061758,0.02991272322833538,-0.014010070823132992,-0.052188772708177567,-0.011741806752979755,0.009474089369177818,-0.043294332921504974,0.0022022209595888853,-0.01849299855530262,-0.05866071209311485,0.02996010333299637,-0.03695183992385864,0.05878819152712822,-0.021373305469751358,0.1115400567650795,-0.10657155513763428,-0.08709706366062164,0.04947305843234062,-0.08527301251888275,-1.4350678398903305e-33,0.026744281873106956,-0.021969065070152283,0.021667756140232086,-0.015293315052986145,0.10241293162107468,0.0038483510725200176,-0.06216474622488022,0.013542057946324348,-0.02178560011088848,-0.00499570881947875,0.08458533883094788,0.0022055564913898706,-0.01982182264328003,0.013468782417476177,-0.006009951699525118,-0.0025173532776534557,-0.10301313549280167,0.04713159427046776,0.011594894342124462,0.014141633175313473,0.0023951746989041567,-0.019451461732387543,-0.019143858924508095,-0.05752642825245857,0.111624576151371,-0.024420080706477165,0.06258674710988998,-0.035314492881298065,0.04717676341533661,0.013257688842713833,0.08783969283103943,0.05189431086182594,-0.004852067679166794,-0.02835053950548172,0.0802704393863678,-0.012891750782728195,0.022887518629431725,0.051730554550886154,0.015178590081632137,-0.0015609299298375845,0.040562164038419724,-0.07125584036111832,0.01794585771858692,0.05478285253047943,0.07172968238592148,-0.07062982767820358,0.007030921056866646,0.004778253845870495,0.1299384981393814,0.026399843394756317,0.020261872559785843,-0.09050634503364563,-0.047007445245981216,-0.02478332817554474,0.01756584830582142,-0.03153757378458977,-0.022908594459295273,-0.022652432322502136,-0.03787991404533386,-0.016538865864276886,-0.1039915606379509,0.04415469989180565,0.04840163141489029,0.012809991836547852,-0.021752478554844856,0.006016072351485491,-0.09881795197725296,0.136454239487648,0.007500877138227224,0.05425015836954117,0.018655402585864067,0.09240955859422684,0.026358596980571747,-0.009784471243619919,-0.05897681787610054,-0.029534243047237396,0.029893141239881516,0.035577427595853806,-0.0022874365095049143,0.05192410573363304,-0.08389250189065933,0.052093930542469025,-0.07563342154026031,0.10521651804447174,-0.12992145121097565,-0.028354253619909286,0.02812383510172367,0.11881478130817413,0.05539439246058464,-0.010710074566304684,0.027868613600730896,-0.012800485827028751,-0.0831163227558136,-0.05430598184466362,-0.0713743269443512,-2.317705681126996e-33,0.0006646834663115442,0.0006695053889416158,-0.07377929240465164,0.030309366062283516,0.010121183469891548,-0.042320165783166885,0.03616251423954964,0.0038401305209845304,0.0009035086259245872,-0.018661271780729294,-0.0641392394900322,0.08774353563785553,0.022901853546500206,-0.012781218625605106,-0.016283471137285233,-0.050540413707494736,-0.06878306716680527,-0.09159397333860397,-0.015387373976409435,-0.01564062386751175,0.04319772869348526,-0.06789499521255493,0.06614883989095688,0.0743180438876152,0.02027774788439274,-0.06676136702299118,-0.0016178636578842998,-0.026215961202979088,0.0390859879553318,-0.022672075778245926,0.003720669774338603,0.040209826081991196,-0.09104957431554794,0.0073606884106993675,-0.03663802146911621,0.008699548430740833,-0.03646622598171234,0.08313949406147003,-0.05431971326470375,-0.0904855951666832,-0.007012857589870691,-0.08079420030117035,-0.12125767022371292,-0.0022873682901263237,-0.00016792467795312405,0.003222567029297352,0.014225789345800877,0.031818050891160965,-0.04507920891046524,-0.02666720747947693,-0.050928544253110886,-0.05930740386247635,0.05284738168120384,0.049173504114151,-0.004573470447212458,-0.009513886645436287,-0.00844516046345234,0.03664815425872803,-0.015259222127497196,0.03463105857372284,0.09187965840101242,-0.03234953060746193,-0.018326018005609512,0.061973508447408676,-0.07792172580957413,-0.07296527922153473,-0.03291059657931328,0.010439177043735981,-0.05004147067666054,0.01857134699821472,0.050490379333496094,-0.11141109466552734,-0.00912414025515318,-0.08975830674171448,-0.03788216784596443,-0.008859905414283276,0.010963113978505135,-0.055859945714473724,0.01548069529235363,0.016596920788288116,-0.03339603915810585,0.04066992178559303,0.026514466851949692,-0.09725393354892731,0.012606012634932995,0.014366978779435158,0.09805858880281448,-0.0010991399176418781,0.03652610257267952,0.055044304579496384,-0.05607626959681511,-0.09195065498352051,-0.09722095727920532,0.03156951069831848,-0.02327112667262554,-2.0719708615501986e-8,0.005574386101216078,0.007087216712534428,0.00849931500852108,0.04952584207057953,0.0679602324962616,-0.016717329621315002,-0.0043149907141923904,0.04837838187813759,-0.014390417374670506,0.0075286575593054295,-0.02202433906495571,-0.07613430172204971,-0.10291092842817307,0.037326447665691376,0.04565569758415222,0.07641688734292984,0.021453170105814934,0.049830783158540726,-0.007943765260279179,-0.03974362462759018,-0.08304719626903534,-0.06480838358402252,0.027646806091070175,-0.032802656292915344,-0.040735162794589996,0.09699476510286331,0.06798260658979416,0.09211722016334534,0.029063493013381958,-0.01931687630712986,0.08806485682725906,-0.049560096114873886,-0.025056714192032814,-0.0032831698190420866,0.018508873879909515,-0.039708949625492096,-0.05381852015852928,-0.02389378473162651,0.02545349858701229,-0.02256695181131363,-0.07686451822519302,-0.045415621250867844,0.010161585174500942,-0.0066999224945902824,-0.047550614923238754,0.06467314809560776,0.05502696335315704,0.04304464906454086,-0.05308748781681061,0.04888654127717018,0.07414261996746063,-0.06654270738363266,0.0024335565976798534,0.1097688302397728,0.07410920411348343,0.09578406810760498,0.07937551289796829,-0.018694886937737465,0.07104860991239548,0.04671761021018028,0.009648463688790798,0.10941159725189209,-0.0035832510329782963,0.0007983084069564939,-0.03315213322639465,-0.032207272946834564,-0.03740537911653519,-0.04799060896039009,0.06448855996131897,0.02264854498207569,0.004155061673372984,-0.020539358258247375,0.03185230493545532,0.03192463144659996,0.02941763401031494,-0.06897568702697754,0.062141455709934235,-0.0401323139667511,0.04831090196967125,-0.05598156154155731,0.04698387533426285,-0.04364791885018349,-0.01968224160373211,0.01443265751004219,-0.08648194372653961,0.025089358910918236,-0.024700606241822243,0.0008198042050935328,-0.09953044354915619,0.022679027169942856,0.041044916957616806,0.02683202177286148,-0.013577156700193882,-0.04455534368753433,0.11140497028827667,-0.029302656650543213,0.07624222338199615,-0.04481735825538635,0.05056542903184891,0.05442327260971069,-0.025051211938261986,-0.054406408220529556,-0.12034555524587631,-0.03748147934675217,0.06000227853655815,-0.04025693237781525,-0.02518978714942932,-0.10920434445142746,-0.06774962693452835,-0.06765177100896835,0.03763248026371002,-0.0977664589881897,0.018917422741651535,0.006947224028408527,-0.00019381717720534652,-0.053038280457258224,-0.028316820040345192,-0.059675779193639755,-0.06463105976581573,0.020302947610616684,0.021057426929473877,0.07476132363080978,0.04656754061579704,-0.007137714885175228,0.06226266175508499,-0.08732815831899643,0.01204339973628521,-0.007971975952386856,0.04229937493801117,-0.0026005064137279987,0.05567702278494835,0.02615601010620594,0.09745264053344727,-0.11033895611763,-0.059276506304740906,0.0038944552652537823,0.02479827031493187,-0.031882669776678085,0.005931618623435497,-0.004153726156800985,-0.012253384105861187,0.013750975951552391,-0.03238074854016304,-0.01273596566170454,0.037281252443790436,0.02878614515066147,-0.004446183796972036,-0.07596741616725922,-0.11778678745031357,-0.014425479806959629,0.03966238722205162,0.021389413625001907,0.05555514618754387,-0.008475160226225853,0.03039426915347576,-0.054583948105573654,0.05348508059978485,-0.04066895693540573,0.11698934435844421,0.0073299650102853775,-0.025607820600271225,-0.0073534343391656876,0.03459782153367996,-0.009252546355128288,0.06184223294258118,0.007149593438953161,-0.037182047963142395,-0.023663079366087914,0.0856865793466568,-0.009881576523184776,-0.06398376822471619,0.07261492311954498,0.008750373497605324,0.056143563240766525,-0.017668353393673897,-0.011064227670431137,-0.04890869930386543,-0.0004951386363245547,-0.04484960809350014,0.018908364698290825,-0.04020097851753235,-0.08539409935474396,0.05766031891107559,-0.02318006381392479,0.10814493894577026,-0.04098251461982727,0.059012677520513535,-0.1027325764298439,-0.03241683542728424,0.037542618811130524,-0.0938410609960556,2.2122847763513607e-33,0.02278062514960766,-0.0254030991345644,0.07175292074680328,-0.027047595009207726,0.10236681252717972,-0.011830744333565235,-0.05696772783994675,0.04270072281360626,-0.033034488558769226,-0.016125893220305443,0.03465372696518898,0.007048850413411856,0.016733573749661446,0.031145021319389343,-0.018613578751683235,-0.07102914154529572,-0.10095187276601791,0.026122087612748146,0.043694764375686646,0.004551023244857788,-0.043907325714826584,-0.03049350343644619,-0.009966696612536907,-0.04437350481748581,0.06587127596139908,0.005415413994342089,0.043787967413663864,-0.058362629264593124,0.05914396047592163,-0.016201825812458992,0.019477132707834244,-0.0336882509291172,0.00824645720422268,-0.008025173097848892,0.056024305522441864,-0.014944754540920258,-0.020928462967276573,0.03696604073047638,0.025295676663517952,-0.02382088266313076,0.07426207512617111,-0.09349002689123154,-0.026834743097424507,0.06729955971240997,0.012023900635540485,-0.03501471132040024,0.04275824502110481,-0.007054637186229229,0.10222107917070389,0.03513624519109726,0.09712351113557816,-0.11369123309850693,-0.06613796949386597,-0.03295707702636719,0.0022770962677896023,0.007889845408499241,-0.03884653002023697,-0.05070735141634941,-0.027949651703238487,-0.07157202810049057,-0.027429362758994102,0.03777356445789337,0.0554555281996727,-0.0002860051754396409,-0.02940998785197735,0.024953706189990044,-0.001239656819961965,0.05391520634293556,0.06067556142807007,-0.00286045647226274,0.03728923574090004,0.06351026892662048,0.04865894094109535,-0.04962323606014252,0.012277113273739815,0.014535401947796345,0.006597929634153843,0.04410713538527489,-0.03907099366188049,0.08776094764471054,-0.05509306862950325,0.0433979332447052,-0.07195311039686203,0.13836704194545746,-0.07943586260080338,-0.021085167303681374,0.02462848275899887,0.0727013573050499,0.04196205362677574,0.02208695001900196,0.014600321650505066,0.03172412887215614,-0.09045691788196564,-0.0018253527814522386,-0.03134760633111,-4.759915315789273e-33,0.0049956366419792175,0.004601932130753994,-0.01178725529462099,0.0020087361335754395,0.04567650333046913,-0.01684163697063923,0.06976083666086197,0.02947618067264557,-0.002285625785589218,-0.028415456414222717,-0.05644816905260086,0.07063417881727219,0.003727748990058899,-0.06726044416427612,-0.058740511536598206,-0.027008187025785446,-0.03056095913052559,-0.017372827976942062,-0.011759446933865547,-0.005932123400270939,-0.02399950847029686,-0.06540708988904953,0.05402583256363869,0.030294639989733696,-0.007353519555181265,-0.026038188487291336,0.028567221015691757,0.004046263638883829,0.0563247874379158,-0.0017344194930046797,0.02722054347395897,0.0065890648402273655,-0.07069190591573715,-0.05562690645456314,0.025110362097620964,0.0014887922443449497,0.014598936773836613,0.08900534361600876,-0.06406772881746292,-0.09049255400896072,-0.05369126424193382,-0.06449640542268753,-0.10619617998600006,0.03344838321208954,-0.00427204929292202,-0.060467496514320374,0.034724704921245575,0.0558311901986599,-0.010676204226911068,0.026326283812522888,-0.05719193443655968,-0.06522073596715927,0.0219273641705513,0.03486103564500809,-0.02043750509619713,0.023806339129805565,-0.03292516991496086,0.026953689754009247,-0.014109855517745018,0.05462646484375,0.09543129056692123,-0.047331176698207855,-0.0005343210068531334,0.008306767791509628,-0.05630340054631233,-0.10312362760305405,-0.04277607426047325,0.0004833597340621054,-0.15066538751125336,0.07657280564308167,0.007230430841445923,-0.0722227692604065,0.002967551816254854,-0.06730862706899643,0.02340717613697052,-0.0005625811172649264,0.013283908367156982,-0.0769774466753006,-0.0037481437902897596,-0.037457484751939774,-0.013865554705262184,0.03606952726840973,0.03769102692604065,-0.10162374377250671,0.046221282333135605,0.009473229758441448,0.1115444079041481,-0.03605815768241882,0.024010194465517998,0.013218645937740803,-0.04692934826016426,-0.08832850307226181,-0.012927175499498844,0.05551537498831749,-0.012644178234040737,-5.2808459827247134e-8,0.022253166884183884,0.04641410708427429,0.025477716699242592,0.028678664937615395,-0.0006469279178418219,-0.0006633551092818379,0.01901622675359249,-0.008396877907216549,0.03854319825768471,0.005488391499966383,-0.03543197736144066,-0.10329524427652359,-0.08378852903842926,0.07179667800664902,0.009636792354285717,0.08906171470880508,0.05408022552728653,0.047225818037986755,-0.007991619408130646,-0.06646689772605896,-0.1252637654542923,-0.05209653824567795,0.027653302997350693,-0.023274721577763557,-0.00948111992329359,0.1175893247127533,0.09870891273021698,0.0134614622220397,0.053852107375860214,0.01638735644519329,0.06236222758889198,-0.03221876174211502,-0.038406167179346085,0.01620904915034771,0.013905803672969341,-0.06288415193557739,-0.06368156522512436,-0.02236626110970974,-0.01135163102298975,-0.0320076048374176,-0.03155350312590599,-0.04240817949175835,-0.005161321256309748,-0.012927589938044548,-0.04922718554735184,0.03426818177103996,-0.008964878506958485,-0.00368771655485034,-0.010901718400418758,0.08131442964076996,0.05773526430130005,-0.05933082103729248,0.0063362568616867065,0.07311737537384033,0.12684758007526398,0.07421036064624786,0.07136540859937668,0.03732997924089432,0.1071300059556961,0.09743738174438477,-0.0036361548118293285,0.08633255958557129,0.01970597915351391,0.0064882561564445496
WmcdMiyqfZs,2019-11-22T16:43:06Z,Dockerfile Tutorial - Docker in Practice || Docker Tutorial 10,[Music] so now let's consider a following scenario you have developed an application feature you have tested it and now you're ready to deploy it right to deploy your application should be packaged into its own docker container so this means that we're gonna build in docker image from our JavaScript no J's backing application and prepare it to be deployed on some environment to review this diagram that we saw at the beginning of the tutorial so we have developed a JavaScript application we have used the MongoDB docker container to use it and now it's time to commit it to the game right so in this case we're gonna simulate these steps on the local environment but still I'm gonna show you how these steps actually work so after commit you have a continuous integration that runs so the question is what does actually Jenkins do with this application when it builds the application so the JavaScript application using the npm build etc it packages it then in a docker image and then pushes it into docker repository so we're gonna actually simulate what Jenkins does with their application and how it actually packages it into a docker image on the local environment so I'm gonna do all this on my laptop but it's basically the same thing that Jenkins will do and then on later step we're gonna push it we can actually push the built image into a docker repository in order to build a docker image from an application we basically have to copy the contents of that application into the docker file could be an artifact that we built in our case we just have three files are we gonna copy them directly in the image and we're gonna configure it and in order to do that we're gonna use a blueprint for building images which is called a docker file so let's actually see what is a docker file and how it actually looks like so as I mentioned docker file is a blueprint for creating docker images a syntax of a docker file is super simple so the first line of every dock file is from image so whatever image you are building you always want to base it on another image in our case we have a JavaScript application with no J's back-end so we are gonna need node you know inside of our container so that it can run our node application instead of basing it on a Linux Alpine or some other lower level image because then we would have to install node ourselves on it so we are taking a ready node image and in order to see that let's actually go to docker hub and search node here and here you see there is a ready node image that we can base our own image from so here we have a lot of different text so we can actually use one specific one or we can just go with the latest if we don't specify any take so what that actually means basing our own image on a node image is that we're gonna have node installed inside of our image so when we start a container and we actually get a terminal of the container we can see that node command is available because there is no install there this is what from node actually gives us so the next one is we can configure environmental variables inside our dock file now as you know we have already done this in the using the doctor and comments or the docker composed so this will be just an alternative to defining environments of variables in a docker compose for example I would say it's better to define the environmental variables externally in a docker compose file because if something changes you can actually override it you can change the docker compose file and override it instead of rebuilding the image but this is an option so this end command basically would translate to setting the environmental variables inside of the image environment the next one is run so all these capital case words that you see from in and run they're basically part of a syntax of a docker file so using run basically you can execute any kind of Linux commands so you see make directory is a Linux command that creates a home slash home slash app directory very important to note here this directory is going to live inside of the container so when I start a container from this image the slash home slash app directory will be created inside of the container and not on my laptop not on the host so all these commands that you have in docker file will apply to the container environment none of them will be affecting my hosts environment or my laptop environment so with run basically you can execute any Linux comments that you want so that's probably one of the most use ones and we also have a copy command now you will probably ask I can execute a copy come in a Linux copy command using run yes you could but the difference here is that as I said all these commands in run for example they apply to they get executed inside of the container the copy command that you see here it actually executes on the host and you see the first parameter is dot and second parameter is slash home slash app so source and the target so I can copy files that I have on my hosts inside of that container image because if I were to execute run CP source destination that command would execute inside of the docker container but I have the files that I want to copy on my host in the last one so from an CMD or command is always part of the aqua file what commend does is basically executes an entry point Linux command so this line with the command actually translates to node server js so remember here we actually do node services so we execute so we start a node server with the nodejs this is exactly what it does but inside of the container so once we copy our server JS and other files inside of a container we can then execute node server chase and we are able to do it because we are basing on the node image that already has node pre installed and we are gonna see all this in action so another question here what is the difference between run and CMD because I could also say run node server chase the difference again is that CMD is an entry point command so you can have multiple run comments with the different Linux commands but CMD is just one and that marks for docker file that this is the command that you want to execute as an entry point so that basically runs the server and that's it so now let's actually create the dockerfile and just like the Taku compose file docker file is part of the application code so I'm gonna create a new file here and I'm gonna paste here the contents so again we're basing off note image and actually instead of just having the latest node I'm gonna specify a node version so I'm going to take 13 - Alpine so all these that you see here are text so I can use any of them as a tag so I'm gonna say 13 - Alpine like this so this is gonna be a specific node image that I'm gonna use as my base image let's actually stop here for a moment and take a little bit of a deep dive on this line so since we saw that docker file is a blueprint for every for any docker image that should actually mean that every docker image that there is on docker hub should be built on its own docker file right so if we actually go to let's actually look at one of the latest versions which is 13 - alpine and then let's click inside and as you see this specific image has its own docker file and here as you see we have the same from that we just saw and this is what this node official image is based off which is a base image Alpine 3.10 right and then we have this environmental variable set and all these linux commands using run and some other environmental variable and you have this entry point which is a script so you can also execute the whole shell script instead of instead of separate commands and you have this final comment right so you don't have to understand any of this I just want to demonstrate that every image is based of another base image right so in order to actually visually comprehend how this layers stacking works with images let's consider this simplified visualization so our own image that we're building up with the version 1.0 is going to be based on a node image with a specific version that's why we're going to specify from node 13 alpine and the node 13 Alpine image as we saw in the dockerfile is based on alpine based image with the version 3.1 that's why it specifies from Alpine 3.10 so Alpine is lightweight based image then we install node on top of it and then we stole our own application on top of it and basically this is how all the images are built so now let's go back and complete our docker file so we have the from specified we have the environmental variables specified and in just a second we can actually see this commands in action so let's copy that and this is also very important docker file has to be called exactly like that you can't just give it any name it is always called docker file starting with a capital D and that's it it's a simple text file so just save it like this and here you even see the highlighting and this docker icon so now that we have a docker file ready let's see how to actually use it so how do we build an image out of it so in order to build an image using docker file we have to provide two parameters one is we want to give our image a name in the tag just like all the other images have so we are gonna do it using minus T so we're gonna call our image my app and we're gonna give it a tag of 1.0 the TEC could be anything you can even call it actually version 1 it wouldn't matter so we're gonna do 1.0 and ii required parameter actually is a location of a docker file because we want to tell docker here build an image using this docker file and in this case because we're in the same folder as the docker file we're just gonna say current directory when we execute this we're gonna see that image is built and this is an idea of the image that was built because I already have note 13 Alpine on my laptop dishes use the the one I have lying around locally for you if it's the first time you will actually see that it's pulling node image from the docker hub so now with the docker images I can actually see that my image is here it says created two days ago I don't know why but anyways so I have the image name which is this one here and I have the name of the image and the tag of the image so if we go back to this diagram that we saw in the review so basically we've gone all these steps or we have simulated some of the steps we've built the JavaScript application using a docker containers and once the application is ready let's say we made the commit and we're we just simulated what Jenkins server also does so what Jenkins does is actually it takes the dockerfile that we create so we have to commit the dockerfile into the repository with the code and Jenkins will then build a docker image based on the docker file and what is an important point here is that usually you don't develop a loan you are in the team so other people might want to have access to that up-to-date image of your application that you developed it could be a test or maybe who wants to pull that image and test it locally or you want that image to be deployed on a development server right in order to do that you have to actually share the image so it is pushed into a docker repository and from there either people can take it for example a tester maybe want to download the image from there and test it locally or a development server can actually pull it from there so let's actually just run a container I'm just gonna say docker run the image name obviously and a tank like this and in this case I'm not gonna specify any other options because we just want to see what's going on inside of the container so I'm just gonna run it okay so the problem is that it can't find the server JS file which is actually logical because we are not telling it to look in the correct directory so since we're copying all the resources in this home slash home slash app directory server JS is gonna be there as well and this is another topic whenever you adjust a docker file you have to rebuild an image because the old image cannot be overwritten so to say so what I'm gonna do now is actually I'm gonna delete the one that I built so I'm gonna I'm gonna actually take the image this is how you delete an image but but I can delete it because as it says the docker is used by a stopped container so if I do docker PS - a actually let's crap - my app like this I have to first delete the container so this is how you delete a container it's toker RM and once I've deleted the container I can delete an image so the image deletion is RM I like this so if I do images now I see my image isn't there okay so we've modified the docker file so let's rebuild it now so talk a build okay and let's see the image is here so let's start it again so it's my app 1.0 and let's run it and you see the problem is fixed at listening on port 3000 so our app is running so this one here my app 1.0 first of all we can see the logs here like this we see that the app is listening on port 3000 we know everything is cool to actually just get a little bit more inside let's enter the containers or let's get the terminal the command line terminal of the container and look around there so I'm gonna say docker exec interactive terminal I'm gonna specify the container ID like this and since being bash doesn't work we can actually try shell so this is something you will also encounter because some containers do not have bash installed so I have to connect using pin SH so one of them has to work always so let's see in which directory we are so we are in the root directory and we see our virtual file system there and as you see the cursor changed as well so that means we're inside of a container so now let's actually check some of this stuff so first of all we specified some environmental variables here in the docker file and this means that this environmental variables have to be set inside the docker environment so if we do in we actually see the MongoDB username this one here and MongoDB password are set there's some other environmental variables automatically set we don't care about them so another thing we can check is this directory because remember because with this line we actually created this slash home slash AB directory so let's see slash home slash app and as you can see the director was created and with the next line we copied everything in current folder so if we actually go and see reveal in finder so this is where the dockerfile resides so basically we copied everything that is inside of this directory so all of this into the container now we don't actually need to have docker file and docker compose and these other stuff in here because the only thing we need are the Java Script files or if we build a JavaScript application artifact just an artifact so let's go ahead and improve that so what I'm gonna do is I'm gonna create an app directory and I'm gonna copy just the files that I'm gonna need for starting an application inside of a container so I'm gonna take those and the images as well so all these are just external ones we don't need them there and images the index.html file package JSON server J's and node modules are inside of app so what we can do it now is instead of copying the whole directory where the docker file is I just want to copy all the contents of EPP folder so what I'm gonna do is I'm gonna say copy all the contents and again because we modified a docker file we need to recreate the image in order to leave the docker container terminal you can actually exit so now we are on the hosts again so if I do docker images again I have to first delete the container and an image but in order to delete the container I have to first stop it so now I can remove the container and now I can actually remove the image that the container was based on and let's check again so let's actually execute that build command again so now that we have the image built let's actually run it so I'm gonna say my F one point zero and of course I could have executed with a minus D in a detached mode it doesn't matter now and if I do it or PS I see my image container running and now let's actually enter the container again so my team and as we learned it was in SH and again we're gonna see the home app and here we just have the contents of app directory so no unnecessary docker file docker compose etc files which is actually how it's supposed to be or as I said because I just had a couple of files here I copied all of them but usually if you have this huge application you would want to compress them and package them into an artifact and then copy that artifact into a docker image container okay but as I said this was just for demonstration purposes because I just wanted to show you how you can actually start it as a container in how it should look inside and in this case we improved a couple of things but usually we would start this container from a docker compose as well together with all the other docker images that the application uses and it also doesn't have any ports open so this is just for demonstration purposes so in the next video we're actually gonna see how to create a private repository and how to push images into that private repository again we're gonna simulate these from a local environments so I'm gonna execute these comments from my laptop but this is exactly the same comments that Jenkins server will execute thanks for watching the video I hope it was helpful and if it was don't forget to like it this is a video series so I will create a new one every week so if you want to be notified whenever and video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in the comment section below and I will try to answer them so thank you and see you in the next video,-0.062052346765995026,0.0621749572455883,0.005543817766010761,-0.008761555887758732,0.06951165944337845,-0.05739451199769974,0.024989886209368706,0.04008589684963226,-0.05063542723655701,0.028943324461579323,-0.020274534821510315,-0.018323689699172974,0.04888490214943886,-0.013462863862514496,-0.02995486371219158,-0.11434321105480194,-0.05751838907599449,0.08036748319864273,0.03271039202809334,0.014818159863352776,-0.09466491639614105,0.007673362735658884,-0.014646110124886036,-0.09458423405885696,0.013915316201746464,0.0033790261950343847,-0.011643731035292149,-0.028303248807787895,-0.009798498824238777,0.012628666125237942,0.0015743538970127702,0.06880789250135422,0.05779402703046799,-0.00022100326896179467,0.07346214354038239,0.023850077763199806,0.10498356074094772,0.035372812300920486,-0.08508321642875671,0.0026370466221123934,-0.0034413915127515793,-0.0587085597217083,-0.0023177547845989466,-0.026954621076583862,-0.04647618159651756,-0.0725431889295578,-0.015635527670383453,-0.14089985191822052,0.025391483679413795,0.09550077468156815,-0.0972745269536972,-0.10565627366304398,0.007407917641103268,0.00012756367505062371,0.04467051103711128,0.04502420872449875,-0.025502650067210197,0.08123086392879486,0.024746283888816833,-0.0276016928255558,-0.029138170182704926,0.0031215997878462076,-0.08490700274705887,0.025023819878697395,0.07704757153987885,-0.005676071625202894,-0.04043082147836685,0.04386887326836586,0.07654250413179398,-0.014236523769795895,-0.06219062954187393,-0.013807879760861397,-0.024631790816783905,-0.055954575538635254,-0.0518990159034729,0.026920529082417488,-0.0029554469510912895,0.07205362617969513,-0.08209072798490524,0.0058677620254457,-0.04355212673544884,-0.03420162945985794,0.048829372972249985,-0.05635229870676994,-0.06757115572690964,0.004914150573313236,0.02991536445915699,-0.061783574521541595,0.08654461055994034,-0.06603133678436279,0.036648157984018326,-0.024689931422472,-0.028240373358130455,0.0084776496514678,0.038596879690885544,0.023975685238838196,-0.06704133003950119,-0.017327645793557167,-0.05440321937203407,-0.006157652474939823,-0.004857073072344065,-0.022999832406640053,0.07926493883132935,-0.04846307635307312,0.06440279632806778,-0.028716007247567177,-0.009794529527425766,-0.025516334921121597,0.023460963740944862,-0.04394054412841797,-0.025102997198700905,-0.05951705202460289,-0.02667239122092724,0.006030777003616095,0.04309624433517456,-0.047088976949453354,0.02467532269656658,-0.049145326018333435,0.05501774698495865,-0.003078875131905079,0.036967117339372635,0.029086321592330933,0.14294946193695068,-0.04473620280623436,-0.03608904033899307,-0.06082674115896225,-0.10079069435596466,-1.1421592595783868e-33,0.03153479844331741,-0.0943906381726265,0.05934326723217964,0.0659848302602768,0.1523449420928955,-0.07485675811767578,0.017185550183057785,-0.01562761701643467,-0.03845275565981865,0.0265064500272274,0.005427296739071608,-0.02111603319644928,-0.05016201734542847,0.10427901893854141,0.016919877380132675,-0.06090633571147919,-0.16001324355602264,0.007206926122307777,-0.05737593397498131,-0.04008662700653076,0.026727251708507538,-0.008076261729001999,0.0007590334862470627,-0.055655062198638916,0.04228445515036583,-0.0008480899850837886,0.05630537122488022,-0.046131737530231476,0.07142162322998047,0.011775407940149307,-0.006055252626538277,-0.04750717058777809,0.03147784620523453,0.002092912793159485,0.019449947401881218,0.02918015979230404,0.06131698563694954,0.06372060626745224,-0.030311161652207375,-0.029006481170654297,-0.034963324666023254,-0.08509300649166107,0.06159995123744011,0.005405097268521786,0.1018507182598114,-0.05578690767288208,0.058946456760168076,0.011423527263104916,0.043289557099342346,-0.008701575919985771,-0.002454934176057577,-0.08184973895549774,-0.05192570388317108,0.026876581832766533,-0.013541536405682564,-0.00038107013097032905,-0.02835850976407528,-0.0035969549790024757,-0.03971876949071884,-0.0351468063890934,-0.07414329797029495,0.027049148455262184,0.01581580378115177,-0.029716888442635536,-0.02734946832060814,0.03613140434026718,-0.05101078376173973,0.049192942678928375,0.04603176563978195,0.09846680611371994,-0.03619915992021561,0.05877125263214111,0.009821942076086998,0.0004037618637084961,0.039183929562568665,-0.015314600430428982,0.02644261159002781,0.031136220321059227,0.012992843985557556,-0.0245218388736248,-0.021987276151776314,0.04130730777978897,0.005693148355931044,0.07558528333902359,-0.06654094159603119,-0.10605281591415405,0.060834795236587524,0.07107337564229965,0.02558673731982708,-0.01790722832083702,0.021735016256570816,0.020206375047564507,-0.10105254501104355,-0.04553506523370743,-0.05870053172111511,-1.8793566745366645e-33,0.04882274195551872,0.011923388577997684,-0.05175315588712692,0.08153992146253586,0.06146308779716492,0.048629842698574066,0.10229632258415222,0.02769475243985653,0.09256467968225479,-0.07726290822029114,-0.11452039331197739,0.0687081515789032,0.037336960434913635,0.04632674157619476,-0.0736175924539566,0.025139231234788895,-0.06275226175785065,-0.022344019263982773,0.022288424894213676,-0.07331467419862747,0.016051052138209343,-0.00562384445220232,0.09542825073003769,0.037216491997241974,-0.03539416193962097,-0.07283341139554977,0.08736497163772583,-0.01234245952218771,-0.06642517447471619,0.02451847493648529,0.04613441973924637,0.042013928294181824,0.007037100847810507,0.019960913807153702,0.026109911501407623,0.0709133967757225,0.008905874565243721,0.0491255521774292,-0.0455070436000824,-0.05815868079662323,0.01485808752477169,-0.049641452729701996,-0.012960128486156464,-0.06951633095741272,0.009154151193797588,-0.03043127804994583,0.05763945356011391,-0.03875359520316124,-0.11051800101995468,0.017018379643559456,-0.06474723666906357,-0.0690375491976738,0.01597297377884388,-0.04427698254585266,-0.013403097167611122,-0.023514604195952415,0.07753030955791473,0.045299090445041656,-0.029975811019539833,0.07172983884811401,0.03906673565506935,-0.015038860961794853,0.03584625944495201,0.009407524950802326,-0.040186021476984024,-0.015448518097400665,-0.06934284418821335,0.018157344311475754,-0.07599925994873047,0.03605647385120392,0.015826942399144173,-0.011843708343803883,-0.01096027810126543,0.019947566092014313,0.01370793767273426,-0.020707370713353157,0.012635467574000359,0.015942104160785675,0.0005462882691062987,-0.04565614089369774,-0.018185818567872047,0.013423916883766651,-0.027746006846427917,-0.09634403139352798,-0.031735632568597794,0.032550543546676636,0.10540667176246643,0.05557459965348244,0.04900851473212242,0.0025479868054389954,0.04287005588412285,-0.013601801358163357,0.0012399472761899233,0.04642713814973831,-0.03325239196419716,-2.0755285490281494e-8,0.03446539491415024,0.05146012827754021,-0.02374318614602089,0.00528881698846817,-0.05213836580514908,0.05645226687192917,0.06981347501277924,0.0296377744525671,-0.033902134746313095,-0.004500128328800201,-0.008000962436199188,-0.058310214430093765,-0.08879020065069199,0.01797609217464924,0.005741653498262167,0.10119900107383728,0.011402172036468983,0.041033271700143814,-0.012682663276791573,-0.03502155467867851,-0.0035134979989379644,0.0823771059513092,0.014996053650975227,-0.059861235320568085,0.02094864286482334,0.08845756202936172,0.04903544485569,0.08260922133922577,-0.04961159825325012,-0.06096368655562401,0.05463726818561554,0.01614196226000786,-0.08910105377435684,0.04335300624370575,-0.004825342446565628,0.027615254744887352,-0.03711302578449249,-0.015161360614001751,0.04095430299639702,-0.021926676854491234,-0.06935890018939972,-0.04813949018716812,-0.009099659509956837,-0.07502511888742447,-0.034880928695201874,0.02399599552154541,-0.004501563962548971,-0.027651995420455933,-0.08020026981830597,-0.005534036085009575,0.03312757983803749,0.028104662895202637,0.030612334609031677,-0.018750905990600586,0.12394700944423676,0.09993204474449158,-0.00006508499791380018,0.005855730269104242,0.03359326347708702,-0.018963994458317757,-0.023309022188186646,0.09784562140703201,-0.012941796332597733,0.08638960868120193,-0.009774234145879745,0.01695820689201355,0.043770015239715576,0.0005112048820592463,0.07307949662208557,-0.0643593817949295,-0.04143140837550163,-0.007246918510645628,0.010257568210363388,-0.007708734832704067,-0.02367042377591133,0.010184197686612606,0.025344103574752808,-0.045962441712617874,-0.020102085545659065,-0.005059101618826389,0.08509264141321182,-0.012380494736135006,-0.026771774515509605,-0.011050069704651833,-0.05857296288013458,-0.06472242623567581,0.03718986734747887,0.005817493423819542,0.008801896125078201,0.0515301413834095,0.03622397780418396,0.036459244787693024,-0.0019491558196023107,-0.03232372924685478,0.021628832444548607,0.04252864420413971,-0.024096131324768066,-0.028096964582800865,-0.05667731538414955,0.15558376908302307,0.030826782807707787,-0.07470180094242096,-0.03477610647678375,-0.05886409804224968,0.005279059987515211,-0.05304720625281334,-0.0010355138219892979,-0.022421522065997124,0.04893329367041588,-0.07281535863876343,-0.11458643525838852,-0.04878564178943634,-0.04527817666530609,0.03012428805232048,-0.01818881370127201,-0.08802377432584763,-0.05848291516304016,-0.01971173845231533,-0.034822169691324234,0.10714118182659149,0.05545400083065033,0.037194348871707916,0.007418702822178602,0.06941699981689453,0.05838486924767494,0.02428254671394825,-0.00534150330349803,0.08808542788028717,0.07388275116682053,-0.06460293382406235,0.004016670864075422,0.009646786376833916,0.04996632784605026,-0.09912626445293427,-0.03393666818737984,0.046136267483234406,-0.03988368436694145,-0.15258245170116425,-0.033351294696331024,-0.049033138900995255,-0.025835728272795677,0.029335347935557365,0.0017008420545607805,0.008636238053441048,0.020442599430680275,-0.019293177872896194,-0.01958853006362915,-0.02387658879160881,-0.09759576618671417,0.08053702116012573,0.05833189934492111,0.01339352410286665,0.029689373448491096,0.02569635398685932,0.001581281190738082,-0.09387139976024628,-0.07561154663562775,0.012328878976404667,0.03545505926012993,0.0489640049636364,-0.023606624454259872,0.02604384534060955,0.06348637491464615,-0.02831435389816761,0.051996197551488876,-0.04229562357068062,0.13349393010139465,-0.08182897418737411,0.06648455560207367,-0.01992323063313961,-0.03963392600417137,-0.0007784968474879861,0.005894545465707779,0.014871291816234589,-0.06664342433214188,-0.02442798763513565,0.006779014132916927,0.05556611344218254,-0.04737694934010506,0.09935541450977325,0.002347754780203104,-0.061815131455659866,0.025734424591064453,0.08103655278682709,0.10461021214723587,0.02521870844066143,0.11171679198741913,-0.052786070853471756,-0.008147524669766426,0.02896556258201599,-0.036408666521310806,-9.37528651974266e-34,0.07123120874166489,-0.13546819984912872,0.013413715176284313,0.05288808420300484,0.10701360553503036,-0.03688659518957138,0.0003242689126636833,0.006892908364534378,-0.08293851464986801,0.011828073300421238,-0.006415399257093668,0.08518027514219284,-0.0029552499763667583,0.07227339595556259,-0.022197920829057693,-0.07653797417879105,-0.04672636464238167,0.0738297626376152,0.0062691038474440575,0.009155098348855972,0.04075569286942482,-0.006444932427257299,-0.055743925273418427,0.06412778049707413,0.09638209640979767,0.021349411457777023,-0.018431587144732475,0.05747433006763458,-0.09592066705226898,0.01790563389658928,-0.0323173888027668,0.01220752764493227,-0.06672859191894531,0.029462043195962906,0.02123056910932064,0.015627754852175713,-0.022137969732284546,-0.06905021518468857,-0.04492669552564621,-0.017804892733693123,0.02820577099919319,-0.01345460768789053,-0.06029754877090454,-0.009094602428376675,0.007235323078930378,-0.08008962869644165,0.06331512331962585,-0.06855635344982147,0.10299482941627502,0.027073383331298828,0.02980753406882286,-0.042575955390930176,0.033836640417575836,0.009023594669997692,0.03680301457643509,-0.01947495900094509,0.04558364301919937,-0.12994839251041412,-0.05068675056099892,-0.03478240594267845,-0.06353585422039032,0.0011822822270914912,-0.06447868049144745,0.02928573451936245,0.009795479476451874,0.008132031187415123,-0.006729769054800272,0.018841037526726723,0.022493820637464523,0.021923687309026718,-0.0022072135470807552,0.06956797093153,-0.02453581616282463,-0.015586058609187603,0.019441284239292145,-0.04064125195145607,-0.047363270074129105,0.04944676160812378,-0.027502508834004402,0.03474195674061775,0.05641954019665718,-0.01395205594599247,-0.17257295548915863,0.015027361921966076,0.021578103303909302,0.04820283129811287,0.014343074522912502,-0.05376194044947624,0.030898505821824074,-0.00025463433121331036,0.035391516983509064,0.05910032242536545,-0.04238990694284439,-0.057270653545856476,0.06116423010826111,-4.038688920132335e-33,0.021098243072628975,0.007716295309364796,0.007089662365615368,0.07009772211313248,-0.002949681831523776,0.023285044357180595,-0.002046882873401046,-0.0298385638743639,0.04849167913198471,-0.06837762892246246,-0.14791139960289001,0.0247573833912611,-0.0010769432410597801,0.0008475090144202113,-0.1276221126317978,-0.04596804082393646,-0.0008949209004640579,-0.0449250265955925,0.03673018887639046,0.02283371053636074,0.030537035316228867,0.0020173671655356884,0.04815419018268585,0.025003328919410706,-0.055656034499406815,-0.07975427806377411,-0.07313491404056549,-0.029366618022322655,-0.021893281489610672,0.009887540712952614,0.0378895178437233,-0.03299138695001602,-0.04646604508161545,-0.028164736926555634,0.006964028347283602,-0.019143015146255493,0.00700461957603693,0.07558359205722809,0.05390435829758644,-0.09559691697359085,0.027081651613116264,-0.08947481215000153,-0.0741235762834549,-0.0053123608231544495,0.009072413668036461,-0.00429120846092701,-0.04434636980295181,0.0034574177116155624,-0.02711724489927292,-0.054190654307603836,-0.04792959615588188,-0.006786592770367861,0.041696224361658096,-0.009036898612976074,-0.015015378594398499,0.014901393093168736,0.007315879222005606,-0.006678760517388582,-0.043511390686035156,0.07667325437068939,0.07821162790060043,-0.04301818460226059,0.05572456866502762,-0.06072695553302765,-0.13775725662708282,0.0023849376011639833,-0.036694951355457306,0.04924274981021881,-0.04419463127851486,0.03172411769628525,-0.039261799305677414,-0.008309060707688332,-0.015341741964221,0.030005862936377525,0.00955223198980093,-0.09511083364486694,0.028548192232847214,-0.1304246187210083,0.0074724615551531315,-0.002984260441735387,-0.014657394960522652,0.06822080910205841,0.0005773248849436641,-0.06031126528978348,-0.019626233726739883,-0.08515709638595581,0.012164239771664143,-0.046827204525470734,-0.012625222094357014,-0.030568571761250496,-0.014080286026000977,0.09800849109888077,-0.08217798918485641,-0.005182805936783552,-0.03587549924850464,-5.2527706628779924e-8,-0.02939765900373459,0.046822767704725266,-0.051453009247779846,-0.03770744428038597,-0.006148278247565031,0.041142936795949936,0.05600793659687042,-0.01408746000379324,0.0928175300359726,0.018148787319660187,-0.02406679466366768,0.05478893592953682,-0.026518579572439194,0.04949980974197388,-0.016274334862828255,0.04046449810266495,0.05734582245349884,-0.011945891194045544,-0.00831878837198019,0.006908625829964876,-0.030217910185456276,0.022772839292883873,0.05065649747848511,0.05126837641000748,0.01571013778448105,0.03937597945332527,0.1011737808585167,0.09127242863178253,0.0012165977386757731,0.04696035757660866,-0.006135010626167059,0.012215696275234222,-0.005379046779125929,0.11500395089387894,-0.018371164798736572,-0.003812881652265787,0.0164960790425539,-0.0010357213905081153,0.05677683278918266,-0.0060429200530052185,-0.036161862313747406,-0.022723710164427757,0.0007708521443419158,-0.0372498482465744,-0.06097419187426567,-0.014248796738684177,-0.03901940956711769,-0.034074313938617706,-0.059437237679958344,0.008579582907259464,0.031268589198589325,-0.024067651480436325,-0.04595794528722763,0.056436244398355484,0.13612382113933563,0.08864042907953262,0.05215180665254593,-0.017562448978424072,0.07855170220136642,0.004569421522319317,-0.04572945088148117,0.03057257831096649,0.055912744253873825,-0.003992386627942324
MVIcrmeV_6c,2019-11-17T16:53:12Z,Docker Compose Tutorial - Docker in Practice || Docker Tutorial 9,[Music] so in the last video we created and started two docker containers mongodb and mong express and these are the commands that we used to make it happen right the first we created a network where these two containers can talk to each other using just the container name and no host port etc is necessary for that and then we actually ran two docker run commands with all the options environmental variables etc set now this way of starting containers all the time is a little bit tedious and you don't want to execute these run commands all the time on the command line terminal especially if you have a bunch of docker containers to run uh you probably want to automate it or just make it a little bit easier and there's a tool that's that makes running multiple docker containers with all this configuration much easier than with docker run commands and that is docker compose if you already know the compose and you are wondering why is it useful and what it actually does then bear with me in the next slide i'm going to explain that so this is a docker run command of the mongodb that we executed and previously so basically with docker compose file what we can do is we can take the whole command with its configuration and map it into a file so that we have a structured commands so if you have let's say 10 docker containers that you want to run for your application and they all need to talk to each other and interact with each other you can basically write all the run commands for each container in a structured way in the docker compose and we'll see how that structure actually looks like so on the right side in the docker compose example the first two takes are always there right version three that's the latest version of the compose docker compose and then we have the services this is where the container list goes so the first one is mongodb and that maps actually to the container name right this is going to be a part of container name when docker creates a container out of this configuration blueprint the next one is actually the image right so we need to know which image that container is going to be built from and of course you can specify a version tag here next to the name the next one is port so we can also specify which ports is going to open first one is on the host and the second one after the colon is on the container so the port mapping is there and of course the environmental variables can be also mapped in the docker compose and this is how actually the structure of docker compose looks like for one specific commands let's actually see the second container command for express that we executed and how to map that so now again we have a docker run command for express and let's see how we can map it into a docker compose so as i said services will list the containers that we want to create and again names  express will map to the container name the next one will be the image again you can add a tag here if you want to be um have a specific one then you have the ports 80 to 80 to 8080 and then you have all the environmental variables again under the attribute environment and this is how the docker compose will look like so basically docker compose is just a structured way to contain very normal common docker commands and of course it's it's going to be easier for you to edit the the file if you want to change some variables or if you want to change the ports if you want to add some new options um to the run command so to say and maybe you already noticed the network configuration is not there in the docker compose so this network that we created we don't have to do it in a docker compose we go to the next slide because we have the same concept here we have containers that will talk to each other using just the container name so what docker compose will do is actually take care of creating a common network for these containers so we don't have to create the network and specify in which network these containers will run in and we're going to see that in action right away so let's actually create a docker compose file so i'm gonna paste all my contents here and this is exactly what we saw on the slides and i'm gonna save it as a yaml and we see the highlighting as well be very aware of the indentation they have to be correct so this is the list of all the containers on the same level and then each container has its configuration inside that so now compared to docker run commands it will be very easy for me to go here and change these environment variables or add some new configuration options etc so here again for demonstration we actually save the doctor compose in the code so it's part of the application code so now that we have a docker compose file the question is how do i use it or how do i start the containers using that so let's go to the command line and start docker containers using this docker compose file so the way to use it is using docker compose command now if you've installed docker on your laptop it usually gets installed with the docker compose packaged inside so you should have both docker and docker compose commands installed as a package so docker compose command takes an argument which is the file so i'm going to specify which file i want to execute and in my case it's called yemo and at the end i want to say what i want to do with this file in this case the command is up which will start all the containers which are in the yemo so let's actually check before that there there are no containers running so i don't have anything running here and i'm gonna start those two containers okay so there are a couple of interesting things here in this output so let's scroll all the way up so we've talked about docker network and how we created our own network at the beginning to run the containers inside and i said the docker compose takes care of it and here we see the output where it actually created a network called my app default this is the name of the network and it's going to run those two containers these are actually the names of the containers that docker compose created this is what we specified and it just added prefix and suffix to it and it created those two containers in that network so if i actually go here and do docker network ls i see the my app default is here so that's one important thing another one is the logs of both containers actually mixed because we're starting both at the same time as you see the express has to wait for mongodb to start because it needs to establish a connection so we here see the locks so mongodb is starting we still get connection reviews because it's not started completely and somewhere here when mongodb is started and listening for connections express is able to connect to it so this is something that you can also do with docker compose when you have two containers that where one depends on another one starting you can actually configure this waiting logic in the docker compose okay so now let's see actually that the docker containers are running so we have both of them here you see the container names that docker compose gave them and one thing here to note is that the  express actually started on port 8081 inside the container so we can see that here so we are opening a port 8080 on my laptop that actually forwards the request to container at port 8081 just so that you don't get confused because it was 8080 on the slides so now that we have restarted the containers let's actually check the first one which is  express so it's running on 8080. in the previous example we created a database and the collection which is gone because we restarted the container this is actually another very important concept of containers to understand when you restart a container everything that you configured in that container's application is gone so data is lost so to say there is no data persistence in the containers itself of course that is very um inconvenient you want to have some persistence especially when you're working with the database and there is a concept we're going to learn later in this tutorial series called volumes that makes it possible to have persistency between the container restarts okay so let's actually create the database again because we need it and inside the database we had actually users collection let's create that one as well and that is empty now let's actually start our application and there you go so now if i were to modify this one here and update i should see the updated entry here so the connectivity with mongodb works so now what do i do if i want to stop those containers of course i could go there and say docker stop and i can provide all the ids as we did previously or with docker compose it's actually easier i can do docker compose again specify the file and instead of up i'm going to say down and that will go through all the containers and shut them all and in addition to removing the containers or stopping them removing the containers it also removes the network so the next time we restart it it's going to recreate so let's actually check that token network ls that default my app default network is gone and when i do up see it gets recreated that should give you a good idea of what docker compose is and how to use it in the next video we're gonna build our own docker image from our node.js javascript application thanks for watching the video i hope it was helpful and if it was don't forget to like it this is a video series so i will create a new one every week so if you want to be notified whenever a new video comes out then subscribe to my channel um if you have any questions if something wasn't clear in the video please post them in the comment section below and i will try to answer them so thank you and see you in the next video,-0.04995524883270264,0.013361618854105473,0.04184678569436073,0.009291932918131351,0.016022101044654846,-0.059358783066272736,-0.029228001832962036,0.011912781745195389,-0.034954775124788284,0.040255844593048096,-0.02294114977121353,-0.05270174890756607,0.037855882197618484,-0.019281405955553055,0.02336677722632885,-0.09237545728683472,0.029171867296099663,0.017497166991233826,0.06358831375837326,0.0039100744761526585,-0.13559821248054504,0.045177899301052094,-0.05166522413492203,-0.026451677083969116,0.05910969898104668,0.018883060663938522,0.001234953524544835,-0.02147691138088703,0.07634436339139938,-0.000771443999838084,-0.003859051037579775,0.07989642024040222,0.06567828357219696,0.029355693608522415,0.01479428168386221,0.08226092159748077,0.07724957913160324,0.038435887545347214,-0.08522462844848633,-0.04798994958400726,-0.023188980296254158,-0.055104807019233704,-0.016174761578440666,-0.042539797723293304,-0.042126208543777466,-0.10834832489490509,-0.021140148863196373,-0.15708807110786438,0.009340459480881691,0.09642140567302704,-0.15306241810321808,-0.11992662400007248,-0.04265560209751129,-0.0027388453017920256,0.025113001465797424,0.021155349910259247,-0.011213170364499092,0.06276286393404007,0.0027941882144659758,-0.019919848069548607,-0.056046247482299805,-0.0027007819153368473,-0.05457306653261185,0.023627709597349167,0.06959014385938644,-0.045298974961042404,-0.014932568185031414,0.0397573858499527,0.013829545117914677,-0.00039876392111182213,-0.015862509608268738,-0.002541055902838707,-0.05306367576122284,-0.07742274552583694,-0.05986490100622177,0.024838510900735855,0.01040901243686676,-0.0475119911134243,-0.13010519742965698,0.01680685020983219,-0.004723907448351383,0.05442845821380615,0.0033990079537034035,-0.025781581178307533,-0.04793786257505417,0.03124880976974964,-0.00673895888030529,-0.018494775518774986,0.03773562237620354,-0.050137754529714584,0.03632134199142456,-0.03080393560230732,0.006448629777878523,-0.004009258467704058,0.04505643621087074,0.0007346528000198305,-0.07866604626178741,-0.04717175289988518,-0.019863009452819824,0.022278936579823494,-0.0109807588160038,0.010342556983232498,0.04005744680762291,-0.07191994041204453,0.04421103745698929,-0.01715640164911747,-0.02311319299042225,-0.0035880189388990402,0.029716171324253082,-0.03252672776579857,0.007116569671779871,-0.011739766225218773,-0.04699694365262985,0.003512874711304903,-0.009627943858504295,-0.02470737136900425,0.08113245666027069,-0.08001410961151123,0.028947843238711357,0.04980725422501564,0.031300563365221024,0.01869533397257328,0.07578325271606445,-0.05206182971596718,-0.016947824507951736,-0.046228211373090744,-0.05295541509985924,-6.740668939166418e-34,0.0934605598449707,-0.06801918148994446,0.08508213609457016,0.08202499896287918,0.19231589138507843,-0.03187832981348038,0.027163367718458176,-0.0009551217081025243,-0.0696261078119278,0.002716818591579795,0.032523974776268005,-0.005342963617295027,-0.03800247609615326,0.1237686425447464,0.01734490878880024,-0.08323382586240768,-0.061480700969696045,0.03556855395436287,-0.01970893144607544,-0.05832214653491974,0.010854197666049004,-0.026364680379629135,0.002355830045416951,-0.04212116822600365,0.04366327449679375,0.052823394536972046,0.04386027529835701,0.016410179436206818,0.04108324646949768,0.003285286482423544,-0.041245196014642715,-0.038766879588365555,-0.05130460485816002,0.04188167676329613,0.0017225997289642692,0.03389078006148338,-0.015109687112271786,0.0585307776927948,-0.04723646864295006,-0.028374679386615753,-0.022836610674858093,-0.0924774706363678,0.002566292881965637,-0.002957950346171856,0.07556895166635513,-0.06410418450832367,0.01842341013252735,0.06266171485185623,0.0965256541967392,0.0013587407302111387,0.014617744833230972,-0.03914231061935425,-0.058340251445770264,0.027609359472990036,-0.010891390033066273,0.051046740263700485,-0.0445893332362175,0.016905056312680244,-0.002757298992946744,-0.02966412901878357,-0.11520528048276901,0.01590493693947792,-0.041855279356241226,-0.002266843570396304,-0.012767208740115166,0.07689345628023148,-0.05204155668616295,0.02613394893705845,0.07809389382600784,0.06599435210227966,-0.008465706370770931,0.052479784935712814,-0.035615041851997375,0.027073848992586136,-0.004909697920084,-0.024400794878602028,-0.03178060054779053,-0.022328022867441177,0.08422159403562546,0.019805872812867165,-0.020002208650112152,0.05359138548374176,-0.05019504576921463,0.11709168553352356,-0.06458089500665665,-0.06253055483102798,0.07000577449798584,0.12217672914266586,0.00977708026766777,0.030361197888851166,0.00006948653026483953,0.0006066822679713368,-0.05228646844625473,-0.042770933359861374,-0.05948377400636673,-2.374614485057172e-33,-0.00043298566015437245,-0.010854958556592464,-0.11410534381866455,0.06377603858709335,0.034674271941185,0.002650479320436716,0.09519575536251068,0.035164594650268555,0.005311261862516403,-0.09309463202953339,-0.05953128635883331,0.06341999024152756,0.01809029094874859,0.02594403550028801,-0.16789744794368744,0.04650499299168587,-0.05970264598727226,0.020609175786376,0.03215082362294197,-0.0613694004714489,0.0010894745355471969,0.0038739365991204977,0.10454757511615753,-0.0033780804369598627,-0.04275073856115341,-0.06557076424360275,0.1095983013510704,0.022621285170316696,-0.05695793032646179,0.03663625940680504,0.07215669006109238,0.036145247519016266,0.040943264961242676,0.013169393874704838,0.02000284381210804,0.08866763114929199,-0.04398774728178978,0.09224959462881088,-0.022059351205825806,-0.03545334190130234,0.033594198524951935,-0.04450525715947151,-0.0214847382158041,-0.012480477802455425,0.007703112438321114,-0.045398421585559845,0.018529094755649567,-0.03166711702942848,-0.054880980402231216,0.02926798164844513,-0.06443287432193756,-0.1215965524315834,-0.0027742998208850622,-0.06471767276525497,-0.008523336611688137,-0.007556046824902296,0.06916563212871552,0.018123243004083633,0.0009102782350964844,0.035015106201171875,0.05893685668706894,-0.01512381061911583,0.03454528748989105,0.027765870094299316,0.022949930280447006,-0.03315844014286995,-0.08366177976131439,0.026906602084636688,-0.05495462194085121,0.0013630830217152834,0.050541024655103683,-0.0068819657899439335,0.05664368346333504,-0.012911089695990086,0.04457136243581772,-0.06918340176343918,0.02901352383196354,0.06364314258098602,0.02029360644519329,-0.054063521325588226,-0.005930987652391195,-0.010669268667697906,-0.016844291239976883,-0.07705747336149216,-0.0613991841673851,-0.008450880646705627,0.12485117465257645,0.05149254947900772,0.021637598052620888,0.03329407796263695,-0.0027663307264447212,0.05598077178001404,0.01837085746228695,0.05113833770155907,-0.01706867292523384,-2.07302726096259e-8,0.0403587743639946,-0.0069519407115876675,-0.04001185670495033,0.01951778493821621,-0.044150568544864655,0.014884824864566326,0.07372091710567474,-0.004215338733047247,-0.03536231443285942,0.044480517506599426,-0.03242776170372963,-0.045297201722860336,-0.07087262719869614,-0.020058665424585342,0.05710109695792198,0.06910789012908936,0.027107704430818558,0.016694670543074608,-0.043109968304634094,-0.08817581832408905,0.008886202238500118,0.04690377414226532,0.041140347719192505,-0.05827583372592926,0.005695613566786051,0.07593061774969101,0.001860479125753045,0.04958748444914818,-0.02528269961476326,-0.04279091954231262,0.023667659610509872,0.045412056148052216,-0.0839865580201149,0.0011274825083091855,-0.04392154887318611,-0.030038192868232727,-0.024699311703443527,-0.03165024518966675,0.02633146196603775,-0.014788773842155933,-0.06770287454128265,-0.06391482055187225,-0.02768830768764019,-0.09354209154844284,-0.01882791332900524,0.03611234948039055,0.017503056675195694,0.01061897911131382,-0.034947510808706284,0.044231560081243515,0.01874072290956974,-0.00124882732052356,0.01916416920721531,-0.002392252441495657,0.10986223071813583,0.06174906715750694,0.021633107215166092,0.007018841803073883,0.06356972455978394,-0.028397105634212494,-0.023017020896077156,0.11295753717422485,0.007940147072076797,0.028987666592001915,0.029270226135849953,-0.0011273447889834642,0.005018496885895729,0.04077447950839996,-0.0324719175696373,-0.04351702705025673,-0.0510716438293457,0.047915324568748474,0.0008320374181494117,0.02800799533724785,-0.07464662194252014,-0.06655172258615494,0.027479561045765877,-0.013666633516550064,0.014538461342453957,-0.011075001209974289,0.0671045333147049,-0.03543391078710556,0.003068811958655715,0.03349126875400543,-0.07617325335741043,0.009085103869438171,-0.01061007846146822,-0.028523610904812813,-0.07101672887802124,0.0327933095395565,-0.009347847662866116,-0.07217971980571747,-0.037753500044345856,-0.023859992623329163,0.042209334671497345,0.09299121797084808,0.07053784281015396,0.01564083993434906,-0.06695570051670074,0.13450190424919128,0.04757360368967056,0.0073247370310127735,-0.07881181687116623,-0.11668667942285538,0.037794455885887146,-0.06323427706956863,-0.034946009516716,-0.042750608175992966,-0.03802329674363136,-0.09141676872968674,-0.09863685816526413,-0.05056094750761986,0.030921822413802147,0.01565457321703434,-0.009240574203431606,-0.11135350167751312,-0.0369761623442173,-0.024240795522928238,0.06812303513288498,0.12280657142400742,-0.01434665359556675,0.04007074981927872,0.039708081632852554,0.03656306490302086,-0.006260561756789684,0.009728305973112583,-0.014405233785510063,0.01565062254667282,0.08111167699098587,-0.052183255553245544,0.0032486808486282825,0.05277576297521591,0.015162372030317783,0.018170824274420738,0.00731865968555212,-0.00989746954292059,-0.0603410005569458,-0.07653022557497025,-0.08332312852144241,0.045827724039554596,0.0137793505564332,-0.05857503041625023,-0.12531106173992157,0.004605072550475597,-0.008139288052916527,0.02768888510763645,-0.007746465969830751,-0.04806704819202423,-0.07877259701490402,0.011575914919376373,-0.0051948861218988895,-0.05417564883828163,0.04237564280629158,-0.03915850818157196,0.0033895596861839294,-0.039275623857975006,0.007160524372011423,-0.022662458941340446,0.07453347742557526,0.06975458562374115,-0.07535921037197113,0.013797699473798275,0.1015564352273941,-0.007693771738559008,0.04879727587103844,0.015343239530920982,0.05977388471364975,-0.05931435525417328,0.08527714759111404,-0.063931405544281,0.0006985657964833081,-0.040055397897958755,-0.016003521159291267,-0.02838950976729393,-0.005210952367633581,0.0009166496456600726,0.0011467438889667392,0.025775834918022156,-0.05707139894366264,0.07274243980646133,0.05208698287606239,-0.051135651767253876,0.06843996047973633,0.09050452709197998,0.011970060877501965,-0.02434873953461647,0.06390874087810516,-0.02867276221513748,0.0210883729159832,-0.0061188312247395515,0.013997110538184643,3.9324800667996644e-33,0.08444542437791824,-0.14665274322032928,0.03692038729786873,0.05310496687889099,0.1913846731185913,0.021028870716691017,0.020876307040452957,-0.033994484692811966,-0.03675173223018646,0.009436643682420254,0.000042026484152302146,0.08340801298618317,0.033959560096263885,0.076048344373703,-0.018374547362327576,-0.07141297310590744,0.016357863321900368,0.04396361857652664,0.06414248049259186,-0.07191973179578781,0.02906162664294243,0.013619099743664265,-0.049910254776477814,-0.022067906334996223,0.09666915982961655,-0.04502756893634796,0.00996868871152401,0.0043917326256632805,0.02726646140217781,-0.015767157077789307,0.008314310573041439,-0.02264508418738842,-0.054233405739068985,0.10419642180204391,-0.004697068128734827,-0.013192171230912209,-0.028713280335068703,0.03488291800022125,-0.07816526293754578,-0.039528150111436844,0.056797292083501816,-0.0013701977441087365,-0.03248410299420357,-0.026493756100535393,-0.029794685542583466,-0.02690316177904606,-0.038888126611709595,-0.0003557476738933474,0.06776196509599686,0.03484933823347092,0.0673556998372078,-0.058179162442684174,-0.019073642790317535,0.013979665003716946,0.03886019438505173,-0.012316454201936722,-0.09370043873786926,-0.0768035352230072,0.04000990837812424,-0.03980409353971481,-0.13722963631153107,0.05198751762509346,-0.06042075902223587,0.08824089169502258,0.07243034988641739,0.04267800971865654,-0.01244858093559742,0.07036878913640976,-0.0025414437986910343,0.08233349770307541,-0.01958482526242733,-0.0031249853782355785,-0.06515557318925858,-0.026461059227585793,0.08295190334320068,0.04819150269031525,0.0024117175489664078,-0.02509842999279499,-0.06296738237142563,0.051767028868198395,-0.018909156322479248,0.06115151569247246,-0.10514022409915924,0.06294960528612137,0.012679880484938622,0.018978174775838852,0.015795322135090828,0.00008905424328986555,0.011864716187119484,0.018006758764386177,-0.009093835018575191,0.06875545531511307,-0.02285148575901985,-0.03152581304311752,-0.055551767349243164,-6.32262926071593e-33,0.024859661236405373,0.000515456369612366,-0.010904164053499699,0.0282763484865427,-0.0017416342161595821,-0.03493049740791321,0.05679137259721756,-0.07860484719276428,-0.03186971694231033,-0.07534299790859222,-0.06801816821098328,0.003717337269335985,0.023760633543133736,-0.02922198548913002,-0.13452276587486267,0.004251011647284031,0.005007489118725061,-0.022522833198308945,-0.005318185780197382,0.00627469876781106,-0.04075457155704498,0.03166460990905762,0.02843298204243183,0.03945516049861908,-0.0549391508102417,-0.05366528779268265,0.029970834031701088,-0.03715929388999939,-0.08464696258306503,0.045358240604400635,-0.0022719388362020254,0.04941888526082039,0.056485507637262344,0.02908339537680149,-0.04344535619020462,0.038367290049791336,-0.009858430363237858,0.12487700581550598,0.02897782437503338,0.0057122111320495605,0.024391667917370796,-0.029250700026750565,-0.10857877880334854,-0.03620433062314987,-0.024676892906427383,0.017363032326102257,-0.014391002245247364,-0.001485104439780116,-0.10009105503559113,0.015421331860125065,-0.06598957628011703,-0.06566275656223297,-0.031407859176397324,-0.0033708596602082253,-0.017730800434947014,-0.08539882302284241,0.04296153783798218,0.016556864604353905,0.004735866095870733,0.03860701248049736,0.14985308051109314,-0.06887514144182205,0.023314980790019035,-0.0009821181884035468,-0.04231243208050728,-0.015623834915459156,-0.0862841084599495,-0.02701435796916485,-0.06385190784931183,0.028353523463010788,0.053648922592401505,-0.039806101471185684,-0.0016522237565368414,0.09724115580320358,-0.0075518288649618626,-0.08295651525259018,0.008690796792507172,-0.09491004049777985,0.002127541694790125,0.0636649876832962,0.041889648884534836,0.04857078939676285,0.022479543462395668,-0.08195402473211288,-0.07637374103069305,-0.03813838213682175,0.05320928618311882,0.07116031646728516,-0.010020216926932335,0.03564316779375076,0.025334669277071953,0.030749423429369926,-0.051253870129585266,0.06797268986701965,-0.02140575647354126,-5.525870960809698e-8,0.024510478600859642,-0.04425593838095665,-0.03839535266160965,0.04349079355597496,-0.06393098831176758,0.034750062972307205,0.039534080773591995,-0.05473333224654198,0.07555370777845383,0.01756131649017334,-0.059983495622873306,0.03386919945478439,-0.053476545959711075,-0.009261053055524826,-0.008521125651896,0.03569372743368149,0.056141771376132965,-0.03682496398687363,0.005242479499429464,-0.01624840870499611,-0.006613884121179581,0.01343942154198885,0.014925496652722359,0.022459732368588448,0.010511566884815693,0.04708901047706604,0.06286467611789703,-0.016973916441202164,-0.02126554399728775,-0.007129274774342775,0.03093710169196129,0.0055968682281672955,-0.015509853139519691,0.10271808505058289,0.009410973638296127,0.012998204678297043,-0.0710444226861,-0.04817508906126022,-0.008064924739301205,-0.007415954489260912,-0.04148407652974129,-0.007883712649345398,0.017494628205895424,-0.06361488252878189,-0.050956424325704575,-0.07133185863494873,0.03947768732905388,0.05105876922607422,0.02116132713854313,0.02447197027504444,0.05621948838233948,0.0052838693372905254,0.08037670701742172,0.046809323132038116,0.11824594438076019,0.07165802270174026,-0.005289654713124037,-0.027410143986344337,0.03584936633706093,0.02823569066822529,-0.05505169555544853,0.0320960097014904,0.029420508071780205,-0.04219494014978409
6YisG2GcXaw,2019-11-10T10:32:54Z,Developing with Docker - Docker in Practice || Docker Tutorial 8,[Music] so in this video we are going to look at some practical example of how to use docker in a local development process so the prerequisites before you get started with this video is you have to understand some basic concepts of docker and you have to know some of the basic commands so if you don't you can check out my videos where I cover both the concepts and the comments and then you can come back to this video so what we're gonna do is a simple demo of a JavaScript and node.js application in the backend to simulate the local development process and then we're gonna connect it to a docker container with a MongoDB database in it so let's get started so in this video we're gonna see how to work with docker containers when developing applications so the first step will be is we're gonna develop a very simple UI backend application using Java Script very simple HTML structure and no J's in the backend and in order to integrate all of this in the database we are gonna use a docker container of a MongoDB database and also to make working with the MongoDB much easier so we don't have to execute commands and in the terminal we're gonna deploy a docker container of a mongrel UI which is called Express where we can see the database structure and all the updates that our application is making in the database so this development setup should give you an idea of how docker containers are actually used in development process so I've already prepared some very simple JavaScript application so in order to see the code basically we have this index.html that is very simple code and we have some JavaScript here and we're using node.js back-end that just serves that index.html file and listens on port 3000 so we have the server running here in the backend and we have the UI that looks like this so basically it's just the user profile page with some user information and user can edit their profile so if I for example change the name here and if I change the email address and do changes like this I can save my profile and I have my updates here however if i refresh the page of course the changes will be lost because it's just JavaScript no J's so there is no persistent component in this application so in order to have that which is actually how real-life applications work you'll know that you need to integrate the application with the database so using that example I will try to showcase you how you can actually use the docker containers to make the development process easier by just pulling one of the databases and attaching it or connecting it to the application so in this case we're gonna go with the MongoDB application and in addition to MongoDB container we're gonna also deploy a MongoDB UI which is its own container it's called Express where we can manage or see the database in insights and updates from our application much easier so now let's see how that all works so in order to get started let's go to docker hub and find our MongoDB image here let's go to Congo and we have MongoDB here and the Express which is another container that we're gonna use for the UI so first let's pull the MongoDB official image so I already have MongoDB latest so pulling doesn't take longer but on my laptop but you're gonna need a couple of seconds probably and the next one we're gonna pull is the docker Express which I also have I believe so let's see yes it's also fast so if I check luckily I have MongoDB and  Express images so the next step is to run both and Express containers in order to make the MongoDB database available for our application and also to connect the Express with the DB container so let's do the connection between those two first in order to do that we have to understand another darker concept doctor network so how it works is that Dhaka creates its isolated token network where the containers are running in so when I deploy two containers in the same token Network in this case and Express they can talk to each other using just the container name without localhost port number etc just the container name because they are in the same network and the applications that run outside of docker like our node.js which just runs from node server is going to connect to them from outside or from the host using localhost and the port number so later when we package our application into its own docker image what we're gonna have is a game token network with MongoDB container Express container and we're gonna have a node.js application which we wrote including the index HTML and JavaScript for fronting in its own docker container and it's gonna connect to the MongoDB and the browser which is running on the house but outside the docker network is going to connect to our JavaScript application again using hostname and the port number so docker by default already provides some networks so if we say docker Network LS we can already see these auto-generated dog networks so we have four of them with different names and the drivers we're not gonna go into details here but what we're gonna do is create its own network for the MongoDB and Express and we're gonna call it mobile network so let's do this right right away I'm gonna say docker Network create and we're gonna call it Network so now if I do doctor Network LS again I see my token network has been created so now in order to make our MongoDB container in the Express container run in this Mangal Network we have to provide this network option when we run the container in the docker run command so let's start with the so we all know that docker run is the command to start a container from an image right so we have current which is the basic docker run command however in this case we want to specify a couple of things as you learned from the previous videos you have to specify something called port so we need to open a port of MongoDB the default port of MongoDB is 27 thousand seventeen so we'll take that port actually for both host and container so  will run at this port inside of a container and we open the same port on the host so that will take care of the port then we will run it in a detached mode in addition to that there are a couple of things that we can specify when starting up the container and these are environmental variables of the MongoDB let's see in the official image description you actually have a couple of documentation about how to use the image which is very helpful to kind of understand what kind of configuration you can apply to it here you see some environmental variables so basically on startup you can define what the root username and the password will be which is very handy because we're gonna need those two for the experts to connect to the and you can also specify the init database we're just gonna provide the username and password because we can create the database from the Express you why later so let's do that and the way you can specify the environmental variables you can actually see here as well is by just let's copy this one so here you say environmental variable that's what they - e flag stands for and the root username will say it's admin and another variable which is the password will be just password so in this way we can actually override what the default username and password will be so two more things that we need to configure in this commend our container name because we're gonna need that container name to connect with the Hmong Express so we'll call this one dB let's say and another one we need is the network that we created which was called Network so in order to make this command a little bit more structured do it on multiple lines so let's see so it's more readable so basically all these options or all these flags that we set to go one more time through them it's gonna start in detached mode we are opening the port on the host username and password that we want a MongoDB to use in the startup process we're gonna rewrite or override the name of the container and this container is gonna run in a Network and this should actually start the container okay so if you want to see whether it was successful we can lock the container and see what's happening inside so as we see  was started and everything actually looks good waiting for connections on port 20 7017 okay so now let's start Express we want  Express to connect to the running MongoDB container on startup and here we have an example of how to run it and here we have a list of environmental variables that we can configure so let's quickly look at them username password we don't need them however we need the admin username and admin password of the MongoDB this is actually what we overrode with admin and password so we're gonna use them because Express will need some username password to authenticate with the MongoDB interconnected the port is by default the correct one so we don't need to change that and this is an important part this is the MongoDB server right so basically this is the container name that experts will use to connect to the docker and because they are running in the same network only because of that this configuration will work if I didn't if I hadn't specify the network then I could have I could specify the name correct name here of the container but it wouldn't work so with that said let's actually create the docker run command for express as well so let's clear the history and let's start so again we run in detached mode and let's see what parameters we need so first of all port let's say with what is the default port that the Express runs on that's 80 81 so we'll take that so basically it's gonna run on our laptop on port 80 81 the next option would be these two and remember environmental variables need to be specified with minus E and this is the username of MongoDB admin which is admin because we specified it when we started the MongoDB container this is the password let's set this one as well don't forget the network - - net  Network we have the name we can also call it Express and let's see what else we might need here yes this is important one and our container name let's actually see it again dr. PS the one running it's called MongoDB that's the container name and this is what we need to specify here so I'm gonna write this here and finally the image is called  Express so I'm just gonna copy this one here and that is it so basically with these commands talk Express should be able to connect to the MongoDB container so let's write it and just to make sure let's lock the container and see what's happening there waiting for MongoDB welcome to my express it looks like it connected successfully it says here database connected and the  Express is available at port 8081 so let's check the manga Express out at the port 8081 so actually let's close these tabs you don't need them anymore and here if I say localhost 8080 one I should be able to see the manga Express so these are the databases that are already exist by default in or which are created on startup and using the UI we can create our own database as we saw previously we could have specified an environmental area variable in it TB on MongoDB startup and that would have created a new database however it doesn't matter we will just create a database name here so we will call it user account database so let's create one and now we can actually use it or connect to this database from nodejs so let's see how that works so now we have the MongoDB container and the manga Express container running so let's check that we have both of them we'll have to connect no J's with the database so the way to do it is usually to give a protocol of the database and the URI and the URI for a MongoDB database would be localhost and the port that it's accessible at so when I already went ahead and prepared the code for no J's so basically we are gonna use a client here which is a node module and using that client we are connecting to the MongoDB database so this is the protocol the host and the port that we just saw that the MongoDB is listening at and username and password of the root user of MongoDB of course usually you wouldn't put the password here or not use an admin or root username password to connect to a database but this is for just the demonstration purposes and these are username and password that we set as environmental variables when we created the docker MongoDB container so let's check that so this is the MongoDB container command and this is the username root and root password that we specified and this is what we are gonna use in the code as I said for demonstration purposes I will write the password directly here so then we connect to the database so I also went ahead and in the Express user account database and inside that I created collection which is like a table in my sequel world called users so here I connect to a user account database and I query the collection users and this is a get requests so I'm just fetching something from the database and this is update request same thing I connect to the database using the same URI and the database name and I update or insert something in the collection so let's see how all that works so let's head over to the UI so in the users collection the there is no data it's empty so we're gonna refresh it and edit the data so I'm gonna right here some and update it and refresh we see that a new insert was made so this is the update profile section here so all this was executed it connected to the MongoDB and now we have one entry which is email coding name that we changed so if I'm gonna refresh it now I fetched a newly inserted use the data in the UI and I displayed it here and also if you want to see what the MongoDB container actually logs during this process we can actually look at the locks so I'm gonna say docker PS and block using the container ID so let's say if I wanted to see just the last part of it because I wanted to see what the last activity was I can also let's clear this and I can also do tail so I can just display the last part of it or if I wanted I could also stream the logs so I'll clear this again and I'll say stream the logs so I don't I won't have to do doctor logs all the time so if I make a line here for example to mark the last logs I can refresh it let's make some other changes let's change it and save profile so I'm gonna see some activity here as well so these connections are new and it also says received client metadata and this is where the node.js request comes in with a noches and it's version and at the end of each communication there is an in connection because we end the database connection at the end so we see that also in the logs so for example something wasn't working properly you could always check them in a logs here so with that I have a fully functional JavaScript node.js application which has a persistence in the MongoDB database and we also have UI both of them running in a docker container so this would be somehow a realistic example of how local development using docker containers would look like thanks for watching the video I hope it was helpful and if it was don't forget to like it this is a video series so I will create a new one every week so if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in a comment section below and I will try to answer them so thank you and see you in the next video,-0.05625535175204277,0.06940635293722153,0.03391484543681145,0.025492485612630844,-0.00738444272428751,-0.06372818350791931,-0.006139431614428759,0.06892989575862885,-0.049172721803188324,0.06512293219566345,-0.0076104276813566685,-0.0512005090713501,0.059411339461803436,-0.026944108307361603,-0.053686127066612244,-0.04647216573357582,-0.013336749747395515,0.03780065476894379,-0.0071385810151696205,0.015179612673819065,-0.11162193864583969,-0.006470240652561188,-0.019810672849416733,-0.060264330357313156,-0.010918961837887764,0.03944182023406029,0.0279015451669693,-0.04507673904299736,0.046417608857154846,-0.005564691964536905,0.02902444824576378,0.02210252173244953,0.06164461001753807,-0.0037954412400722504,0.015275133773684502,0.07049454748630524,0.11233925819396973,-0.0011025434359908104,-0.046617455780506134,-0.03748669475317001,-0.015814518555998802,-0.11397797614336014,-0.017915206030011177,-0.020823808386921883,-0.014464858919382095,-0.10723007470369339,0.019001593813300133,-0.07564885169267654,0.03076990507543087,0.05790506675839424,-0.07076883316040039,-0.10080776363611221,-0.013094321824610233,-0.016253819689154625,-0.020445315167307854,0.04584357142448425,-0.01659061759710312,0.060399189591407776,0.02067609876394272,-0.021576352417469025,0.012827171944081783,-0.0014090255135670304,-0.04577133059501648,0.046024590730667114,0.06810499727725983,-0.07134111225605011,-0.004239859525114298,0.059548087418079376,0.04616662859916687,0.026716049760580063,-0.028811415657401085,0.006310459226369858,-0.04485200718045235,-0.03793484345078468,-0.0402960367500782,-0.013681264594197273,0.01582578755915165,0.05016498640179634,-0.06001361459493637,0.024020062759518623,-0.01423393189907074,0.0050028846599161625,-0.010533135384321213,-0.02700934186577797,-0.08885417878627777,0.05141521990299225,-0.022227713838219643,0.0009729359881021082,0.07814203202724457,-0.07792890816926956,0.056405555456876755,0.0040574283339083195,0.011847663670778275,0.022523535415530205,0.06809215247631073,-0.00167940859682858,-0.0297627542167902,-0.05729293450713158,-0.043861545622348785,0.006217003334313631,0.016647225245833397,-0.0481262169778347,0.015486691147089005,-0.03426694869995117,0.06330505758523941,0.0007673943182453513,-0.02380463294684887,-0.01310776174068451,-0.04810980707406998,-0.03829970583319664,-0.012382052838802338,-0.0684950202703476,-0.06893803924322128,0.01254461333155632,0.01382166426628828,-0.011348510161042213,-0.008732090704143047,-0.08701806515455246,0.05464586615562439,-0.020034128800034523,0.03744106739759445,0.03500178083777428,0.060301486402750015,-0.05664243549108505,-0.04065699130296707,-0.009800138883292675,-0.08740773797035217,-2.0672741401949924e-33,0.0542326457798481,-0.102809838950634,0.0015647909604012966,0.07034343481063843,0.16065950691699982,-0.0505804643034935,0.03404415398836136,-0.0210356954485178,-0.048460911959409714,0.026556476950645447,0.028345735743641853,-0.03379539027810097,-0.035841766744852066,0.06026313826441765,0.0703945904970169,-0.06881842017173767,-0.10816263407468796,-0.010451325215399265,-0.03043496422469616,-0.01904253475368023,-0.00245715887285769,-0.07352125644683838,0.009175877086818218,-0.04872775450348854,0.06565941870212555,0.03960508853197098,0.06953258812427521,-0.03697207197546959,0.032325513660907745,-0.01259275060147047,-0.008312971331179142,-0.0041687702760100365,-0.0317956767976284,0.0014960994012653828,0.027730945497751236,0.0147772915661335,0.046988245099782944,0.0588340200483799,-0.0449523888528347,-0.021006038412451744,-0.0496700145304203,-0.0777076855301857,0.03407159447669983,-0.02720835618674755,0.0739172101020813,-0.04699705168604851,0.031214963644742966,-0.036867864429950714,0.02260649763047695,0.04560135677456856,0.0409306101500988,-0.07534267008304596,-0.10079371184110641,0.05947929993271828,-0.011362966150045395,-0.027016570791602135,-0.03922496736049652,-0.0168075542896986,-0.008522730320692062,0.01907983608543873,-0.10932126641273499,0.06862875074148178,0.029247676953673363,-0.04829820990562439,-0.047188177704811096,0.02503543719649315,-0.04173452407121658,0.055451199412345886,0.06458669155836105,0.06338836997747421,0.020406117662787437,0.0603056401014328,0.04535090550780296,0.05341276526451111,0.020018110051751137,0.021581610664725304,-0.043074991554021835,0.03411877155303955,0.016242416575551033,0.02784789726138115,-0.0039020220283418894,0.05299057066440582,-0.007713804487138987,0.1011180505156517,-0.06401874870061874,-0.10218638181686401,0.06583654135465622,0.09313852339982986,-0.004413521382957697,0.04335686191916466,-0.004018424544483423,0.02776908688247204,-0.04496834799647331,-0.046053964644670486,-0.06731270253658295,-2.6302990163694126e-33,-0.006107246968895197,0.050335511565208435,-0.07832954823970795,0.05510447919368744,0.018787115812301636,0.031386204063892365,0.08243343234062195,-0.007987983524799347,0.024742990732192993,-0.07311047613620758,-0.12711523473262787,0.06451438367366791,0.03350195661187172,0.06676378101110458,-0.0958872139453888,0.0016982099041342735,-0.06314229220151901,-0.0322316475212574,0.0074995714239776134,-0.06843558698892593,0.0009327918523922563,0.02321232669055462,0.03481955826282501,0.041415005922317505,-0.07984903454780579,-0.09522472321987152,0.08943754434585571,-0.03158636391162872,-0.03916912525892258,0.0018061971059069037,0.053379714488983154,0.018146490678191185,0.00048503128346055746,0.07820270955562592,0.03551161661744118,0.05990411713719368,0.003656117944046855,0.050464481115341187,-0.00606657424941659,-0.12675411999225616,0.0353955514729023,-0.09965912252664566,-0.022997435182332993,-0.016367599368095398,-0.030425826087594032,-0.022308433428406715,0.04878862574696541,-0.005964496172964573,-0.13669922947883606,0.014731461182236671,-0.057628944516181946,-0.07024826854467392,-0.010250920429825783,-0.06368160992860794,-0.006140618119388819,-0.0511937141418457,0.09579583257436752,-0.020327994599938393,-0.021210739389061928,0.0752883031964302,0.06843432039022446,-0.05443929135799408,0.0636930987238884,0.00008312120189657435,-0.04602879658341408,-0.013782555237412453,-0.06817279756069183,0.02254714071750641,-0.07891278713941574,0.044999875128269196,0.022235145792365074,-0.03653393313288689,-0.016075480729341507,0.02764866128563881,0.041981291025877,-0.0427960604429245,0.010722310282289982,0.006641904357820749,0.031506963074207306,0.0000119906317195273,-0.08437801152467728,-0.006129286717623472,0.03912877291440964,-0.08532173186540604,-0.05861802026629448,0.047414086759090424,0.12189319729804993,-0.0037548195105046034,0.046875499188899994,-0.002679916098713875,0.024588217958807945,-0.018290434032678604,-0.050915468484163284,0.08443249762058258,-0.014491824433207512,-2.0395500399672528e-8,0.024825317785143852,0.025829575955867767,-0.021886227652430534,-0.007865316234529018,-0.04066278040409088,0.0010349951917305589,0.07900337129831314,0.03757554292678833,-0.01594546064734459,-0.005042960401624441,-0.06471005827188492,-0.058371175080537796,-0.08438403904438019,0.07626380026340485,0.05160457640886307,0.10146500915288925,0.022606225684285164,0.08185988664627075,-0.026902174577116966,-0.07200544327497482,0.015564997680485249,0.03996282443404198,0.056624334305524826,-0.049349330365657806,0.0059646014124155045,0.05340416729450226,0.026626136153936386,0.08150172233581543,-0.012253801338374615,-0.04878508672118187,0.09480449557304382,0.05625910311937332,-0.09812729805707932,0.042186398059129715,0.012589717283844948,-0.036072373390197754,-0.01929153874516487,-0.022549262270331383,0.02281087264418602,-0.011658559553325176,-0.08690878003835678,-0.03765576705336571,-0.010829867795109749,-0.0637824535369873,-0.03855268284678459,0.036326710134744644,-0.006403988692909479,-0.0380762554705143,-0.06406694650650024,0.006466420367360115,0.05041146278381348,0.00579821178689599,0.05362311750650406,-0.02989216148853302,0.14805056154727936,0.07997560501098633,0.039474766701459885,-0.00718057993799448,0.033883024007081985,-0.008702440187335014,0.02964029461145401,0.11568194627761841,-0.01891069859266281,0.06359506398439407,-0.012389137409627438,-0.004477117210626602,0.00128563167527318,0.04514377936720848,-0.01045145746320486,-0.06980953365564346,-0.05146658048033714,0.058957017958164215,-0.027452053502202034,-0.011279131285846233,-0.07673920691013336,-0.01789974421262741,0.03602147474884987,-0.04380981996655464,-0.045424170792102814,-0.006550143472850323,0.07757124304771423,-0.0030413991771638393,0.02114878036081791,-0.017057636752724648,-0.06164609268307686,-0.06880637258291245,0.03250158950686455,-0.020362121984362602,-0.011964928358793259,0.04346109926700592,0.03342926502227783,-0.006194645073264837,-0.002219133311882615,-0.010517860762774944,0.05298229306936264,0.008493411354720592,0.02373829483985901,-0.031293924897909164,-0.10278210043907166,0.13302050530910492,0.08042605966329575,-0.10806829482316971,-0.07668139785528183,-0.09202614426612854,-0.009837942197918892,-0.04603820666670799,-0.06114944815635681,-0.013814547099173069,0.06101832538843155,-0.12893211841583252,-0.1333063691854477,-0.04516202211380005,-0.018851015716791153,0.013106958009302616,-0.037272702902555466,-0.0931234136223793,-0.00961314421147108,-0.015647297725081444,-0.07750395685434341,0.12226928025484085,0.0001542996906209737,0.008106619119644165,0.015280970372259617,0.05407135188579559,0.05459931865334511,-0.013769086450338364,0.012602959759533405,0.03354601562023163,0.08842404186725616,-0.07723910361528397,-0.030086541548371315,0.06365308910608292,0.060395363718271255,-0.06273379921913147,-0.021244151517748833,0.04080754891037941,-0.0625917911529541,-0.06078743189573288,-0.0903463289141655,-0.0573846735060215,-0.009503111243247986,-0.012107986956834793,-0.03450046852231026,0.09210550785064697,0.0018568283412605524,-0.005355279892683029,-0.022161316126585007,-0.019325537607073784,-0.0873110368847847,0.08892025798559189,0.03460416942834854,0.026621762663125992,-0.020459063351154327,-0.019620923325419426,0.014079567044973373,-0.03761834651231766,-0.035896096378564835,0.02745363861322403,0.06461749970912933,0.06326144188642502,0.006937368307262659,0.012806570157408714,0.04865214228630066,-0.014555481262505054,0.02866499498486519,-0.005642291624099016,0.07417289912700653,-0.07409276068210602,0.06418737769126892,0.005208212416619062,-0.031073391437530518,-0.0002236260479548946,-0.007199332118034363,-0.007837950251996517,-0.02335304394364357,0.010947983711957932,-0.07974176853895187,0.03452026844024658,-0.0448727011680603,0.02033814787864685,0.02038542553782463,-0.12246456742286682,0.0519222654402256,0.0565878264605999,0.08914732933044434,0.0686110407114029,-0.003699311288073659,-0.0417158305644989,0.06447090208530426,-0.021894382312893867,-0.027852708473801613,2.8795747157467716e-33,0.0900595486164093,-0.09784919023513794,0.06867444515228271,0.03901689499616623,0.15294136106967926,-0.000994627713225782,0.022858964279294014,0.001744940411299467,-0.0914936289191246,0.04602953419089317,-0.015318663790822029,0.06868860125541687,0.02383805811405182,-0.018335266038775444,0.018552199006080627,-0.09078360348939896,-0.018750738352537155,0.02525494620203972,0.07153783738613129,-0.02266421541571617,-0.009974181652069092,-0.001364586642012,0.0015088076470419765,0.03470058739185333,0.1094917356967926,0.039261896163225174,-0.023607201874256134,0.021652039140462875,0.00024405651492998004,-0.0037250283639878035,0.0044887373223900795,-0.029232852160930634,-0.06742481887340546,0.03303765505552292,0.007005656603723764,-0.01819453202188015,-0.0009419294074177742,-0.02671431377530098,-0.05324738100171089,-0.036155443638563156,0.0015771299367770553,-0.02693888731300831,-0.04187200590968132,-0.021616464480757713,-0.02995186671614647,-0.005286485888063908,0.04174730181694031,-0.055779650807380676,0.032959893345832825,0.034754227846860886,-0.030577577650547028,-0.043570104986429214,-0.03023923747241497,0.049408234655857086,0.021265998482704163,0.010199734941124916,-0.003941534552723169,-0.08091878890991211,0.0075434851460158825,0.011547080241143703,-0.0783970057964325,0.04430181533098221,-0.04025215655565262,0.03623417764902115,-0.00039015396032482386,-0.014601130969822407,-0.021137923002243042,0.037005797028541565,0.047491904348134995,0.02604922093451023,0.004947173874825239,0.07294028997421265,0.06468696147203445,0.02659003809094429,0.03195544704794884,0.04230787605047226,-0.0579734668135643,-0.025412002578377724,-0.03670208901166916,0.030162310227751732,0.03109576180577278,-0.028647268190979958,-0.10396203398704529,0.08004681766033173,0.04471694305539131,0.06766762584447861,0.012598379515111446,0.020126011222600937,0.02744419127702713,0.03435467183589935,0.01770300790667534,0.08077926188707352,-0.002246262039989233,-0.09246473014354706,0.0223141647875309,-6.090354515729323e-33,0.03493709862232208,-0.021228428930044174,-0.020550740882754326,0.04387756437063217,0.05931325629353523,-0.0028694067150354385,-0.0005449686432257295,-0.0020415675826370716,0.019312771037220955,-0.07725928723812103,-0.11052853614091873,0.006259226705878973,0.00840215664356947,0.024908248335123062,-0.11493165045976639,0.02267293818295002,-0.04311523213982582,-0.05174697935581207,0.018090609461069107,-0.008110490627586842,-0.002657083561643958,0.053397174924612045,-0.004909380804747343,0.012788064777851105,-0.08839006721973419,-0.09353232383728027,-0.007862729951739311,-0.0646364837884903,-0.05641596391797066,0.021315691992640495,-0.007746036630123854,-0.017408709973096848,0.027725376188755035,0.002864160807803273,0.031295549124479294,-0.01932201348245144,0.044904861599206924,0.08104144036769867,0.05880669131875038,-0.0961744636297226,0.0002991317887790501,-0.04520367085933685,-0.08355948328971863,-0.09215756505727768,-0.019578462466597557,-0.004642026033252478,-0.07128462195396423,0.08626855909824371,-0.06239955499768257,-0.07514156401157379,-0.052169885486364365,-0.07038040459156036,0.012807653285562992,-0.050608329474925995,-0.009242811240255833,-0.10042127966880798,0.01911890134215355,-0.031151002272963524,0.04133794084191322,0.09510541707277298,0.060687851160764694,-0.07201653718948364,0.03554396331310272,-0.010729601606726646,-0.08728260546922684,-0.049499835819005966,-0.09371413290500641,0.025423618033528328,-0.023261871188879013,-0.012316498905420303,-0.022311123088002205,-0.0034787203185260296,0.031135497614741325,0.0995296910405159,0.04658300802111626,-0.05961644649505615,-0.004083946812897921,-0.14214292168617249,0.058429181575775146,0.011360425502061844,0.053213708102703094,0.07909023016691208,0.03713634982705116,-0.07997043430805206,0.023689530789852142,-0.01009896770119667,0.06042146310210228,-0.015432773157954216,-0.04589022696018219,-0.025263316929340363,-0.06815867125988007,0.08704420179128647,-0.06180553138256073,0.05039946734905243,0.00017812651640269905,-5.14445765986693e-8,-0.020413678139448166,0.025142045691609383,-0.05795259028673172,-0.005623433738946915,-0.049181558191776276,0.060400787740945816,0.06745163351297379,0.01905295066535473,0.0951591432094574,0.009140577167272568,-0.024446632713079453,0.009124652482569218,-0.0268589798361063,0.05148645117878914,-0.013569056987762451,0.10866282135248184,0.06967618316411972,0.04614531248807907,0.03231080621480942,0.014960571192204952,0.0288377795368433,0.026537708938121796,0.046971023082733154,0.03479451686143875,0.04527285695075989,0.036841899156570435,0.035913918167352676,0.07236910611391068,-0.006408696062862873,-0.030062401667237282,-0.009268167428672314,-0.004719806369394064,0.05763421207666397,0.09014751017093658,0.05125509575009346,-0.022765524685382843,-0.042538419365882874,-0.05981820076704025,-0.006981879938393831,-0.051159199327230453,-0.009063873440027237,-0.022880027070641518,0.01562964916229248,-0.05311720818281174,-0.07116623222827911,-0.0250046718865633,0.008612596429884434,-0.007119908928871155,-0.03139045462012291,0.03400057554244995,0.056480519473552704,-0.06687206029891968,0.021944468840956688,-0.04166522994637489,0.11217070370912552,0.1119486540555954,0.011592560447752476,-0.02789974957704544,0.02146849036216736,0.020644579082727432,-0.002887726528570056,0.11053064465522766,0.023681748658418655,0.013724923133850098
YdKUkDe22RA,2019-11-10T10:02:34Z,Overview of Workflow with Docker - Docker in Practice || Docker Tutorial 7,[Music] so once you've learned the docker basic concepts and understood how it works it's important to see how docker is actually used in practice so in software development workflow you will know you have this classical steps of development and continuous delivery or continuous integration and then eventually it gets deployed on some environment right it could be a test environment develop environment so it's important to see how docker actually integrates in all those steps so in the next couple of videos I'm gonna concentrate exactly on that so we're gonna see some overview of the flow and then we're going to zoom in on different parts and see how docker is actually used in those individual steps so let's consider a simplified scenario where you are developing a JavaScript application on your laptop right on your local development environment your JavaScript application uses a MongoDB database and instead of installing it on your laptop you download a docker container from the docker hub so you connect your JavaScript application with the MongoDB and you start developing so now let's say you develop the application first version of the application locally and now you want to test it or you want to deploy it on the development environment where a tester in your team is gonna test it so you commit your JavaScript application in git or in some other version control system that will trigger a continuous integration a Jenkins build or whatever you have configured and Jenkins build will produce artifacts from your application so first you will build your JavaScript application and then create a docker image out of that javascript artifact right so what happens to this docker image once it gets created by a Jenkins build it gets pushed to a private docker repository so usually in a company you would have a private repository because you don't want other people to have access to your images so you push it there and now as the next step could be comes configured on Jenkins or some other scripts or tools that docker image has to be deployed on a development server so you have a development server that pulls the image from the private repository your JavaScript application image and impulse the MongoDB that your JavaScript application depends on from a docker hub and now you have two containers one your custom container and a publicly available MongoDB container running on them on dev server and they talk to each other you have to configure it of course they talk and communicate to each other and run as an app so now if a tester for example or another developer logs in to a dev server maybe they will be able to test the application so this is a simplified workflow how docker will work in a real life development process in the next videos I'm gonna show you hands-on demo of how to actually do all this in practice thanks for watching the video I hope it was helpful and if it was don't forget to like it this is a video series so I will create a new one every week so if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in a comment section below and I will try to answer them so thank you and see you in the next video,-0.05353279411792755,0.07894652336835861,-0.0012957556173205376,-0.020053448155522346,-0.004887183662503958,-0.06481559574604034,0.030474141240119934,0.00455965381115675,-0.046816643327474594,0.03470273315906525,-0.10969052463769913,-0.020757343620061874,0.032579295337200165,-0.01877320557832718,-0.03647695481777191,-0.040462471544742584,-0.00863743107765913,0.020095987245440483,-0.006481008138507605,-0.07277613133192062,-0.07230878621339798,-0.002486184239387512,-0.02866973914206028,-0.006317290477454662,-0.058807022869586945,0.04119209572672844,-0.02963162213563919,-0.01551030483096838,0.012439471669495106,0.00833255983889103,0.0075955819338560104,0.050404276698827744,0.1105966717004776,0.03032929077744484,-0.0007489827694371343,0.051437340676784515,0.09160083532333374,-0.013900060206651688,-0.04763558879494667,-0.0303458534181118,0.04158879071474075,-0.09821373224258423,-0.06444521993398666,-0.02036518231034279,-0.02300237864255905,-0.08996676653623581,-0.02062416635453701,-0.12237266451120377,-0.013907322660088539,0.045166872441768646,-0.0869484394788742,-0.12245101481676102,-0.016914764419198036,0.05916624516248703,0.007806969340890646,0.05353414639830589,0.02295743301510811,-0.0038569713942706585,0.02766428329050541,-0.10348633676767349,0.0031195736955851316,-0.03038978762924671,-0.05049034580588341,0.008855743333697319,0.061618220061063766,-0.08695590496063232,-0.04111916199326515,0.026103809475898743,0.043388091027736664,-0.02349632978439331,-0.07408495992422104,-0.00856607686728239,-0.07786218076944351,-0.09775819629430771,-0.07517580687999725,-0.03234210982918739,-0.016758214682340622,-0.00011949260806431994,-0.08028589934110641,-0.010557993315160275,0.016147535294294357,0.012138903141021729,-0.028217481449246407,-0.014328420162200928,-0.07704666256904602,0.03136635571718216,-0.05434277653694153,-0.01312562171369791,0.09343527257442474,-0.04621012508869171,0.009268123656511307,-0.005110675003379583,0.01275386568158865,-0.017949750646948814,0.08795852214097977,-0.008845934644341469,-0.017970537766814232,-0.03353560343384743,-0.03576907142996788,0.024732161313295364,0.0633421540260315,-0.03511403873562813,0.05081278830766678,-0.0763964131474495,0.06119190528988838,0.009081183932721615,-0.016947366297245026,0.01472585927695036,-0.002943688305094838,-0.011298642493784428,-0.0261852964758873,-0.0002739719639066607,-0.011734792962670326,0.051388733088970184,-0.026823416352272034,0.0033965979237109423,0.03225727379322052,-0.0015470091020688415,-0.02769456058740616,0.02960081398487091,0.05250251665711403,0.019556263461709023,0.07163865119218826,-0.06665336340665817,-0.03819659724831581,-0.03940756246447563,-0.05089612305164337,-2.1574209652496305e-33,0.046060625463724136,-0.09451690316200256,0.0293886736035347,0.11354401707649231,0.18542078137397766,-0.05310307815670967,0.021418454125523567,-0.037245187908411026,0.024750685319304466,0.01283541601151228,-0.010330555029213428,0.06163843721151352,-0.0205291248857975,0.05520462617278099,-0.03664151951670647,-0.10287823528051376,-0.1150912269949913,0.05896226689219475,0.02384384162724018,0.06031816080212593,0.03934643790125847,-0.06575973331928253,-0.032289933413267136,0.019675759598612785,0.07569602876901627,0.01155669242143631,0.005234117619693279,-0.03423640877008438,0.07292476296424866,0.00013664095604326576,-0.008122183382511139,-0.027487996965646744,0.03279886022210121,0.03657131269574165,-0.013873952440917492,0.04755793511867523,-0.0337924100458622,0.01785726472735405,0.01286956574767828,-0.07427427172660828,-0.03358251228928566,-0.09135698527097702,0.021431656554341316,-0.0025872669648379087,0.04917187616229057,-0.001956205116584897,-0.0005027325823903084,0.006734156981110573,0.08782528340816498,0.06738178431987762,0.08579489588737488,-0.09930968284606934,-0.04236103966832161,0.002246925374493003,-0.0073294988833367825,-0.02251206524670124,-0.05088964104652405,0.00870399922132492,-0.013923456892371178,0.08639252930879593,-0.12986895442008972,0.05486294999718666,-0.01467518787831068,-0.01703834719955921,0.006161956582218409,0.015023602172732353,-0.06115647032856941,0.0725666731595993,0.06966900825500488,0.048023771494627,-0.03026709519326687,0.11190834641456604,0.06845550984144211,0.08723309636116028,0.013349771499633789,0.04069686681032181,0.004987054038792849,-0.048744916915893555,-0.05061067268252373,-0.007614532485604286,-0.02763134054839611,0.044448960572481155,-0.01918829046189785,0.0715842917561531,-0.03399605676531792,-0.04446966201066971,0.03541842848062515,0.05731512978672981,-0.05907281115651131,0.016851939260959625,0.028629550710320473,0.033573172986507416,0.01232615951448679,-0.0355660505592823,-0.009419156238436699,-2.819665829828106e-33,0.020245283842086792,0.019090259447693825,-0.07441991567611694,0.07279165089130402,0.018332524225115776,0.02213243767619133,0.047336336225271225,0.026777299121022224,0.02639499306678772,-0.06592258810997009,-0.10073439031839371,0.03857259452342987,0.00625277403742075,0.02925441972911358,-0.08380186557769775,-0.054808780550956726,-0.016967900097370148,-0.040862228721380234,-0.023949995636940002,-0.0010614128550514579,-0.011213352903723717,0.045163966715335846,-0.01820012554526329,-0.018302153795957565,-0.0807056725025177,-0.006729371380060911,0.058521270751953125,-0.03168381750583649,-0.019198957830667496,-0.04254452884197235,0.0038763436023145914,-0.04167380556464195,0.018744193017482758,0.052979726344347,0.0865558609366417,0.006836799439042807,0.002940535545349121,0.11893121898174286,0.05482463166117668,-0.0648040622472763,0.05212616175413132,-0.07575001567602158,0.017988966777920723,-0.029714515432715416,-0.06538186222314835,-0.036646757274866104,0.011152070015668869,0.04746009409427643,-0.09741475433111191,-0.0315820537507534,-0.048451054841279984,-0.06754747033119202,-0.03475654497742653,-0.03005249612033367,0.0020096045918762684,-0.006429017521440983,0.08439100533723831,-0.04161638021469116,-0.056883588433265686,0.07072953134775162,0.009185905568301678,0.0029728077352046967,0.04851068556308746,0.08227085322141647,-0.025800155475735664,-0.05897611379623413,-0.04582126438617706,-0.026596549898386,-0.07450047135353088,0.04382118582725525,0.05177348107099533,-0.03574239835143089,0.017753364518284798,0.0351293720304966,0.05472473427653313,-0.0939711406826973,0.051756564527750015,-0.058717694133520126,0.021750707179307938,0.004555841442197561,-0.07583656907081604,0.010743106715381145,0.014325947500765324,-0.08189348131418228,-0.03221745416522026,0.03775637969374657,0.10277663171291351,-0.030453577637672424,0.048740267753601074,-0.0033648773096501827,-0.0474153608083725,-0.030816948041319847,-0.07837781310081482,0.02905891276896,-0.008496295660734177,-2.1895997903698117e-8,-0.005867830477654934,0.032149385660886765,-0.0375501774251461,-0.0015251155709847808,-0.0430481880903244,-0.006484891287982464,0.07170646637678146,0.052249811589717865,0.01536612305790186,-0.0077935210429131985,-0.017362797632813454,-0.07160574197769165,-0.08949307352304459,0.0046304394491016865,0.05135516822338104,0.10344414412975311,0.0640127882361412,0.05563374608755112,-0.03707315772771835,-0.09648659080266953,-0.04055682197213173,-0.011145507916808128,0.04412742331624031,-0.019477006047964096,-0.0004599236708600074,0.025118932127952576,0.043420400470495224,0.1142222210764885,0.0017959988908842206,-0.05640951544046402,0.07947459816932678,0.016685016453266144,-0.04651081934571266,0.03834424167871475,0.013225886970758438,-0.0675806924700737,-0.040970273315906525,-0.053224653005599976,0.045584600418806076,0.03127662464976311,-0.055601172149181366,-0.031315453350543976,-0.010701541788876057,-0.07214318215847015,-0.028269339352846146,0.03779197856783867,-0.013723837211728096,0.009066041558980942,-0.054015252739191055,0.039157506078481674,0.05828993767499924,0.043959494680166245,0.05807782709598541,0.033506013453006744,0.06302887946367264,0.10842419415712357,0.052393924444913864,-0.007472023833543062,0.08652866631746292,-0.015059852041304111,0.03750002756714821,0.1294618546962738,-0.00886872224509716,0.08269781619310379,0.0026788327377289534,0.019466208294034004,0.03855559974908829,-0.012207823805510998,0.08638972043991089,-0.05943199247121811,-0.08052383363246918,0.03930104896426201,0.04557419940829277,-0.030225368216633797,-0.06512127816677094,0.0016296999529004097,0.0225320253521204,-0.03298434615135193,-0.014816347509622574,-0.06021733954548836,0.06743379682302475,-0.03510404750704765,-0.025957103818655014,-0.011022619903087616,-0.06294325739145279,-0.03947950154542923,-0.005990293342620134,-0.011077714152634144,-0.019422490149736404,0.03592446818947792,0.03531228005886078,0.002701933728531003,0.013026450760662556,-0.0055573200806975365,0.06417664885520935,0.07508435100317001,-0.016826950013637543,-0.011417660862207413,-0.060659509152173996,0.06085287407040596,0.04898644983768463,-0.039343032985925674,-0.049130454659461975,-0.03901137039065361,-0.014940916560590267,-0.07813413441181183,-0.0008050038013607264,-0.048030201345682144,0.03074478916823864,-0.10863147675991058,-0.07485869526863098,-0.08414196223020554,-0.05174786224961281,0.05025358870625496,-0.02908901683986187,-0.08441752940416336,-0.040320783853530884,0.007955527864396572,-0.056064121425151825,0.041024867445230484,0.07242633402347565,0.051066670566797256,0.014099018648266792,0.04221528768539429,0.04030076786875725,-0.06610941886901855,0.0012345259310677648,0.036017030477523804,0.06920407712459564,-0.09323126822710037,-0.01393721904605627,0.01613074354827404,0.07236288487911224,-0.06143878400325775,-0.020687414333224297,0.032070305198431015,-0.021658901125192642,-0.12931855022907257,-0.07235982269048691,-0.049742020666599274,0.006522851996123791,0.039289575070142746,-0.020546944811940193,0.04548899829387665,0.0432606115937233,0.014969482086598873,-0.0022353034000843763,-0.044637586921453476,-0.09637599438428879,0.06428636610507965,0.04380576312541962,-0.01352384127676487,0.02358650229871273,-0.004144764505326748,0.024101322516798973,-0.032131295651197433,-0.05026850476861,0.004440019838511944,0.11872144788503647,0.036634109914302826,-0.03168640285730362,-0.007588574662804604,0.09541842341423035,-0.009087637066841125,0.02383754774928093,-0.054735612124204636,0.09303802996873856,-0.07284140586853027,0.06878823786973953,-0.003240358317270875,-0.032577142119407654,0.019733542576432228,0.008342819288372993,-0.0024977971334010363,-0.028807954862713814,-0.008885354734957218,-0.016611699014902115,0.03072955086827278,-0.04195043444633484,0.028930092230439186,-0.012559820897877216,-0.06495131552219391,0.011313416995108128,0.08455201983451843,0.08168283104896545,0.010439032688736916,0.12189894169569016,-0.08547013998031616,0.026331763714551926,0.01769881509244442,-0.05741686001420021,4.0050528839675246e-33,0.025755446404218674,-0.1658182144165039,0.03704884275794029,0.06368859112262726,0.1441132128238678,-0.03469794988632202,0.04012491926550865,0.010741748847067356,0.010774053633213043,-0.0033999141305685043,-0.0010145953856408596,0.09774008393287659,0.0015803470741957426,0.017960354685783386,0.0024660283233970404,-0.016071712598204613,-0.08599556237459183,0.012065932154655457,0.00018009849009104073,0.0411558598279953,0.03048565424978733,-0.06955254822969437,-0.01757248304784298,-0.0007701253052800894,0.10976938903331757,-0.02094097249209881,0.005157626233994961,0.015416324138641357,-0.08696664124727249,0.006081945728510618,-0.02131688967347145,-0.05798957869410515,-0.054148510098457336,0.0180232934653759,0.03762316703796387,0.00946835521608591,0.011642827652394772,-0.03001507930457592,-0.03947705030441284,-0.02342371828854084,0.009559063240885735,-0.05258840695023537,-0.04257378727197647,-0.01780424267053604,0.03816474974155426,-0.05202455446124077,0.007019697688519955,-0.061359453946352005,0.05556029453873634,0.019778825342655182,0.05142622068524361,-0.06453616172075272,0.007607896812260151,0.032387129962444305,0.04002126678824425,-0.022291606292128563,0.013368788175284863,-0.11400476843118668,0.0035490565933287144,0.047288112342357635,-0.13319890201091766,0.0029774922877550125,-0.02856029011309147,0.00902976468205452,0.03654136508703232,0.02966928668320179,0.017627131193876266,0.07800543308258057,0.046910811215639114,-0.0015527268406003714,0.007651494815945625,0.03411512449383736,0.026056023314595222,0.029127713292837143,0.03731127828359604,-0.024427374824881554,-0.07088740170001984,0.03856978937983513,-0.012363135814666748,0.029430564492940903,-0.004866334609687328,0.059532150626182556,-0.0760977491736412,0.08054802566766739,-0.02937304973602295,0.04598131775856018,0.02565922960639,-0.04801075533032417,-0.0011684801429510117,0.03788793459534645,0.022279445081949234,0.09736037999391556,-0.018508436158299446,-0.029438329860568047,0.04081585630774498,-7.451331589535798e-33,-0.017373908311128616,-0.006812985520809889,0.01075710542500019,0.04686107859015465,0.028601747006177902,0.024205628782510757,0.038904521614313126,-0.02104131318628788,0.05831559747457504,-0.0708196684718132,-0.09587350487709045,0.0479310117661953,-0.04213700816035271,0.0333646684885025,-0.11214552819728851,0.005862647667527199,-0.03350713476538658,-0.05517805367708206,0.04589381441473961,0.0126674585044384,0.011861078441143036,-0.019478732720017433,0.002660374389961362,-0.0022169812582433224,-0.11317436397075653,-0.08102017641067505,-0.07794563472270966,-0.0645657405257225,-0.011942285113036633,0.020482758060097694,0.03542211279273033,-0.018293472006917,-0.007588366977870464,-0.014152944087982178,0.048174694180488586,-0.009155775420367718,-0.022748982533812523,0.05641300976276398,0.06421088427305222,-0.06803178787231445,-0.008623170666396618,-0.055030155926942825,-0.05776514485478401,-0.05719790980219841,-0.019517719745635986,-0.03051355667412281,-0.040479883551597595,0.035969313234090805,-0.02804606407880783,-0.07959897071123123,-0.020711693912744522,-0.009708971716463566,0.026843393221497536,-0.0312957726418972,0.0008193926187232137,-0.02174529619514942,0.03134286031126976,-0.041958924382925034,-0.04172391816973686,0.0849398747086525,0.11640362441539764,-0.020473232492804527,0.017053740099072456,0.01154725719243288,-0.11476457864046097,-0.0029745183419436216,-0.04331861436367035,0.04402787610888481,-0.055358316749334335,0.02123321034014225,-0.05287400633096695,-0.05819736793637276,-0.027883905917406082,0.05266512930393219,0.003416583873331547,-0.08017432689666748,0.07348993420600891,-0.11306077241897583,0.03916303440928459,-0.02625153586268425,-0.017867427319288254,0.0473150871694088,0.010150973685085773,-0.11940813809633255,-0.02893034927546978,0.000378308177459985,0.038163989782333374,-0.07641448080539703,0.012738553807139397,-0.0249282568693161,-0.031113047152757645,0.023038797080516815,-0.14018264412879944,-0.00320866028778255,-0.013692156411707401,-5.991201135202573e-8,-0.03868670389056206,0.03484470769762993,-0.016230082139372826,-0.0386391319334507,-0.08294351398944855,0.06386175006628036,0.06422199308872223,0.04922023415565491,0.0752863883972168,0.04507157951593399,-0.04013177007436752,-0.006858751177787781,-0.04083019867539406,0.05655331909656525,0.008272980339825153,0.11631464958190918,0.074026919901371,0.06220422685146332,-0.021789709106087685,-0.009333714842796326,-0.0003374115040060133,0.0496467761695385,0.0701918676495552,-0.00047629198525100946,-0.005259480327367783,0.04701933264732361,0.08660483360290527,0.06075333058834076,0.0215398408472538,-0.01657865382730961,0.030353771522641182,0.031567975878715515,-0.04723929986357689,0.08290106058120728,0.04836484417319298,-0.002356004435569048,-0.029223935678601265,-0.03281750530004501,0.06733983755111694,0.050812508910894394,-0.07252295315265656,-0.05844758823513985,0.024969130754470825,-0.0460338369011879,-0.05628877878189087,-0.04730542376637459,-0.05181653052568436,-0.02923913300037384,-0.0884561836719513,0.0472639761865139,0.024818265810608864,-0.01045180018991232,-0.024349665269255638,0.022571664303541183,0.14081330597400665,0.09802377223968506,-0.012999370694160461,-0.0313492976129055,0.0594426728785038,-0.0036369310691952705,-0.036022480577230453,0.13544028997421265,0.049817223101854324,0.038828615099191666
5GanJdbHlAA,2019-11-04T14:40:32Z,Docker vs Virtual Machine | simply explained || Docker Tutorial 6,n/a,-0.017633991315960884,0.08295097947120667,0.017170388251543045,-0.021315591409802437,0.04813172295689583,-0.03947388380765915,-0.05068137124180794,0.017994223162531853,-0.022315440699458122,0.052285246551036835,-0.0019607990980148315,-0.021297121420502663,0.006641161162406206,-0.11345656961202621,0.00006766030128346756,-0.07135312259197235,0.047821998596191406,0.03132316470146179,0.013779407367110252,0.06988976895809174,-0.054316431283950806,0.01849973574280739,-0.05866605043411255,-0.03800066560506821,-0.004343537148088217,0.09213639795780182,-0.04911692440509796,0.023888273164629936,0.025589434430003166,-0.01723458245396614,-0.043649621307849884,0.05003102496266365,0.04009220376610756,0.054672639816999435,0.016688643023371696,0.013325555250048637,0.04584402218461037,-0.023148303851485252,-0.07035870105028152,0.021303122863173485,0.009003721177577972,-0.12477429211139679,-0.057522568851709366,-0.0169486366212368,0.040736787021160126,0.026229050010442734,0.0032708896324038506,-0.0680161789059639,0.03699260205030441,0.07612079381942749,-0.08270470798015594,-0.049730412662029266,-0.004717085510492325,0.04686741158366203,-0.08116534352302551,0.04190438240766525,0.006723060738295317,0.0677129477262497,0.0010279716225340962,-0.013805115595459938,-0.002853416372090578,-0.0033539654687047005,-0.02806990034878254,0.0473458431661129,0.07603063434362411,-0.08491816371679306,0.022146062925457954,0.01657884381711483,0.0369906947016716,-0.06963539868593216,0.004626356530934572,0.01247013732790947,-0.011063105426728725,-0.041170984506607056,-0.09706451743841171,-0.06468719989061356,-0.05101284384727478,0.010417047888040543,0.005347561556845903,0.0863044336438179,-0.03308231756091118,0.04063418507575989,-0.05306876450777054,0.003077580127865076,-0.1354600042104721,0.044906001538038254,-0.01993013545870781,-0.024165986105799675,0.05963054299354553,-0.08232459425926208,0.07265184819698334,0.0035581437405198812,0.06822746992111206,0.053705308586359024,0.08887217938899994,0.004486325662583113,-0.008982897736132145,-0.0609210804104805,0.027386251837015152,-0.008294440805912018,0.029670657590031624,-0.02582491934299469,0.05024426057934761,-0.06540311872959137,0.09775089472532272,0.0418974831700325,-0.024087589234113693,-0.0274535920470953,-0.024207597598433495,-0.04517678916454315,-0.030700478702783585,-0.0300881490111351,0.000939593359362334,0.004364055581390858,0.024409139528870583,0.016086993739008904,0.021898392587900162,-0.018152950331568718,0.046499501913785934,-0.04089221730828285,0.03533368185162544,-0.05093379318714142,0.1265481412410736,-0.012599727138876915,-0.05868254229426384,-0.07367119193077087,-0.09287752211093903,-1.0602059974909647e-33,-0.0493687242269516,-0.08555976301431656,0.05586502328515053,-0.015690257772803307,0.17684756219387054,-0.036155108362436295,0.008323387242853642,-0.01842525601387024,-0.06196561083197594,0.045650020241737366,0.025619078427553177,-0.004539016168564558,0.05111263319849968,0.11508410423994064,0.1144576370716095,-0.07852812856435776,-0.09828299283981323,0.0033912858925759792,-0.06590329110622406,0.011945477686822414,0.04639144614338875,-0.009984420612454414,0.036757469177246094,-0.04209090396761894,0.046993449330329895,-0.039514604955911636,0.02878747507929802,-0.03549746051430702,-0.022354913875460625,-0.0073424531146883965,-0.06099369376897812,0.032752569764852524,0.04586794599890709,0.005275934934616089,-0.010656828060746193,0.046314653009176254,0.043944619596004486,-0.017089037224650383,-0.11511527001857758,-0.06667572259902954,-0.045944858342409134,-0.0038969500456005335,0.010553591884672642,-0.024199942126870155,0.05387716740369797,-0.024977141991257668,0.012945500202476978,-0.04559840261936188,0.008755455724895,0.0572640523314476,0.027871502563357353,-0.05945600941777229,-0.0608430914580822,0.025586456060409546,0.0033613406121730804,-0.03864174336194992,0.0317351296544075,0.0002650631358847022,-0.06300333887338638,0.06818629801273346,-0.0903424620628357,0.0025381140876561403,0.05637330934405327,-0.0047025177627801895,-0.04479193687438965,0.01905289851129055,0.004009309224784374,0.03466896340250969,0.03294602781534195,0.09756052494049072,-0.025619225576519966,0.04383103549480438,0.014565769582986832,-0.031734079122543335,0.009802993386983871,0.005899771116673946,-0.020048031583428383,-0.016553612425923347,-0.026353904977440834,-0.012010439299046993,0.00044803618220612407,0.04625080153346062,-0.027827832847833633,0.012020942755043507,-0.1031801849603653,-0.07319150120019913,0.024506743997335434,0.08388390392065048,0.05608320236206055,-0.012306160293519497,0.02418496273458004,0.009978961199522018,-0.003919237293303013,-0.014344125986099243,-0.05974650755524635,-2.208475990983704e-33,-0.013755423948168755,0.03959251195192337,-0.054710324853658676,0.0981583371758461,0.02891867235302925,0.012737820856273174,0.07727755606174469,-0.001964246854186058,-0.016775241121649742,-0.09791120141744614,-0.12871745228767395,0.05783810466527939,0.0004216207889840007,0.10363268852233887,-0.06237926334142685,0.03686876967549324,-0.011801558546721935,-0.10905372351408005,0.009258256293833256,-0.012306778691709042,0.017629100009799004,0.06404054909944534,0.027143308892846107,0.005387837067246437,-0.09712894260883331,-0.03063136897981167,0.04649342969059944,-0.04486628249287605,-0.05793525278568268,0.0023657912388443947,0.054400719702243805,-0.004915054887533188,0.0017277230508625507,0.017372630536556244,0.1082303375005722,0.0738360583782196,0.032037414610385895,0.06084837019443512,0.010825295001268387,-0.057786375284194946,0.03957524523139,-0.07433489710092545,0.004259985871613026,-0.046495191752910614,-0.042847227305173874,-0.02440248429775238,-0.004288097377866507,0.02644132636487484,-0.04088375344872475,-0.012298413552343845,-0.039484478533267975,-0.04318597912788391,0.013631417416036129,0.020132236182689667,-0.05645882710814476,-0.09989325702190399,-0.020777516067028046,0.03506745025515556,-0.07940954715013504,0.04294426366686821,0.0750143975019455,-0.030965587124228477,-0.006572756916284561,0.04955399036407471,-0.05756713077425957,0.003873825306072831,-0.0061163390055298805,0.0034429943189024925,-0.04791102185845375,-0.033221349120140076,-0.03849988430738449,-0.05217381939291954,0.01783526875078678,0.0216259453445673,-0.0036838396918028593,-0.03355902433395386,0.02860996685922146,-0.022013941779732704,-0.006931280717253685,0.006812140811234713,-0.08540233224630356,0.0026685616467148066,0.010385106317698956,-0.054042499512434006,-0.11605200916528702,0.10762439668178558,0.04930323362350464,-0.016937218606472015,0.01783877983689308,-0.02509886398911476,0.03596647083759308,-0.11673705279827118,-0.08311937749385834,0.08440049737691879,-0.04910397529602051,-1.8483804709035212e-8,0.03573457524180412,-0.010727874003350735,0.015944700688123703,-0.03848115727305412,0.01710754632949829,0.017284182831645012,0.032640401273965836,0.046657681465148926,-0.005603853613138199,0.05777575820684433,-0.00244694366119802,-0.02049778215587139,-0.09883624315261841,0.009696519933640957,0.07102658599615097,0.1512654423713684,-0.02329406701028347,0.061325203627347946,-0.007953465916216373,-0.020165378227829933,0.043795689940452576,0.037665463984012604,0.04279524087905884,-0.04470939189195633,-0.014700382016599178,0.05169495567679405,0.050711289048194885,0.08971792459487915,-0.05563487112522125,0.011367960833013058,0.07529225200414658,0.0274366308003664,-0.14293180406093597,0.02031783200800419,-0.03516180068254471,-0.03966546803712845,-0.051716096699237823,-0.05820201337337494,0.0009515625424683094,-0.02422521263360977,-0.08638094365596771,-0.051954519003629684,0.0070038167759776115,-0.05235709622502327,-0.000595867692027241,0.029838930815458298,0.02110452950000763,-0.07856208086013794,-0.04319668561220169,0.019083186984062195,0.05418869107961655,0.02245134674012661,0.044019490480422974,0.03991081565618515,0.06563781946897507,0.044282108545303345,0.022908436134457588,0.013132854364812374,0.06176252290606499,0.024571208283305168,0.03839617967605591,0.08262355625629425,0.062095195055007935,0.07547160983085632,-0.10872815549373627,0.01804635114967823,0.0031753364019095898,-0.023480920121073723,-0.10565602034330368,-0.017605097964406013,0.02113901823759079,-0.062276531010866165,-0.006129288114607334,-0.027290228754281998,0.03299836441874504,-0.07034050673246384,-0.030388828366994858,0.03816325590014458,-0.02868160977959633,0.04043757542967796,-0.0341818742454052,-0.06112542748451233,0.02298688516020775,-0.041880760341882706,-0.060098472982645035,0.0817946195602417,0.02589678019285202,0.025350721552968025,0.03237202763557434,-0.06574047356843948,-0.021270135417580605,0.07571571320295334,0.02394203096628189,-0.06444365531206131,0.060797736048698425,0.09484400600194931,0.06343401968479156,0.010689035058021545,0.016850480809807777,-0.07538625597953796,0.02760579250752926,-0.03233662620186806,0.015897180885076523,-0.009261245839297771,0.012005910277366638,-0.02374020591378212,0.01966571994125843,0.08117544651031494,-0.007646879181265831,0.04749166965484619,-0.06983812153339386,-0.022080734372138977,-0.04735517129302025,0.05255373939871788,0.022052297368645668,0.005830696318298578,-0.04566130414605141,-0.056362904608249664,-0.003131282050162554,0.04945335164666176,-0.07196083664894104,-0.04104187339544296,-0.0016721651190891862,0.05104338005185127,-0.02490238845348358,0.041076887398958206,0.006278784014284611,0.01637059822678566,0.14084145426750183,0.025159355252981186,0.008225302211940289,0.03810100257396698,-0.0005717980093322694,-0.004784219898283482,-0.0382402129471302,-0.009962974116206169,-0.005714289378374815,0.038823794573545456,0.0076314168982207775,-0.03199753910303116,-0.05471157282590866,0.017264289781451225,0.07322850078344345,0.006006586831063032,-0.01413636188954115,0.10438236594200134,-0.04999920353293419,0.05188915133476257,0.017297273501753807,-0.03301335871219635,0.02514844387769699,0.002119677374139428,0.016971498727798462,0.009261349216103554,-0.09161171317100525,0.01994757540524006,0.1293511539697647,-0.01352318748831749,0.04442634433507919,-0.02570105716586113,-0.01408315822482109,0.054814714938402176,-0.09340620040893555,0.19236361980438232,0.025255857035517693,0.08581169694662094,-0.05779462307691574,0.06139237806200981,-0.02205803617835045,0.06980325281620026,-0.013780311681330204,0.07071679830551147,0.050419457256793976,0.025687681511044502,-0.01621270179748535,-0.0230608768761158,-0.040626343339681625,-0.03811502084136009,0.004176853224635124,-0.0369131825864315,-0.037477586418390274,0.015869349241256714,0.04576130956411362,-0.0007423779461532831,-0.02666698396205902,0.009306996129453182,-0.03606246039271355,0.026041749864816666,0.03249230235815048,-0.03767555579543114,-0.005939441733062267,-3.297942706096024e-33,0.06158597394824028,0.027554618194699287,0.025408416986465454,0.043052949011325836,0.03824468329548836,0.06535211205482483,-0.028709452599287033,-0.05057201534509659,-0.03355903923511505,-0.03329326957464218,-0.07899560034275055,0.03110598213970661,-0.03202495723962784,-0.05319560319185257,0.0653759092092514,0.010029301047325134,0.05270256847143173,-0.004785861354321241,-0.0742625892162323,-0.033633992075920105,-0.034567661583423615,0.04784192517399788,0.008662831038236618,0.08324891328811646,-0.09019385278224945,-0.010244502685964108,-0.014199182391166687,-0.09097016602754593,0.0015372890047729015,0.024694619700312614,0.002948053879663348,-0.0017702835611999035,0.0015362015692517161,-0.08361010253429413,0.03133009001612663,-0.13156041502952576,0.05115159600973129,0.0002567861520219594,-0.00046254368498921394,-0.03776420280337334,-0.09175495058298111,0.06825587898492813,-0.02518303319811821,0.08074130117893219,-0.021873587742447853,0.09234017133712769,0.05223876237869263,0.0246351920068264,-0.0002842422400135547,-0.005449275951832533,0.04834761470556259,-0.06913839280605316,-0.05107124522328377,-0.01312760915607214,0.02666422538459301,-0.044306594878435135,-0.05589950829744339,0.037057846784591675,-0.027728235349059105,0.02916414849460125,0.11149550974369049,0.026241211220622063,-0.03528106212615967,0.0005367175908759236,-0.12786924839019775,-0.04177451878786087,-0.02211381122469902,0.042898599058389664,0.08833865076303482,-0.025131670758128166,-0.04271107539534569,0.00917971320450306,0.1557210385799408,-0.025732535868883133,-0.06722912192344666,-0.06374631822109222,-0.06636255979537964,0.017023498192429543,-0.01332932524383068,-0.01934274472296238,0.003402245230972767,0.048733003437519073,-0.05610031262040138,0.00017110552289523184,0.05990929529070854,-0.01053557451814413,0.008532179519534111,-0.03422243520617485,0.046343833208084106,-0.08681537210941315,0.010844829492270947,0.019196325913071632,0.0428810641169548,-0.12533697485923767,0.05707813426852226,1.6598814099915814e-33,0.03797295689582825,0.0023672645911574364,-0.06007532775402069,0.04608943313360214,-0.08811966329813004,0.001762411673553288,-0.08214490860700607,-0.014226820319890976,-0.08614431321620941,0.029170595109462738,0.02041579782962799,0.02265826426446438,0.09862939268350601,-0.009243766777217388,0.05888409540057182,0.02828790992498398,0.06411995738744736,-0.03065435215830803,-0.008569563739001751,0.05118709057569504,-0.08794944733381271,0.024862773716449738,0.013471163809299469,0.006120588630437851,-0.01689857244491577,0.06443450599908829,0.03021894581615925,0.144956573843956,-0.011835181154310703,-0.02407868765294552,-0.017561160027980804,-0.01772409863770008,-0.006153499241918325,-0.05893758684396744,0.051163412630558014,0.06665625423192978,0.07302781194448471,0.028962502256035805,-0.05970075726509094,0.02661396749317646,0.06127060949802399,0.02426631934940815,0.04022457078099251,0.10993476957082748,-0.016310323029756546,-0.02400677464902401,0.042877521365880966,0.005934999790042639,0.06689700484275818,0.009754793718457222,-0.10104423761367798,-0.06255952268838882,0.0199327003210783,-0.036749303340911865,-0.06724131107330322,0.07507246732711792,-0.023295072838664055,0.021211791783571243,0.020999375730752945,-0.011626633815467358,0.007143945898860693,0.03879190981388092,-0.0376238189637661,0.008850396610796452,0.011596784926950932,-0.06808196008205414,-0.05153588205575943,0.04096004739403725,0.0022930139675736427,-0.05683998018503189,0.09884702414274216,0.03704235330224037,-0.05066157132387161,0.013436608947813511,-0.051017243415117264,-0.10549827665090561,-0.009162035770714283,-0.006253629457205534,-0.04194772616028786,0.0004670121124945581,-0.1772805005311966,0.016503384336829185,0.015897216275334358,-0.034952130168676376,0.01893036626279354,0.03949272632598877,0.06275584548711777,-0.0647420585155487,0.0012954031117260456,0.0003517312870826572,0.04306760057806969,-0.05785125494003296,0.04723620414733887,0.031154043972492218,-0.01060287095606327,-1.6754970744159436e-8,0.043796438723802567,0.021296098828315735,0.023375097662210464,-0.0157339945435524,0.07997916638851166,0.043303269892930984,-0.040820859372615814,-0.10320519655942917,0.025713911280035973,0.03739866241812706,-0.009069637395441532,0.001078709727153182,-0.04906991496682167,0.0794825404882431,-0.010712814517319202,0.004979569464921951,0.05738839879631996,0.06770030409097672,-0.07652382552623749,-0.025349145755171776,-0.08211727440357208,0.01798938773572445,-0.0021203786600381136,0.0006743831909261644,-0.0716361328959465,0.051402557641267776,-0.08758736401796341,0.03708290308713913,-0.02618039958178997,-0.012122688814997673,-0.037395771592855453,0.029911741614341736,0.023029319941997528,-0.07123218476772308,0.02305792272090912,-0.020025106146931648,0.11643563956022263,0.005844128783792257,0.06271247565746307,0.06337108463048935,-0.033478617668151855,-0.033082105219364166,0.029592715203762054,-0.03742749243974686,-0.06355024129152298,-0.04295218735933304,-0.010191659443080425,-0.07724415510892868,0.027434729039669037,0.033468011766672134,0.003764929948374629,-0.047799717634916306,0.03476670756936073,0.07392431795597076,0.019570883363485336,-0.08171538263559341,0.02786971628665924,-0.004757221322506666,-0.014762664213776588,-0.04444041848182678,0.03716908022761345,0.019304370507597923,-0.053200237452983856,0.04567080736160278
tLK9nNFHWH8,2019-10-28T21:53:35Z,Debugging Docker Containers with docker exec and docker logs || Docker Tutorial 5,[Music] so so far we have seen a couple of basic docker commands we have seen dr. pool which pulls the image from the repository to local environment we also saw run which basically combines docker pool and docker start pulls the image if it's not locally available and then starts it right away then we saw dock a start and a stop which makes it possible to restart the container if you made some changes and you want to create a new version which makes possible to restart the container if you need to we also saw docker run with options the one option that we saw was D minus T which is detach so you can run the container djay detached mode so you can use terminal again - P allows you to bind port of your host to the container so very important to remember - P then comes the port of your host and then comes the port of your container whatever it might be we also saw dr. PS dr. PS - a which basically gives you all the containers no matter if they're running currently or not we also saw docker images which gives you all the images that you have locally so for example if after a couple of months you decide to clean clean up your space and get rid of some stale images you can actually check them check the list and then go through them and delete them you can do the same with stale docker containers that you don't use anymore or you don't need it anymore you can also get rid of them so the final part of the docker basic commands are commands for troubleshooting which are very very useful if something goes wrong in the container you want to see the locks of the container or you want to actually get inside of container get the terminal execute some comments on it so let's see dr. PS we have two containers running right now we don't have any output we don't see any logs here so let's say something happens your application cannot connect to Redis and you don't know what's happening so ideally you would want to see what logs Ready's container is producing right the way to do that is very easy you just say docker locks and you specify the container ID and you see the locks you can also do the lock logs if you don't want to remember the container ID or to dr. PS all the time you can remember the name of the container and you can get the logs using the name so a little side note here as we're talking about the names of the containers so here is you see when a container is created you just get some random name like this so you can name your containers as you want using another option of the docker run which might be pretty useful sometimes if you don't want to work with the container IDs and you just want to remember the names or if you just want to differentiate between the containers so for example let's create a new container from readies for the old image using a different name that we choose so I'm gonna stop this container and I'm going to create a new one from the same image so let's run it in the detached mode let's open the port 2000 1 2 6 3 7 9 and give the name to the container and let's go since it's the older version let's call it Redis older and we need to specify the image so remember this will create a new container since we're running the docker 1 command again so if we execute this and check we see the readies for the O image-based container is created which is fresh new you can see I created and the name is ready solder and we can do the same for the other container so that we kind of know which container is what so to stop this one and I will use the same command here this will be the latest and I will call this readies latest and since find another port so I'm gonna run it and let's see so here I have two containers running now I know Ready's older readies latest so for example if the older version has some problems I can just do logs readies older and I can get my locks so another very useful command in debugging is docker exec so what we can do with docker exec is we can actually get the terminal of a running container so let's check again we have two containers running and let's say there is some problem with the latest Redis latest container and I want to get a terminal of the container and - maybe navigate a directory inside check the lock file or maybe check the configuration file or print out the environmental variables whatever so in order to do that we use docker exit command with minus T which stands for interactive terminal then I specify the container ID and I say in flash so I get that - and here you see that the cursor changed so I'm inside of the container as a root user and here if I say LS okay the data is empty I can also print out in which directory I am can go to the home directory see what's there so I have my virtual file system inside of a container and here I can navigate the different directories and I can check stuff I can also print all the environmental variables to see that something is set correctly and do all kinds of stuff here and this could be really useful if you have a container with some complex configuration or if for example you are running your own application that you wrote in a container and you have some complex configuration there or some kind of setup and you want to validate that everything is correctly set in order to exit the terminal use the exit and you're out you can also do the same using the name again if you don't want to work with the IDs and you just want to remember the names of the container to make easier you can do it we the name is well same thing since most of the container images are based on some lightweight linux distributions you wouldn't have much of the linux commands or applications installed here for example you wouldn't have curl or some other stuff so you were a little bit more limited in that sense so you can execute a lot of stuff from the docker containers for most of the debugging work it should be actually enough so the final part to review the difference between lock run and docker start which might be confusing for some people let's revisit them so basically docker run is where you create a new container from an image so docker run will take an image with a specific version or just latest right as a option or as an attribute with docker start you not working with images but rather with Tanner's so for example as we saw the Quran has a lot of options you specify with minus D and minus P the port binding and then you have this name of the container and all this stuff so basically you tell docker at the beginning what kind of container with what attributes name and so on to create from a specific image but once the container is created and you can see that using a command for example here the last ones that we created and if you stop it and you want to restart it you just need to use the command docker start and specify the container ID and when you started the container will retain all the attributes that we defined when creating the container using docker run so dr. Ron is to create a new container toku start is to restart a stopped container thanks for watching the video I hope it was helpful and if he was don't forget to like it this is a video series so I will create a new one every week so if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in the comment section below and I will try to answer them so thank you and see you in the next video,0.004576800856739283,0.07582612335681915,0.039017222821712494,0.02027706615626812,0.07372020184993744,-0.11219720542430878,-0.011497197672724724,-0.003925989847630262,-0.017385831102728844,0.09949915111064911,-0.005268446169793606,-0.10975339263677597,-0.023609407246112823,0.017663627862930298,-0.0670115053653717,-0.02877313829958439,0.013050333596765995,0.06238321587443352,0.006639346946030855,0.05643455684185028,-0.07071668654680252,0.05058402568101883,-0.07691159099340439,0.013251789845526218,-0.018997367471456528,0.02246197685599327,-0.06075674295425415,-0.08001790940761566,-0.05168292298913002,-0.012872913852334023,0.054667286574840546,-0.028499772772192955,0.058634236454963684,0.03345874696969986,0.06863908469676971,0.06523511558771133,0.11703411489725113,0.006046937312930822,-0.052387554198503494,-0.01766080968081951,0.02316867560148239,-0.043810367584228516,-0.02206847257912159,-0.020098412409424782,-0.024378078058362007,-0.08448424190282822,-0.03640896826982498,-0.04918253421783447,-0.02603316120803356,0.062075112015008926,-0.005294262431561947,-0.03895720839500427,0.045840390026569366,-0.07333852350711823,-0.008064053021371365,0.05148420110344887,0.011697357520461082,0.08431519567966461,0.07343396544456482,-0.001171462587080896,-0.016781343147158623,0.03950900584459305,-0.04021129757165909,0.00818990170955658,0.04245052486658096,-0.03434208407998085,0.0384489931166172,0.02413574792444706,0.01448000967502594,0.057451359927654266,-0.004454214125871658,-0.0225517638027668,-0.06281498819589615,-0.09687819331884384,-0.025501787662506104,0.09421871602535248,-0.020644603297114372,0.021389877423644066,-0.15188729763031006,-0.033287350088357925,-0.053319141268730164,-0.008095715194940567,-0.0056665074080228806,-0.04828491061925888,-0.015304110012948513,0.021602807566523552,-0.016119766980409622,-0.005446508061140776,0.09216746687889099,-0.0024784081615507603,0.00587838189676404,-0.028196750208735466,-0.06478509306907654,0.020243754610419273,0.09946028143167496,0.025541193783283234,-0.10154371708631516,0.018232261762022972,-0.0011090561747550964,-0.02012188732624054,0.00870056077837944,0.0014238936128094792,0.03905940055847168,-0.023295843973755836,0.08806363493204117,-0.01887945458292961,0.022029725834727287,-0.0350484699010849,-0.05126909911632538,-0.0750298798084259,-0.03689001128077507,-0.04713550582528114,-0.009988990612328053,0.07311563938856125,0.06946125626564026,0.014977234415709972,0.040073417127132416,-0.07859848439693451,0.008897993713617325,-0.061599306762218475,0.08316489309072495,0.012347811833024025,0.09282965213060379,0.03462376073002815,-0.014375867322087288,0.029956694692373276,-0.05861145257949829,1.1120530125439048e-33,0.025575270876288414,-0.10604705661535263,0.05990820378065109,0.08659069985151291,0.18082769215106964,0.0330924354493618,0.01187740545719862,-0.017897097393870354,0.021392807364463806,0.10700704902410507,-0.07155007869005203,0.039295099675655365,0.018810613080859184,-0.02744949981570244,0.06427185982465744,0.007495929021388292,-0.1292702853679657,0.00446702865883708,-0.039548419415950775,0.017247149720788002,0.03281344100832939,-0.08017867803573608,-0.08642735332250595,-0.06340611726045609,0.0070649804547429085,0.009935814887285233,0.0011058755917474627,-0.06482851505279541,0.050334107130765915,0.005574238486588001,0.024916499853134155,-0.0029295519925653934,-0.0017551201162859797,0.05431879311800003,0.006343112792819738,-0.008872097358107567,0.04727137088775635,0.0871724933385849,-0.06538365036249161,-0.012249226681888103,-0.06594161689281464,-0.0849393829703331,-0.012609174475073814,0.02285771071910858,0.005161104258149862,-0.06760862469673157,-0.05816328898072243,-0.0256819911301136,0.016583258286118507,0.041078418493270874,0.059389449656009674,-0.030021969228982925,-0.04810890555381775,-0.029118934646248817,0.031571585685014725,-0.02980467490851879,-0.03295063599944115,-0.051084183156490326,-0.02778296358883381,0.02775060385465622,-0.06999973207712173,0.09748093038797379,-0.013917147181928158,-0.06945423781871796,-0.015774065628647804,-0.009368298575282097,0.01638057269155979,0.08704403787851334,0.040284570306539536,0.07483494281768799,-0.01711156778037548,0.04336273670196533,0.10979129374027252,-0.0009025450563058257,0.062011342495679855,0.03995658457279205,-0.007944079115986824,-0.01183368545025587,-0.07044108957052231,0.04553745687007904,0.03569871187210083,-0.011506510898470879,-0.025812596082687378,0.009532597847282887,-0.06038574129343033,-0.013567289337515831,-0.011119572445750237,0.047638002783060074,0.043415311723947525,0.0721617192029953,0.021735573187470436,0.020835550501942635,-0.05305761471390724,-0.049995679408311844,-0.07685831189155579,-3.998429340642626e-33,0.005458170082420111,0.033804211765527725,-0.0385751947760582,0.01680520735681057,0.004802227020263672,-0.0050780680030584335,0.03366398811340332,0.021592648699879646,0.07879620790481567,-0.055313773453235626,-0.07864228636026382,-0.004011943470686674,-0.029786527156829834,0.12564222514629364,-0.06831377744674683,0.024959567934274673,-0.06248736009001732,-0.034446798264980316,0.06128740683197975,-0.1065281331539154,0.074466273188591,0.07791170477867126,0.037678614258766174,0.03192572668194771,-0.09446743130683899,-0.03452131524682045,0.07376853376626968,-0.015385787934064865,-0.06051285192370415,-0.036773569881916046,0.026086503639817238,0.026830103248357773,-0.0006235174369066954,0.11520541459321976,0.04452883452177048,0.003823318984359503,-0.022436145693063736,0.06560719758272171,-0.0343560092151165,-0.08091714978218079,0.015640027821063995,-0.021875126287341118,0.031177744269371033,-0.0018924889154732227,-0.047160129994153976,-0.014939611777663231,0.037612803280353546,-0.004637397825717926,-0.08151599019765854,0.010142969898879528,-0.04514497146010399,-0.01861577481031418,0.04681809991598129,0.024665074422955513,-0.06572672724723816,-0.06612403690814972,0.08742418885231018,0.007540815509855747,-0.07905670255422592,0.10999319702386856,0.06850478798151016,-0.00550571596249938,0.02405405044555664,0.024958690628409386,-0.031093841418623924,-0.06847452372312546,0.006930649746209383,0.02426697127521038,-0.0675307884812355,0.030105682089924812,0.08485053479671478,-0.07207348942756653,-0.09849978238344193,0.05539511889219284,0.016781842336058617,-0.004342619329690933,-0.06727538257837296,-0.0903823971748352,0.011102213524281979,0.0009342357516288757,-0.011510143056511879,-0.011073720641434193,-0.00832448247820139,-0.06102672219276428,-0.03295241668820381,0.003909816034138203,0.046711280941963196,0.05452899634838104,0.04240193963050842,0.0009720736998133361,0.028239471837878227,-0.05914387106895447,-0.052141834050416946,0.05626930668950081,0.02931894361972809,-2.1474557243550407e-8,0.03455581143498421,-0.021875275298953056,-0.07148388028144836,0.008041336201131344,-0.01395455189049244,0.034678321331739426,0.011017745360732079,0.06430763006210327,-0.03700907155871391,-0.023796476423740387,-0.0703258365392685,-0.041187822818756104,-0.08586245030164719,0.015815211459994316,0.02821715921163559,-0.003786045126616955,0.014597025699913502,-0.013454895466566086,0.031244924291968346,-0.10068995505571365,-0.012462344951927662,0.05587121471762657,0.0033534399699419737,-0.05221356451511383,-0.11690498888492584,0.014006714336574078,0.03498958423733711,0.07156956940889359,-0.04940784350037575,-0.042153291404247284,0.05911076068878174,0.045734260231256485,-0.07029368728399277,0.02018621191382408,-0.013530705124139786,0.0176712516695261,-0.023707212880253792,-0.05310021713376045,0.015097565948963165,-0.005290900357067585,-0.13959552347660065,-0.013875985518097878,0.023028409108519554,-0.07313032448291779,-0.051355160772800446,0.018627425655722618,0.03010299615561962,0.02507607638835907,0.009810333140194416,0.021569829434156418,0.038145214319229126,0.05563539266586304,0.023297112435102463,0.006018723361194134,0.040371816605329514,0.03478685021400452,0.022077526897192,-0.023569082841277122,0.019773300737142563,0.027808943763375282,0.014161610044538975,0.04682594910264015,0.007720666006207466,0.07370047271251678,0.06417132914066315,0.006455881986767054,0.022221604362130165,-0.03618671000003815,0.061766378581523895,-0.0022108652628958225,-0.02251499518752098,-0.011593719013035297,-0.0004079680657014251,0.03276143968105316,-0.02795473486185074,0.004956051241606474,-0.0022117886692285538,0.0034858337603509426,-0.0144364507868886,-0.0732446238398552,0.05908568203449249,0.06445322185754776,0.023193104192614555,0.03916694223880768,-0.14690177142620087,0.01130580622702837,-0.03287378326058388,-0.07266810536384583,-0.07131262123584747,0.07484368979930878,0.010000665672123432,-0.04410987347364426,-0.029577074572443962,-0.09588625282049179,0.006220954470336437,0.06622673571109772,0.009744311682879925,-0.06817694008350372,0.07333048433065414,0.1287924200296402,-0.006397651508450508,0.006538082845509052,-0.05935436487197876,-0.01703096181154251,0.08833030611276627,-0.08336837589740753,-0.021155383437871933,-0.03488285467028618,-0.03593234717845917,-0.055881913751363754,-0.07206989824771881,-0.08789525926113129,0.026131032034754753,0.02129931002855301,-0.0030424692668020725,-0.03655604273080826,-0.00480848690494895,0.04236055165529251,0.03250207006931305,0.042452264577150345,0.0788990780711174,0.07869367301464081,-0.005813166499137878,0.00005953208528808318,0.010623575188219547,0.06621377170085907,-0.034806475043296814,-0.006107029505074024,0.09681060165166855,-0.08555722236633301,0.022919604554772377,-0.001851819222792983,0.10168207436800003,-0.054624248296022415,-0.03772260248661041,0.025481514632701874,0.005851575173437595,-0.07825703918933868,-0.04055369272828102,-0.023560313507914543,0.047766201198101044,-0.024015534669160843,-0.07160085439682007,0.07556528598070145,0.06265530735254288,0.04314121603965759,-0.03643953800201416,-0.06666817516088486,-0.13221167027950287,0.04014960676431656,-0.005643113050609827,0.02201303467154503,0.09917692095041275,-0.10202103108167648,0.01041640155017376,-0.013918029144406319,-0.013192561455070972,-0.0182478204369545,0.07204969972372055,-0.008333071134984493,-0.03599103167653084,-0.04048996791243553,0.08044765144586563,0.04502822458744049,0.067362941801548,0.014179026708006859,0.0031302243005484343,-0.05984888970851898,0.060132820159196854,-0.07326604425907135,-0.04732241481542587,0.0018001524731516838,-0.028876693919301033,-0.018574301153421402,-0.03181709721684456,0.0023517999798059464,-0.055064402520656586,0.03780769556760788,0.013060654513537884,0.020927561447024345,0.0010125217959284782,0.002565057249739766,-0.01725456304848194,-0.03522126004099846,0.08241824060678482,-0.023030517622828484,0.11588077247142792,-0.02458096481859684,-0.045914024114608765,0.057777293026447296,-0.009261036291718483,2.1727108406759668e-33,0.03314797952771187,-0.10569066554307938,0.11387421935796738,0.043964412063360214,0.13953332602977753,-0.05413440242409706,0.01592341810464859,-0.013227831572294235,0.00481455260887742,0.010801193304359913,0.017474353313446045,0.021195529028773308,-0.05631742626428604,0.01641191355884075,-0.03809017688035965,-0.07474622875452042,-0.040759891271591187,0.001338695758022368,-0.0009921361925080419,-0.000055960321333259344,-0.010818211361765862,-0.038809824734926224,-0.053771279752254486,0.01194254495203495,0.13451075553894043,-0.056756775826215744,0.02355067990720272,0.036889925599098206,0.022584473714232445,-0.012289740145206451,0.026270274072885513,-0.026168253272771835,-0.03462226316332817,0.0007567025604657829,-0.045409735292196274,-0.031155426055192947,-0.014373952522873878,0.08815179020166397,-0.04960579425096512,-0.019663088023662567,0.0025808431673794985,-0.01416532602161169,0.011485693976283073,0.025976480916142464,0.036810580641031265,-0.13747911155223846,0.015614286065101624,-0.06524645537137985,-0.021767698228359222,0.06060260534286499,0.08011246472597122,-0.11634800583124161,-0.050536081194877625,0.01607677899301052,-0.09734153002500534,-0.05086278170347214,-0.0429670512676239,-0.014463221654295921,-0.002894666511565447,0.018076661974191666,0.008069925010204315,0.045316170901060104,-0.001976283499971032,0.005426143296062946,0.04123643785715103,0.04332999885082245,0.0007707934128120542,0.04442725330591202,0.04572734609246254,0.07451258599758148,-0.08082696795463562,0.024264873936772346,0.0024107531644403934,-0.006441176403313875,-0.009684104472398758,0.027460962533950806,-0.029093217104673386,-0.027092870324850082,-0.0678250789642334,0.0362936370074749,0.012179800309240818,0.061727799475193024,-0.10122425109148026,0.10444734245538712,-0.020370101556181908,-0.05100040137767792,0.04193387180566788,0.005518106743693352,-0.0013651471817865968,-0.027033234015107155,-0.006769426167011261,0.06460712850093842,0.034940093755722046,-0.014482013881206512,-0.014540210366249084,-4.396269526206675e-33,0.02892029844224453,-0.046723637729883194,-0.017533419653773308,-0.017349736765027046,-0.007249191869050264,-0.043528664857149124,0.042997900396585464,0.022263485938310623,-0.029754633083939552,-0.08752080053091049,-0.08524575084447861,0.031326036900281906,0.01070296112447977,0.03133272007107735,-0.11391433328390121,0.034154437482357025,-0.02269395813345909,-0.013519114814698696,-0.0379120297729969,0.09235595166683197,0.02480156719684601,0.025827566161751747,0.08025160431861877,0.012334535829722881,-0.1271773725748062,0.006752922665327787,0.08650120347738266,-0.007146499119699001,-0.04071126878261566,0.03279327601194382,0.0918070524930954,-0.0663546472787857,0.0703493133187294,0.03695819526910782,-0.007346390746533871,0.04277798533439636,0.014452550560235977,0.06521525979042053,-0.06148403510451317,0.02067561447620392,-0.003926694858819246,-0.014834375120699406,-0.04814041405916214,0.02277068980038166,-0.04982677847146988,-0.026107192039489746,-0.027638614177703857,-0.03849032148718834,-0.05668654665350914,0.02584127150475979,-0.052754536271095276,-0.07794775068759918,-0.025469984859228134,0.011515620164573193,-0.003922599367797375,-0.032857745885849,-0.03744278475642204,0.07228044420480728,-0.06968599557876587,0.019055424258112907,0.0847015380859375,-0.03334353119134903,-0.07931631058454514,0.02540758065879345,-0.08876781910657883,-0.0364387221634388,-0.005090029444545507,-0.008391886949539185,-0.09677168726921082,0.05220368877053261,0.01698744110763073,0.07188396155834198,-0.033329904079437256,0.06080147996544838,0.023346496745944023,-0.051596499979496,-0.048103999346494675,-0.05251758173108101,0.05705814063549042,0.03591140732169151,-0.001836853101849556,-0.017928818240761757,-0.007778357248753309,-0.09454883635044098,-0.000463193777250126,0.029425956308841705,0.058999426662921906,-0.01859894208610058,0.08206076174974442,-0.056358736008405685,0.01392886321991682,-0.054324787110090256,-0.06835625320672989,0.08487888425588608,0.008292445912957191,-5.914314726851444e-8,0.07462076842784882,-0.06124497205018997,0.022757859900593758,0.04806263744831085,0.0053479718044400215,-0.036429960280656815,0.04129935801029205,0.02507038041949272,0.041392408311367035,-0.020569181069731712,-0.08123447746038437,0.013999756425619125,-0.037159305065870285,-0.009751709178090096,0.016398752108216286,0.11018621921539307,0.08131491392850876,0.053585730493068695,0.007497585844248533,-0.0426924005150795,-0.07233280688524246,0.020038489252328873,0.07046195864677429,-0.011079158633947372,0.020691636949777603,0.037490684539079666,0.08740448951721191,-0.005006982013583183,0.004467406775802374,-0.013166970573365688,0.1057191789150238,-0.03856910765171051,-0.04975447803735733,0.05173837020993233,0.04519837349653244,-0.015209773555397987,-0.09152170270681381,-0.05760827660560608,0.0017265812493860722,0.012793965637683868,-0.0074974908493459225,-0.009461709298193455,0.005682917777448893,-0.05197499319911003,-0.06957567483186722,-0.03355150669813156,0.010299130342900753,0.004546106792986393,-0.04063018783926964,0.033036064356565475,0.055763524025678635,-0.006217675749212503,-0.026803033426404,0.018035776913166046,0.11517293751239777,0.10595139116048813,-0.0375015027821064,0.06628251820802689,0.016911931335926056,0.03880720213055611,-0.035392191261053085,0.07232584059238434,-0.014016472734510899,-0.02479330450296402
xGn7cFR3ARU,2019-10-28T21:05:09Z,8 Basic Docker Commands || Docker Tutorial 4,"[Music] so in this video I'm gonna show you some basic doc recommends at the beginning I'm gonna explain what the difference between container and image is because that's something a lot of people confuse then very quickly go through version intake and then show you a demo of how to use the basic docker comments commands that will be enough to pull an image locally to start a container to configure a container and even debug the container so with that said let's get started so what is the difference between container and image mostly people use those terms interchangeably but actually there is a fine difference between the two to see theoretically image is just the part of the container runtime so container is the running environment for an image so as you see in this graphic the application image that runs the application could be Postgres Reddy's some other application needs let's say a file system where it can save the log files or where it can store some configuration files it also needs some environmental configuration like environmental variables and so on so all this environmental stuff are provided by container and container also has a port that is binded to it which makes it possible to talk to the application which is running inside of a container and of course it should be noted here that the file system is virtual in the constant container so the container has its own abstraction of an operating system including the file system and the environment which is of course different from the file system and environment of the host machine so in order to see the difference between container and image in action let's head over to the talker hub and find example a Redis image another thing is that docker hub all the artifacts that are in the docker hub are images so we're not talking about containers here all of these things are images talker official image so we're gonna go ahead and pull a Redis image out of the docker hub to my laptop so you see the different layers of the image are downloaded and this will take a couple of minutes so once the download is complete I can check all the existing images on my laptop using docker images command so I see I have two images readies and Postgres with text image IDs and so on another important aspect of images is that they have texts or versions so for example if we go back to the dock hub each one each image that you look up in the docker hub will have many different versions the latest is always the one that you get when you don't specify the version of course but if you have a dependency on a specific version you can actually choose the version you want and specified you can select one from here so this is what you see here the tag is basically the version of the image so I just downloaded the latest and I can also see the size of the image so now to this point we have only worked with images there is no container involved and there's no Redis running so now let's say I need readies running so that my application can connect to it I'll have to create a container of the Redis image that will make it possible to connect to the Redis application and I can do it by running the Redis image so if I say docker run Redis this will actually start the image in a container so as I said before container is a running environment of an image so now if I open a new tab and do docker PS I will get stairs of all the running docker containers so I can see the container radius is running with a container ID based on the image of Redis and some other information about it for example the port that it's running on and so on so as you see here the docker run readies command will start the race container in the terminal in an attached mode so for example if I were to terminate this with a control C you see that Redis application stops and the container will be stopped as well so if I do docker PS again I see that no container is running so there is an option for docker run command that makes it able makes it possible to run the container in a detached mode and that is minus D so if I do docker run - t Redis I will just get the ID of the container as an output and the container will stop running so if we check again docker PS I see the container with the ID starting with 8 3 8 which is the same thing here is running so this is how you can start it in a detached mode now for example if you would want to restart a container because I don't know some the application crashed inside or some error happens so you want to restart it you would need the container ID so just the first part of it not the whole string and you can simply say doctor stop idea of the container and that will stop the docker container I think running if you want to start it again you can use the same ID to start the game so let's say you stopped docker container at the end of the day you go home you come back the next day open your laptop and you want to restart the stop container right so if you do dr. PS there is the output it's empty you don't see any containers so what you can do alternative to just looking up your history command-line history is you can do docker PS - a which will show you all the containers which are running or not running so here you see the container ID again and you can restart it okay so let's try another thing let's say you have two parallel applications that both use Redis but in different versions so you would need to read ease containers with different image versions running on your laptop right at different times maybe or at the same time so so here we have the latest one which is ready 5:06 and let's head over to the docker hub in select version let's say you need version 4.0 so remember the first time that we downloaded the Redis image we did dr. pol Redis however if you run docker if you use docker run with Redis image and the tech which was 4.0 it will pull the image and start the container right away after it so it does two commands basically in one so it's dr. pol that doctor start in one comment so if I do this it says it can find the image locally so it goes and pulls the image from the repository to my laptop and again we see some layers are downloaded and the container is started right away and now if I do dr. PS you see that I have two radiuses running so this is where it gets interesting now how do you actually use the any container that you just started so in this output we you also see the ports section which specifies on which port the container is listening to the incoming requests so both containers open the same port which is what was specified in the image so in the logs of the container you can see the information running mode standalone port six three seven nine so how does that actually work and how do we not have conflicts while both are running on the same port so to explain that let's head over to our slide and see how this works as you know container is just a virtual environment running on your host and you can have multiple containers running simultaneously on your host which is your laptop PC whatever you working on and your laptop has certain poe ports available then you can open for certain applications so how it works is that you need to create a so-called binding between a port that your laptop your host machine has and the container so for example in the first container part here you see container is listening on port 5000 and you bind your laptop's port 5000 to that containers now you will have conflict if you open to 5,000 ports on your hosts because you will get a message the port is already bound or is already in use you can do that however you can have two containers as you see in the second and third containers are both listening on port 3000 which is absolutely okay as long as you bind them to two different ports from your host machine so once the port binding between the host and the container is already done you can actually connect to the running container using the port of the host so in this example you are I you would have some F local host and then the port of the host and the host then we'll know how to forward the request to the container using the port binding so if we head back here you see that containers have their ports and their report running on the same one however we have made any binding between my laptop's ports and the container port and because of that the container is basically unreachable by any application so I won't be able to use it so the way we actually do that is by specifying the binding of the ports during the run command so I'm gonna break this and check that there is just one container running no I'm gonna stop the other one as well so we can start them in you okay so we see both containers are here so now we want to start them using the binding between the host and the container ports but again we have to read is's so we need to bind them to two different ports on my laptop so the way to do it is you do docker run and you specify with - P the port of the host that's the first one so let's go with 6000 it doesn't really in this case and the second one is the port that you're binding this tube which is the container port so we know the container port will be six three seven nine and this is where we bind our so my laptop's port 6002 and if I do this here so you know if I do  PS that's actually clean this here you see the binding here alright so your laptop's 6,000 port is bound to the containers six three seven nine so now let's do another thing and let's start it in a detached mode like this let's check again it's running again and now I want to start the second container that's clear this again so here you see it created a bunch of containers because when I specified different options with the port binding it actually created new containers that's why you see a couple of them over here so I'm gonna copy the image name with the tag for that o- p so for example if I were to do this now and I would try to run the other readies the second readies container with the same port on my laptop I would get an error saying port is already allocated so I can do six thousand one and run it again I'll run it in detached mode and if I go over here and say docker PS I see that i have two different Redis versions running both of them bound to different ports on my laptop and they the containers themselves listening to requests on the same port thanks for watching the video I hope it was helpful and if it was don't forget to like it this is a video series so I will create a new one every week so if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in the comment section below and I will try to answer them so thank you and see you in the next video",0.0005629295483231544,0.06274488568305969,0.054368071258068085,-0.006492013577371836,0.003020336152985692,-0.02415834739804268,0.011652141809463501,0.028096267953515053,-0.06651705503463745,0.060435980558395386,-0.017384888604283333,-0.0671592578291893,0.015391314402222633,-0.016498588025569916,-0.033750083297491074,-0.02108948305249214,-0.042983539402484894,0.06625811010599136,-0.04850028082728386,-0.0032678020652383566,-0.08466018736362457,0.020237036049365997,-0.030699357390403748,-0.03827928751707077,-0.04616297781467438,0.03362268954515457,-0.01649763621389866,-0.06985574215650558,0.011281134560704231,-0.03421826288104057,0.015740498900413513,0.034567125141620636,0.12523764371871948,0.011938590556383133,0.05814850330352783,0.08906768262386322,0.10330770909786224,0.008097789250314236,-0.05994778499007225,-0.005045727826654911,0.024472400546073914,-0.10369980335235596,-0.028942452743649483,-0.03512881323695183,-0.019064733758568764,-0.050209224224090576,-0.023357076570391655,-0.10801903158426285,0.07551972568035126,0.06551389396190643,-0.08522874116897583,-0.0850023403763771,-0.06338760256767273,-0.005799789912998676,0.022548310458660126,0.04276374727487564,-0.036229558289051056,0.08944430202245712,0.0583488903939724,-0.005404547322541475,-0.004531553480774164,-0.0068465168587863445,-0.048677388578653336,0.032234907150268555,0.06518352031707764,-0.08391018211841583,-0.03483769670128822,0.03544643521308899,0.011854157783091068,0.06593754887580872,-0.03248552978038788,-0.0213136225938797,-0.0490635447204113,-0.04934020712971687,-0.0345756933093071,-0.02902517467737198,0.0022805528715252876,0.03938697278499603,-0.09933234751224518,-0.012492727488279343,-0.06836076825857162,-0.040508195757865906,-0.010192136280238628,-0.03485707566142082,-0.08129466325044632,0.032064296305179596,-0.03983605280518532,-0.054270368069410324,0.10484302788972855,-0.06678825616836548,0.06025072932243347,-0.026242442429065704,0.028132634237408638,0.02557116188108921,0.048798833042383194,0.024786002933979034,-0.052901532500982285,-0.09610817581415176,-0.04492688551545143,0.024807728826999664,0.026169950142502785,-0.01613519713282585,0.013439620845019817,-0.0266439076513052,0.039733488112688065,-0.031121617183089256,0.0017626703483983874,-0.03322414681315422,-0.05220490321516991,-0.026625894010066986,-0.007482883520424366,-0.04441063851118088,-0.055096112191677094,-0.0197385735809803,-0.0006122901104390621,-0.01824350096285343,0.010734055191278458,-0.06820908933877945,0.061458177864551544,-0.013545180670917034,0.0352231040596962,0.011945157311856747,0.09656570851802826,-0.05075567588210106,-0.018381530418992043,-0.010809988714754581,-0.03482772409915924,3.6042959571277497e-34,0.08450130373239517,-0.08107291907072067,0.017187723889946938,0.07232561707496643,0.1527097374200821,-0.0073146820068359375,0.037788327783346176,-0.04227675497531891,-0.06109480559825897,0.07630634307861328,0.01072853896766901,0.014438447542488575,-0.029428405687212944,0.0797136053442955,0.019975988194346428,-0.07175631076097488,-0.035910822451114655,-0.020606838166713715,-0.021101372316479683,-0.03854251652956009,0.03526386246085167,0.02324714884161949,-0.028860319405794144,-0.029032625257968903,0.05734086409211159,0.018427610397338867,0.06664793938398361,-0.01036753412336111,0.06089406833052635,0.0010742276208475232,-0.009844374842941761,-0.016658641397953033,-0.004476064350455999,0.010339071974158287,0.04617101699113846,0.035876937210559845,0.0461043119430542,0.07124601304531097,-0.03646343946456909,-0.058779265731573105,-0.0747123658657074,-0.059163134545087814,0.004604249726980925,-0.029917361214756966,0.07760228216648102,-0.061590131372213364,-0.018542420119047165,-0.01124375406652689,0.06237305700778961,0.08462241291999817,0.017272882163524628,-0.051626257598400116,-0.02224140614271164,0.02308313176035881,-0.01943751983344555,-0.05410110950469971,-0.08532966673374176,0.018679087981581688,-0.03275873884558678,0.009360987693071365,-0.08437062799930573,0.07011481374502182,0.032923150807619095,-0.009477865882217884,0.006099317222833633,0.0345972441136837,-0.05800553783774376,0.06964452564716339,0.05752505362033844,0.09955941885709763,-0.040404047816991806,0.05566476285457611,0.04014647379517555,0.03032613731920719,0.012505792081356049,0.02375544048845768,-0.0069663082249462605,-0.01634247601032257,-0.02107897400856018,-0.0010522047523409128,-0.03432337939739227,0.055521465837955475,-0.013109243474900723,0.08511745929718018,-0.01667948253452778,-0.09066003561019897,0.08205080032348633,0.08053948730230331,0.02177133411169052,-0.004054992459714413,0.026993153616786003,0.01797209121286869,-0.026244934648275375,-0.059325605630874634,-0.07786862552165985,-3.906067443420657e-33,0.05113339424133301,0.07811789959669113,-0.08515551686286926,0.04443596303462982,-0.021845847368240356,0.0020883227698504925,0.09152206778526306,-0.01874728873372078,-0.008671398274600506,-0.09366746991872787,-0.10566208511590958,0.07526686042547226,0.039520230144262314,0.02808411791920662,-0.0689830482006073,0.034151408821344376,-0.05228018760681152,-0.052204035222530365,0.023396076634526253,-0.042733095586299896,0.0015339561505243182,0.015638601034879684,0.01585085317492485,0.08264248073101044,-0.06678078323602676,-0.07247643917798996,0.14132621884346008,0.001049734652042389,-0.02537175454199314,0.03435061126947403,0.06566260755062103,0.02971954643726349,0.022332973778247833,0.1389651894569397,0.01718173548579216,0.032993659377098083,0.04114806652069092,0.09851794689893723,-0.03043193556368351,-0.054556991904973984,0.04529678076505661,-0.10966964066028595,0.012690628878772259,-0.031204726547002792,-0.04710468649864197,-0.0005936753004789352,0.024651244282722473,-0.001686802483163774,-0.1563197821378708,0.012833322398364544,-0.04358050599694252,-0.1139465793967247,-0.032334282994270325,-0.029387203976511955,-0.008761863224208355,-0.06617874652147293,0.048156026750802994,0.012282383628189564,-0.004827287979424,0.05651847645640373,0.06353125721216202,-0.03087993711233139,0.02090447023510933,0.02692190743982792,-0.049892354756593704,0.012215289287269115,-0.06997793167829514,-0.009010409004986286,-0.12040477246046066,0.023184122517704964,0.013410217128694057,-0.05740002542734146,0.012930543161928654,0.01635815016925335,0.034716784954071045,-0.02643059380352497,-0.03282814845442772,-0.01609121449291706,0.025252433493733406,0.03227783367037773,-0.034868884831666946,0.01787199079990387,0.008084533736109734,-0.09448203444480896,-0.06691216677427292,0.029944557696580887,0.11214541643857956,0.05798216536641121,0.04703426733613014,0.009292039088904858,0.06420812755823135,-0.005614779889583588,-0.002591232769191265,0.086737260222435,-0.032766636461019516,-1.9587679034316352e-8,0.011018007062375546,-0.021972989663481712,-0.021895695477724075,-0.002843271940946579,-0.02495015226304531,0.001722728949971497,0.015789616852998734,0.03177439793944359,-0.012166684493422508,-0.024707837030291557,-0.018941964954137802,-0.01571250520646572,-0.09852883219718933,0.009558269754052162,0.05887859687209129,0.09785591065883636,-0.02339923195540905,-0.0012535471469163895,-0.00009781425615074113,-0.07182317972183228,-0.01912105455994606,-0.0022569166030734777,0.04472934827208519,-0.053557105362415314,0.026100631803274155,0.07487209141254425,0.008618254214525223,0.11200215667486191,-0.0072980099357664585,-0.02473326586186886,0.12616066634655,0.019098469987511635,-0.05145967751741409,0.002672744682058692,0.0284113809466362,-0.02636141888797283,-0.030429890379309654,-0.03978819027543068,0.027528688311576843,-0.01624213345348835,-0.08656833320856094,-0.056325849145650864,-0.032122232019901276,-0.07346028834581375,-0.0647076815366745,0.016180330887436867,-0.008784094825387001,-0.010499187745153904,-0.07677924633026123,-0.029842685908079147,0.020121099427342415,0.0038459503557533026,0.05900740250945091,0.017700359225273132,0.0873480886220932,0.08206728845834732,0.05253343656659126,-0.018611496314406395,0.02290048636496067,-0.0004147027211729437,0.009850519709289074,0.12156574428081512,-0.05078555643558502,0.01902512088418007,0.008959867991507053,0.023386819288134575,0.013876527547836304,-0.035997819155454636,0.11938982456922531,-0.019398249685764313,0.0274103544652462,0.05472957342863083,0.04420159384608269,0.009582988917827606,-0.019204944372177124,0.012958230450749397,0.010798160918056965,-0.04226589575409889,0.00024746963754296303,-0.07275019586086273,0.10795409977436066,-0.0330374576151371,-0.018590260297060013,0.05165523663163185,-0.02118401974439621,-0.037409745156764984,-0.030977653339505196,-0.059018705040216446,-0.05844194442033768,0.09907103329896927,-0.032670482993125916,-0.01850850135087967,0.02594778686761856,-0.037003252655267715,0.018461912870407104,0.08493807166814804,0.038550086319446564,0.005235893186181784,-0.024101438000798225,0.14270836114883423,0.06484853476285934,-0.04595181345939636,-0.0788208618760109,-0.03937666490674019,0.0046745785512030125,-0.021241430193185806,-0.028036296367645264,-0.006831070873886347,-0.05867191404104233,-0.08159086108207703,-0.01706218533217907,-0.10916873812675476,-0.060807518661022186,-0.022144751623272896,-0.08556941896677017,-0.00995496567338705,-0.036828361451625824,0.0021041997242718935,-0.02667487971484661,0.009779153391718864,0.04029625281691551,0.08391816914081573,-0.020656941458582878,0.07619412243366241,0.03107159398496151,0.023959141224622726,-0.008020925335586071,0.03310713544487953,0.14750024676322937,-0.06420019268989563,0.012658833526074886,-0.017177609726786613,0.059016574174165726,-0.16517455875873566,-0.04292825609445572,0.030395641922950745,0.014067146927118301,-0.08653859794139862,-0.08432479202747345,-0.04061155393719673,-0.01598798856139183,0.038468457758426666,-0.0673278346657753,-0.0035710057709366083,0.06348391622304916,0.08156629651784897,0.031994644552469254,-0.09004691243171692,-0.09053374826908112,0.07346240431070328,-0.013110839761793613,-0.002613640623167157,0.018612893298268318,-0.05538395047187805,0.011823388747870922,-0.02854432351887226,0.014267778024077415,0.021009935066103935,0.13508199155330658,-0.007095311768352985,-0.03162134811282158,-0.02023032307624817,0.06908251345157623,0.021775102242827415,0.02310987189412117,0.006328139454126358,0.0384729765355587,-0.02472318336367607,0.11201530694961548,-0.07225437462329865,-0.008912215940654278,-0.007447697222232819,-0.019610589370131493,-0.009557015262544155,-0.05132472142577171,-0.025223681703209877,-0.0536651611328125,0.03010576218366623,-0.024578923359513283,-0.09950502216815948,-0.05030668526887894,-0.058131635189056396,0.038050662726163864,0.0015812546480447054,0.07922317832708359,-0.0701436772942543,0.08274829387664795,-0.03255750611424446,0.014376557432115078,-0.054102823138237,-0.07223500311374664,3.8363393225817866e-33,-0.0011405153200030327,-0.12146082520484924,0.09388375282287598,0.02176528051495552,0.10245154052972794,-0.028845369815826416,0.00759097607806325,-0.025462597608566284,0.017101803794503212,0.05599929019808769,-0.038085952401161194,0.04403539001941681,-0.04399970918893814,0.10328848659992218,0.01093791052699089,-0.03318949043750763,-0.14722706377506256,0.039263784885406494,0.02568768709897995,-0.017452312633395195,-0.0013890221016481519,0.000675588904414326,-0.030641771852970123,-0.012980034574866295,0.12055782973766327,-0.05340571701526642,0.06284573674201965,-0.05735485255718231,-0.0034567636903375387,-0.002441993448883295,0.008225502446293831,-0.028946271166205406,0.0013212186750024557,0.034246038645505905,0.012299276888370514,-0.03689810633659363,0.003047368722036481,-0.00021955338888801634,-0.09074148535728455,-0.038026824593544006,0.001310390536673367,-0.006533816922456026,-0.005856127943843603,0.029266439378261566,0.00028988407575525343,-0.05744258314371109,-0.010101934894919395,-0.02710340917110443,-0.054103557020425797,0.030100252479314804,0.09508787095546722,-0.04376855120062828,0.004520573187619448,0.02307714894413948,-0.04092822223901749,-0.04927337169647217,0.03754207119345665,-0.06363742798566818,-0.010267587378621101,0.031616419553756714,-0.059748027473688126,0.05761320888996124,0.004253413528203964,-0.011609734036028385,0.019911741837859154,0.05477731302380562,0.03512934595346451,0.04220879077911377,0.039729733020067215,0.049402184784412384,-0.040714509785175323,0.019722716882824898,0.005686492193490267,0.004065138753503561,0.001310031278990209,-0.0054840464144945145,-0.03673310577869415,0.03182166814804077,-0.07840031385421753,0.06158829480409622,-0.05613873153924942,0.026993969455361366,-0.07283195853233337,0.013750715181231499,-0.12111049145460129,-0.03034053184092045,0.023084796965122223,-0.03392542898654938,0.02095891162753105,0.004919060505926609,0.0016650399193167686,0.1060466319322586,-0.02947968617081642,0.010827907361090183,0.006782050244510174,-6.087364351974419e-33,0.013163210824131966,-0.003927363082766533,-0.0348299965262413,0.0022013045381754637,-0.006927932146936655,0.0358104445040226,0.08265925198793411,-0.0054049864411354065,0.046268388628959656,-0.04764777421951294,-0.09264352172613144,0.048163581639528275,-0.0397869236767292,0.022250784561038017,-0.16377538442611694,-0.010952223092317581,-0.010056226514279842,-0.06492584943771362,-0.030445875599980354,0.03820399194955826,-0.04543866217136383,0.04845987260341644,0.057435292750597,0.0037416417617350817,-0.08992396295070648,0.02417466603219509,0.08671296387910843,-0.024067504331469536,-0.036849718540906906,-0.024458803236484528,0.08013351261615753,-0.06501742452383041,0.04491792991757393,-0.023979920893907547,-0.015771489590406418,-0.024805713444948196,-0.003872695378959179,-0.012650663033127785,-0.04591978341341019,-0.08021119982004166,0.031114712357521057,0.0020245411433279514,0.007823103107511997,-0.006272365339100361,-0.05540788173675537,-0.022984668612480164,-0.02776709385216236,-0.0477120578289032,0.009476571343839169,0.0026093770284205675,-0.0030812928453087807,-0.05062074586749077,-0.00025078110047616065,0.012861195020377636,0.015198769047856331,-0.056484155356884,-0.00888963881880045,0.05113411322236061,-0.060742635279893875,0.06285000592470169,0.15915250778198242,-0.010116136632859707,-0.038366153836250305,-0.023965371772646904,-0.068535216152668,-0.020653417333960533,-0.045843321830034256,-0.02976170741021633,-0.06817666441202164,0.047359734773635864,0.008507385849952698,-0.03933996334671974,0.011289135552942753,0.07568522542715073,0.015102156437933445,-0.03918622061610222,0.04567231237888336,-0.03481246158480644,0.023908670991659164,-0.03908313438296318,-0.05577569827437401,-0.004373169504106045,-0.0052744317799806595,-0.022204134613275528,0.015917036682367325,0.026928042992949486,0.016218509525060654,-0.049540285021066666,0.056348033249378204,-0.03758484870195389,0.01663990132510662,0.0019019099418073893,-0.10089361667633057,0.07448264956474304,0.04257400706410408,-5.959224225193793e-8,0.006317414343357086,-0.03147396445274353,0.03431279584765434,-0.0111008882522583,-0.07336415350437164,0.0418020598590374,0.08005715906620026,-0.004156759474426508,0.06635364890098572,0.015448475256562233,-0.045259855687618256,-0.06761663407087326,-0.12350479513406754,-0.044647544622421265,0.00015439280832652003,0.07626540213823318,0.023566167801618576,0.01630478724837303,0.010995926335453987,-0.02524050883948803,-0.05313090234994888,-0.03643714636564255,0.005221552215516567,0.030983511358499527,0.008179747499525547,0.03217937424778938,0.0569588877260685,0.044631898403167725,0.04637284204363823,-0.010770955123007298,0.06223705783486366,0.04084102064371109,-0.013407538644969463,0.04729236662387848,0.02544025518000126,-0.006252769846469164,-0.026976637542247772,-0.027409149333834648,0.002934820717200637,-0.031990014016628265,-0.04931975156068802,-0.0773373693227768,0.017694441601634026,-0.0724414512515068,-0.008713281713426113,-0.004012902267277241,0.022245144471526146,-0.0002815689949784428,-0.06473495066165924,0.1137569323182106,0.0375676266849041,-0.025490213185548782,-0.018086954951286316,0.08690295368432999,0.13726073503494263,0.05085258558392525,0.026643775403499603,0.0030980645678937435,0.08193036913871765,0.081219881772995,-0.013039655052125454,0.05768565088510513,0.0981985479593277,0.04496140033006668
wH9XesmPUOk,2019-10-24T16:07:04Z,How to install docker? Step by Step || Docker Tutorial 3,[Music] so in this video I will show you how to install darker on different operating systems the installation will differ not only based on the operating system but also the version of the operating system so you can actually watch this video selectively depending on which OS and the version of that OS you have I will show you how to find out which installation step applies to you in the before installing section which is the first one so once you find that out you can actually directly skip to that part of the video where I explain that into details I will put the mini locations of each part in the description part of the video and also I will put all the links that I use in the video in the description so that you can easily access them also if you have any questions during the video or if you get stuck installing the docker on your system please post your question or problem in the comment section so that I can get back to you and help you proceed or maybe someone from the community will so with that said let's dive right into it so if you want to install docker you can actually google it and you get an official documentation of docker it's important to note there are two editions of docker there is a community and Enterprise editions for us to begin with Community Edition will be just fine in the docker Community Edition tab there there is a list of operating systems and distributions in order to install docker so for example if we start with Mac we can click in here and we see the documentation of how to install it on Mac which is actually one of the easiest but we'll see some some other ones as well so before you install darker on your Mac or Windows computer there are prerequisites to be considered so for Mac and Windows there has to be some criteria of the operating system and the hardware met in order to support running if you have make go through the system requirements to see if your make version is actually supporting docker if you have windows then you can go to the Windows tab and look at the system requirements there or what to know before you install for example one thing to note is that docker natively runs only on Windows 10 so if you have a Windows version which is less than 10 then we docker cannot run natively on your computer so if your computer doesn't meet the requirements to run docker there is a workaround for that which is called docker toolbox that of docker you basically just have to install a docker toolbox that will become a sort of a bridge between your operating system and the docker and that will enable you to run docker on your legacy computer so if that applies to you then skip ahead in this video to the part where I explain how to install docker toolbox on Mac and on windows so let's install docker for Mac as we see here there are two channels that you can download the binaries from or the application from will go with a stable channel and other things you consider if you have an older version of Mac the software or the hardware please go through the system requirements to see if you can actually install docker so here there is a detailed description of what make version you need to be able to run docker and also you need at least 4 gigabytes of RAM and by installing darker you will actually have the whole package of it which is a darker engine which is important or which is necessary to run the docker containers on your laptop the docker command-line client which will enable you to execute some token commands docker compose if you don't know it yet don't worry about it but it's just technology to orchestrate if you have multiple containers and some other stuff that we're not gonna need in this tutorial but you will have everything in a package installed so go ahead and download the stable version well I already have darker installed from the edge channel so I won't be stalling it again but it shouldn't matter because the steps of installation are the same for both so once the docker dmg file is downloaded you just double click on it and it will pop up this window just drag the docker well up into the applications and will be installed on your Mac as the next step you will see docker installed in your applications so you can just go ahead and start it so as you see the docker sign or icon is starting here if you click on it you see the status that docker is running and you can configure some preferences and check the docker version and so on and if you want to stop talker or quited on your Mac you can just do it from here and importance may be interesting note here is that if let's say you download or install docker and if you have more than one accounts on your laptop you will actually get some errors or conflicts if you run docker at the same time or multiple accounts so what I do for example is that if I switch to another account where I'm also gonna need docker I quit it from here and then I started from from the other account so that I don't get any errors so that might be something you need to consider if you use multiple accounts so let's see how to install Tucker for Windows the first step as I mentioned before is to go to the before you install section and to see that your operating system and your computer meets all the criteria to run docker natively so if you are installing dog for the first time don't worry about most of these parts like doctor toolbox and doctor machine there are two things that are important one is to double check that your Windows version is compatible for docker and the second one is to have virtualization enabled virtualization is by default always enabled other than you manually disabled it so if you're unsure then you can check it by going to the task manager performance CPU tab and here you can see the status of the virtualization so once you have checked that and made sure this that these two prerequisites are met then actually you can scroll up and download the windows installer for from the stable channel once the Installer is downloaded you can just click on it and follow the installation wizard to install docker for Windows once the installation is completed you have to explicitly start docker because it's not going to start automatically so for that you can just go and search for the docker for Windows app on your Windows and just click on it and you will see the darker whale icon starting and if you click on that icon you can actually see the status that says Stoker is now up and running so this is basically it for the installation now let's see how to install Tucker on different Linux distributions and this is where things get a little bit more complicated so first of all you see that in this menu on the on the left you see that for four different Linux distributions the installation steps will differ but also for example if we just click on one two for the guide you can see that in the prerequisites section there is also differentiation between the versions of the same Linux distribution and there may be some even more complicated scenarios where the combination of the version of the distribution and the architecture it's running in also makes some difference in to how to setup docker on that specific environment because of that I can't go through a docker installation process of every Linux environment because they're just too many combinations so instead what we'll do is just go through a general overview of the steps and configuration process to get darker running on your Linux environment and you can just adjust it then for your specific setup so these are some general steps to follow in order to install docker on your Linux Linux environment first of all you have to go through the operating system requirements part on your on the relevant Linux distribution that applies for you a second step in the documentation to is to any sell old versions however if it's the first time you installing darker then you know I have to worry about that you also don't have to worry about the support its storage drivers and you can skip ahead to the part of installing darker Community Edition so for any Linux distribution here the steps will be or the options for installing docker will be the same so first option is basically to set up a repository and download the docker from install it from the dock repository the second option is to install the packages manually however I wouldn't recommend it and I think the documentation doesn't recommend it either because then you will have to do a lot of steps of the installation in the maintenance of the versions manually so I wouldn't do that the third one is just with the testing purposes it may be enough for the development purposes as well but I would still not do it which is basically just download downloading some automated scripts that will install and setup docker on your Linux environment however again I wouldn't go with it I would actually just do the first option which is just downloading the darker from the repository so in order to install darker using the first option which is downloading it from the Dockers repositories you have two main steps so the first one is to set up the repository which differs a little bit depending on which distribution you have and then install the docker seee from the repository so from Ubuntu and Debian the steps for setting up the repository are generally just updating your package and then setting up an HTTP connection with the repository and adding the Dockers official jpg key which only Ubuntu and Debian need you don't have to do this steps for CentOS and fedora there just have to install the required packages in the last step for setting up the repository is basically setting up the stable repository of docker which we saw previously on the overview that there are two channels which is a stable and edge here you always have to set up the stable repository optionally you can also set up the edge repository but I'll just do stable this time and here also something to notice depending on architecture you have to actually set it or you have to set that as a parameter when you setup the repository so if you have for example a different architecture you can use those steps to display the correct command for it and I guess that applies to other Linux distributions as well like for example here you also have the second tab where you see a separate comment for it so this steps should actually set up the repository so that as a next step you can then install the docker C from those repositories so installing docker from the setup repository is actually pretty straightforward the steps are same for or similar to all the distributions basically just update the app package and then you just say install docker seee so this command will just download the latest stock version if you want to install a specific one which you will need to do in a production environment then you can just provide a version like this you just say docker - EE equals some specific versions and using this command you can actually look up what versions are available in that repository that you just and with this command actually docker will be installed on your Linux environment and then you can just verify using sudo docker run hello world which is this demo image of docker you can verify that docker is running and this will start hello world docker container on your environment so as I mentioned previously for environments that do not support running docker natively there is an workaround which is called docker toolbox so darker Tool Works is basically an installer for darker environment set up on those systems so this is how to install darker toolbox on your Mac this is the whole package that comes with the installation of tako toolbox which is basically the darker command-line doctor machine docker compose basically all the packages that we saw in the native installation and in on top of that you also get the Oracle VM VirtualBox so in order to install the darker toolbox it's actually pretty straightforward on your on this website you can go to the toolbox releases we have all the list of latest releases you just take the latest release and here you see two assets this one is for Windows obviously and you just download the package for Mac and once it's downloaded you just click on it and go through the installation wizard leave all the options by defaults as they are do not change anything and after the installation we can just validate the the installation is successful and you can actually run docker so after seeing the installation was successful screen just go and look up in your Launchpad talk a QuickStart terminal and once you open it you should be able to run docker commenced and you can just try docker run hello world which should just start up or bring up this hello world docker container on your environment so now let's see how to install dr. toolbox on windows here is you that you get the whole package of docker technologies with the toolbox which are basically the same package which you get on the native docker installation and on top of that you get Oracle VM VirtualBox which is the tool that enables docker to run on an older system so before you install dr toolbox you have to make sure that you meet some of the preconditions number one you have to make sure your windows system supports virtualization and that virtualization must be enabled otherwise docker docker won't start so depending on which we version you have looking up or checking the virtualization status will be different so I just suggest you google it and look it up of how to find the virtualization status to see that it's enabled once you have that checked also make sure that your windows operating system is 64 bits so if those two criteria are met then you can go ahead and install the docker toolbox the place where you see the releases or the release artifacts is toolbox releases link here which I have opened so it's basically a list of the releases you just take the latest one which has two artifacts this is the one for Windows you just download this executable file click on it and go through the installation wizard once the installation is completed there just couple of steps here you can verify that docker was installed or the toolbox was installed by just looking up the docker a QuickStart terminal on your windows that it must be installed and once you click on it and open it you should be able to run docker commands in the terminal so the basic docker command that you can test will be docker run hello world which will just fetch this basic docker container from the public registry and run it on your computer if that command is successful it means that docker was successfully installed on your computer and now you can proceed with the tutorial thanks for watching the video I hope it was helpful and if he was don't forget to like it this is a video series so I will create a new one every week so if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in the comment section below and I will try to answer them so thank you and see you in the next video,-0.018769284710288048,0.05586053803563118,0.01755296066403389,-0.006251935381442308,0.027144161984324455,-0.026110269129276276,0.004712542984634638,-0.010162323713302612,-0.02105981856584549,0.044360045343637466,-0.007860401645302773,-0.08948995172977448,0.03653666749596596,-0.033533137291669846,-0.010592424310743809,-0.03025096096098423,-0.02511162869632244,0.09172128140926361,-0.003846373176202178,-0.006364124361425638,-0.04707157239317894,-0.019885824993252754,-0.048328571021556854,-0.07809112966060638,-0.008270069025456905,0.02078837901353836,-0.011478650383651257,-0.04366174712777138,0.01887773908674717,0.03105919063091278,0.0213256124407053,-0.02871321514248848,0.10467144101858139,0.018161889165639877,0.05125908553600311,0.00476932805031538,0.0778086706995964,0.014399154111742973,-0.06069556623697281,0.008221805095672607,0.017522025853395462,-0.10956823825836182,-0.013291862793266773,-0.04218316450715065,0.013936063274741173,-0.05274821072816849,3.7547920328506734e-6,-0.06064150109887123,0.07777851074934006,0.0127854123711586,-0.11751894652843475,-0.07000412046909332,-0.001735953032039106,0.013492699712514877,-0.022111861035227776,0.0317499153316021,-0.024215545505285263,0.09278177469968796,-0.004868906922638416,0.0026426829863339663,0.021823599934577942,-0.0262992475181818,-0.04499217867851257,0.04615524783730507,0.07393520325422287,-0.059019144624471664,-0.015719881281256676,0.00308034080080688,0.07661905884742737,0.010674030520021915,-0.041617002338171005,-0.037990763783454895,-0.05326991155743599,-0.11724003404378891,-0.058987028896808624,-0.02801491506397724,0.04553082212805748,0.0907854214310646,-0.08623181283473969,0.07413724809885025,-0.06727993488311768,0.008230036124587059,0.021103765815496445,-0.015877027064561844,-0.042862288653850555,0.012373336590826511,-0.02861909195780754,-0.03209630399942398,0.03542163968086243,-0.0687771588563919,0.04974551498889923,-0.003938064910471439,-0.04176906868815422,0.031078729778528214,0.05539405718445778,0.003437114879488945,-0.04562865197658539,-0.01669771783053875,-0.046553321182727814,0.015102604404091835,0.014858828857541084,-0.03639521822333336,0.032139215618371964,-0.058640044182538986,0.005250285845249891,0.009007321670651436,-0.0108335604891181,-0.014122099615633488,-0.010505042970180511,-0.002459754468873143,-0.04571335017681122,-0.06523679941892624,-0.015285968780517578,-0.009313034825026989,-0.039470989257097244,-0.002194429514929652,-0.0044497959315776825,-0.05974012240767479,0.04008316993713379,-0.07441094517707825,0.05418834090232849,0.008146664127707481,0.10501296818256378,-0.10185155272483826,-0.007447351701557636,-0.005799151491373777,-0.03963470086455345,-7.83355588366215e-34,0.005718838423490524,-0.06641971319913864,0.016898198053240776,0.02448396198451519,0.09852313250303268,-0.02268541418015957,0.006135430186986923,-0.06805214285850525,-0.050892334431409836,0.05444630980491638,0.02696295827627182,-0.059570834040641785,-0.025459924712777138,0.07454542070627213,0.028185484930872917,-0.10613050311803818,-0.09720548242330551,-0.01932419091463089,-0.03026123344898224,-0.0781605914235115,0.026150280609726906,-0.06494063138961792,-0.029397321864962578,-0.014329072088003159,0.014566074125468731,-0.015777625143527985,0.06921526789665222,-0.08913062512874603,0.010577206499874592,0.010441605933010578,-0.00030272151343524456,-0.01527409628033638,0.002748872386291623,0.006914730649441481,0.06207376718521118,0.017350250855088234,0.03722728043794632,0.07554226368665695,-0.012305858545005322,-0.02292538806796074,-0.02470547892153263,-0.08316561579704285,0.024701330810785294,-0.008768569678068161,0.10988834500312805,-0.024034656584262848,0.00777412299066782,-0.020122641697525978,0.09185587614774704,0.06260267645120621,0.06544122099876404,-0.12466690689325333,-0.05055173859000206,0.08370206505060196,-0.05234285071492195,-0.003888203762471676,-0.05491788685321808,-0.03207778185606003,-0.007209617644548416,-0.014087420888245106,-0.08417456597089767,0.05053671821951866,0.052060529589653015,0.013111832551658154,0.00025547758559696376,-0.000651795242447406,-0.05868306756019592,0.08983349800109863,0.059305306524038315,0.11981333047151566,0.017955493181943893,0.03763012960553169,0.054731324315071106,0.037194959819316864,-0.02549949288368225,0.012281978502869606,-0.025815337896347046,0.028063729405403137,-0.009726913645863533,-0.030675657093524933,-0.07947449386119843,0.009963669814169407,0.005627490114420652,0.07119231671094894,-0.04469364881515503,-0.07467053830623627,0.02918650023639202,0.0951252207159996,0.046492937952280045,0.0029108994640409946,0.03153000771999359,0.030825430527329445,-0.03717412054538727,-0.059947531670331955,-0.06749649345874786,-3.290771455872039e-33,0.0034997204784303904,-0.000914412725251168,-0.03683551028370857,0.015339218080043793,-0.023075632750988007,0.002611844101920724,0.05526518449187279,-0.026718968525528908,0.07676775753498077,-0.06015673652291298,-0.08711914718151093,0.08027667552232742,0.08253449201583862,0.053375210613012314,-0.04534619301557541,0.054622385650873184,0.012246543541550636,0.004942168481647968,-0.017597096040844917,-0.014757807366549969,0.057765621691942215,-0.01824256218969822,0.03119903989136219,0.04435211792588234,-0.10927501320838928,-0.10031648725271225,0.17089352011680603,-0.01507926732301712,-0.02113863080739975,0.0322343148291111,-0.00500263087451458,0.0337386280298233,-0.001168865361250937,0.06470546126365662,0.02742728218436241,0.053638722747564316,0.07008258998394012,0.04635297507047653,-0.056183427572250366,-0.09118037670850754,0.011257080361247063,-0.036164216697216034,-0.07594352215528488,-0.059520307928323746,0.03992009535431862,-0.012190121226012707,0.09035485237836838,-0.025955669581890106,-0.13886095583438873,0.025393612682819366,-0.05632494390010834,-0.09695729613304138,0.03318404033780098,0.0036920090205967426,-0.02823815681040287,-0.03685714676976204,0.07707495242357254,0.02912548929452896,-0.02689453214406967,0.06216201186180115,0.04628865793347359,-0.02132454514503479,0.05272945016622543,0.006300362292677164,-0.0004077547637280077,-0.0357082299888134,-0.06457093358039856,0.010734367184340954,-0.10497511178255081,0.03646859526634216,-0.023638827726244926,0.01384609006345272,0.052128128707408905,0.011267459951341152,0.0545831061899662,-0.013357238844037056,-0.027753129601478577,0.06271883100271225,0.022166725248098373,-0.03383583202958107,-0.04209520295262337,-0.023825829848647118,0.05546487495303154,-0.13834097981452942,-0.09386838972568512,0.004372747614979744,0.09909132868051529,-0.009718533605337143,-0.00316589861176908,-0.0671609416604042,0.03673163801431656,-0.026049712672829628,-0.026517046615481377,0.08478347957134247,0.046497639268636703,-2.1982158315836386e-8,0.016465885564684868,-0.04533533379435539,-0.027906378731131554,-0.013252225704491138,0.03366532549262047,0.051574159413576126,0.07396309822797775,0.05556850880384445,-0.013003122992813587,-0.044004835188388824,0.009060236625373363,-0.04427824169397354,-0.06717726588249207,0.021551840007305145,0.05201195180416107,0.09103099256753922,-0.06005914881825447,0.09260299056768417,0.0009827923495322466,-0.059971340000629425,0.01246203389018774,-0.04793602600693703,0.06945795565843582,-0.07420326769351959,0.061498645693063736,0.05223723500967026,0.03677431121468544,0.0802343562245369,-0.01637597568333149,-0.038005731999874115,0.042155928909778595,0.004375757649540901,-0.10996796935796738,0.017849929630756378,0.0370069183409214,-0.0041805654764175415,-0.030780524015426636,-0.006219056900590658,0.018863407894968987,-0.047508031129837036,-0.0780298262834549,0.06487126648426056,-0.0030014871153980494,-0.0834997370839119,-0.024569060653448105,0.036670830100774765,-0.03500647842884064,-0.02939736843109131,-0.07598470151424408,0.033773377537727356,0.10040290653705597,-0.015581393614411354,0.04591722786426544,0.005654009059071541,0.06623107939958572,0.06669019162654877,0.006215651985257864,0.02226385846734047,0.008812869898974895,-0.016862865537405014,0.055464066565036774,0.12282881885766983,0.000593791191931814,0.03896703943610191,0.06550783663988113,0.010900532826781273,0.0663158968091011,-0.059903018176555634,0.08830522000789642,-0.009041844867169857,-0.031264528632164,0.014965105801820755,0.010526291094720364,-0.06295864284038544,0.029943501576781273,-0.07928226888179779,-0.037308331578969955,-0.043925464153289795,-0.0322042740881443,-0.002721309196203947,0.06252904236316681,0.04906630888581276,-0.06297819316387177,-0.014055083505809307,-0.008937371894717216,-0.06567029654979706,-0.058618057519197464,-0.041645847260951996,-0.0645647719502449,0.0019488449906930327,0.0022704293951392174,0.06057809293270111,0.020825186744332314,-0.03450307250022888,0.016859350726008415,-0.006705333478748798,0.06105981394648552,0.01647932082414627,0.027674125507473946,-0.06828445941209793,0.030949199572205544,-0.025015735998749733,-0.11817371100187302,-0.024491380900144577,-0.010160569101572037,0.009835556149482727,0.016406415030360222,-0.034101977944374084,-0.05571872368454933,-0.04991530999541283,0.028557950630784035,-0.1176239624619484,0.02924516797065735,-0.009699461981654167,-0.05485203117132187,-0.04123694449663162,-0.004848669748753309,0.0002076120872516185,-0.08327966183423996,0.02409987896680832,0.03330370411276817,0.06116139516234398,0.044722676277160645,0.029275421053171158,0.06343847513198853,-0.10595916956663132,-0.015832971781492233,0.027400651946663857,0.0998755618929863,-0.05130599066615105,-0.040605831891298294,-0.06174596771597862,0.01254904642701149,-0.07772005349397659,-0.04615601897239685,0.0031135007739067078,-0.0004884334630332887,-0.050806812942028046,-0.10954959690570831,0.02020207978785038,0.05676179379224777,0.053968559950590134,-0.13285978138446808,-0.0037833426613360643,0.08810798823833466,0.053364336490631104,0.0684739425778389,-0.07707889378070831,-0.03173923119902611,0.01714431494474411,-0.021777132526040077,-0.04891742393374443,0.001725543406791985,-0.06448159366846085,0.003253294387832284,-0.0018630303675308824,-0.0012290743179619312,-0.025853829458355904,0.15450727939605713,-0.021721946075558662,0.033048201352357864,-0.06718786805868149,0.029929403215646744,0.07832754403352737,0.024801412597298622,-0.08085429668426514,0.06794784218072891,-0.039653051644563675,0.006224580574780703,-0.02062823250889778,-0.06820305436849594,0.045511625707149506,-0.026555592194199562,-0.06288240849971771,0.008175487630069256,-0.0230643842369318,-0.05171506851911545,-0.007124296855181456,0.006943325977772474,-0.025121405720710754,-0.01352534256875515,-0.02867158316075802,0.005197756923735142,-0.001919014030136168,0.06273744255304337,-0.0330485962331295,0.09062166512012482,-0.08087916672229767,0.02463322877883911,-0.01076809037476778,-0.0173125471919775,3.619436002942104e-33,0.06365007162094116,-0.07623147964477539,-0.03782520815730095,0.04833772033452988,0.15460841357707977,-0.002099356148391962,-0.0071164933033287525,-0.020815230906009674,-0.1101469174027443,0.013269418850541115,0.07165879011154175,-0.0732635036110878,-0.059315651655197144,0.016555221751332283,0.05722125619649887,-0.06095770746469498,-0.02658357098698616,-0.021548015996813774,-0.039885200560092926,-0.03359471261501312,0.012033614329993725,-0.010149214416742325,-0.0442320741713047,-0.06342040002346039,0.0008055164362303913,0.045758768916130066,0.054378364235162735,-0.06214115396142006,0.03791984170675278,-0.010415823198854923,-0.13061130046844482,-0.02963991090655327,0.03883342072367668,-0.01857098750770092,0.06521468609571457,0.02301306463778019,0.04687673598527908,0.0069220601581037045,-0.027615217491984367,-0.079304538667202,-0.009133613668382168,0.002930919174104929,-0.01749347895383835,0.030486837029457092,0.03719009459018707,-0.010115754790604115,0.06542778015136719,-0.021840522065758705,0.09960063546895981,0.0673404186964035,0.026746360585093498,-0.037781961262226105,-0.03390008956193924,0.0093996562063694,-0.021324990317225456,0.011634868569672108,-0.03277471289038658,-0.005879969336092472,0.06368175894021988,0.058256760239601135,0.0357380211353302,0.005916654597967863,0.030311977490782738,-0.06566956639289856,-0.010315364226698875,0.024745188653469086,0.004302451852709055,0.03058040514588356,0.05199669674038887,0.057668235152959824,-0.09714052081108093,-0.02912275306880474,0.1404663324356079,0.010646715760231018,-0.019927624613046646,0.059490032494068146,-0.08275464177131653,-0.0521850660443306,-0.015742933377623558,-0.014239712618291378,-0.07537136226892471,0.07966887950897217,-0.025687942281365395,0.06964166462421417,-0.06149767339229584,-0.05263913795351982,0.08158202469348907,0.003993330989032984,0.021282771602272987,-0.0057891239412128925,-0.03337414935231209,0.09664555639028549,-0.05362757295370102,0.0015447986079379916,0.05267157405614853,-6.881244012693851e-33,-0.012637501582503319,-0.03498031944036484,0.0032400095369666815,-0.034741830080747604,0.060505084693431854,0.06874354928731918,-0.0015095279086381197,-0.03713616728782654,0.07296328246593475,-0.006351521238684654,-0.00047947108396328986,0.018390873447060585,-0.029410500079393387,0.019614944234490395,-0.07609434425830841,0.0658944621682167,0.02977917157113552,0.05503302067518234,-0.02463485300540924,0.016142554581165314,-0.01935964822769165,0.0003995883744210005,0.0011011353926733136,-0.04678608104586601,-0.06427165865898132,-0.0697173923254013,0.13845571875572205,0.04665287956595421,-0.0001472168805776164,0.04093315824866295,0.036371249705553055,0.02404579520225525,-0.0394756905734539,-0.03588136285543442,0.028212770819664,0.038576725870370865,0.0697050541639328,0.0250522643327713,-0.0688040480017662,-0.12148434668779373,0.00178732187487185,-0.012009303085505962,-0.030090926215052605,-0.11903687566518784,0.008535457774996758,-0.00904508214443922,-0.0009883532766252756,-0.018283545970916748,-0.10952481627464294,-0.02252853289246559,0.0178208090364933,-0.12548473477363586,0.03814072906970978,0.022402053698897362,-0.01364272553473711,-0.04852508753538132,0.05622636899352074,0.05862991139292717,-0.004275472369045019,0.06360796838998795,0.05023614317178726,0.011937716044485569,-0.004517650697380304,-0.07518327981233597,-0.023679787293076515,-0.015068208798766136,-0.004261897876858711,-0.038815613836050034,-0.09280390292406082,0.035153571516275406,-0.054712098091840744,-0.024595845490694046,0.024526918306946754,0.0036269170232117176,0.12526831030845642,-0.015271184965968132,0.019802527502179146,0.017284465953707695,-0.004412995185703039,-0.06839625537395477,-0.0036420889664441347,-0.04751874506473541,0.056151509284973145,-0.047309987246990204,-0.002239752095192671,0.0009644859237596393,0.10842014104127884,-0.018956061452627182,-0.0017645918997004628,-0.06570994853973389,-0.002551070647314191,-0.023395003750920296,-0.038520075380802155,0.034659504890441895,0.033343374729156494,-6.377754147024461e-8,0.002995146904140711,-0.05640173330903053,-0.031388431787490845,0.013854671269655228,0.020430894568562508,0.0640794113278389,0.059161070734262466,0.0006512357504107058,-0.0024105533957481384,0.021358096972107887,0.014074034057557583,-0.0696713775396347,0.021428974345326424,-0.00937562808394432,-0.04092957451939583,0.16581451892852783,-0.05836993083357811,0.04540479555726051,-0.0031695624347776175,-0.03544650971889496,-0.003572015091776848,0.030774110928177834,0.12982295453548431,-0.05364709720015526,0.049847833812236786,0.04323551803827286,0.029826488345861435,0.034515392035245895,0.011425098404288292,-0.03266178071498871,0.009108075872063637,0.02030543051660061,-0.03412141278386116,0.01204969733953476,0.07539789378643036,-0.055227428674697876,-0.09969118237495422,0.06764833629131317,0.01427107211202383,0.018522677943110466,-0.03074868954718113,-0.03260985389351845,0.05636122450232506,-0.015032823197543621,-0.056241873651742935,0.004742193967103958,-0.038641754537820816,-0.020263895392417908,-0.04006263613700867,0.09786494821310043,0.012629368342459202,-0.05170465633273125,-0.04010632261633873,0.0819687768816948,0.06020047143101692,-0.010901745408773422,0.013259758241474628,0.06156880408525467,-0.03869963064789772,0.027999937534332275,0.030062489211559296,0.10357334464788437,-0.0030405796132981777,0.03415701538324356
GeqaTjKMWeY,2019-10-11T13:02:57Z,What is a Docker Container? Docker Demo || Docker Tutorial 2,[Music] now that you know what a container concept is let's look at what a container is technically so technically container is made up of images so we have layers of stacked images on top of each other and at the base of most of the containers you would have a linux-based image which is either Alpine with a specific version or it could be some other Linux distribution and it's important for those base images to be small that's why most of them are actually Alpine because that will make sure that the containers stay small in size which is one of the advantages of using container so on top of the base image you would have application image and this is a simplified diagram usually you would have this intermediate images that will lead up to the actual application application image that is going to run in the container and of course on top of that you'll have all this configuration data so now I think it's time to dive into a practical example of how you can actually use a docker container and how it looks like when you install it and download it and run it on your local machine so to give you a bit of an idea of how this works let's head over to docker hub and search for PostgreSQL so here which is a docker official image I can see some of the versions and let's say I'm looking specifically for older version I don't know 96 something so I'm going to pull that one so this is a docker repository so that I can actually go ahead and pull the image pull the containers from the repository directly and because it's a public repository I don't have to login to it I don't have to provide any authentication credentials or anything I can just get started with a simple docker command without doing or configuring anything 2x stalker hub so on my terminal I can just do docker pull I can even do docker run and then just copy the the image name and if I don't specify any version it will just give me the latest but I want a specific version so I'm just I'm gonna go with 9.6 actually just to demonstrate so I can provide the version like this with a column and I can start run so as you see the first line says unable to find image locally so it knows that it has to go to docker hub and pull it from there and the next line says pulling from library Posterous and here you see a lot of hashes that says downloading and the this is what I mentioned earlier which is docker containers or any containers are made up of layers right you have the linux image layer you have the application layers and so on so what what you see here are actually all those layers that are separately downloading from the docker hub on my machine right and each one is the the advantage of splitting those applications and layers is that actually for example if the image changes or I have to download a newer version of Postgres what happens is that the layers they're the same between those two applications two versions of Posterous will not be downloaded again but only those layers that are different so for example now it's gonna take around 10 or 15 minutes to download this one image because I don't have any Postgres locally but if I were to download the next version I will it will take a little bit less time because some layers already exist on my local machine so now you see that it's already logging because if this command that I ran here the docker run we the container name inversion it fetches or it pulls the the container but it also starts it so it executes the start script right away as soon as it downloads it and here you see the output of the starting of the application so it just gives some output about starting the server and doing some configuration stuff and here you see database system is ready to accept connections and won't you start it so now let's open the new tab and see with dr. PS command you can actually see all the running containers so here you see that Postgres 9:6 is running and it actually says image so this is another important thing to understand when we're talking about containers there are two def two technical terms image and a container and a lot of people confuse those two I think and there is actually a very easy distinction between the two image is the actual packaging so actually saw one of the previous slides so image is the actual package that we saw in one of those previous slides so the application package together with the configuration and the dependencies and all these things this is actually the artifact that is movable around is actually the image container is when I pull that image on my local machine and I actually started so the application inside actually starts that creates the container environment so if it's not running basically it's an image it's just an artifact that's lying around if I start it and actually run it on my machine it is a container so that is the distinction so here it says the active running containers with a container ID image that it's running from and some entry comments that it executed and some other status information so this means that PostgreSQL is now running on my local machine simple as that if I were an out to need let's say another version of Posterous to run at the same time on my local machine I could just go ahead and say let's go back and let's say I want to have nine point six and ten point ten running at the same time on my local machine I would just to run Postgres and run again it doesn't find it locally so it pushes and this is what I actually explained to you earlier because it's the same application but with just a different version some of the layers of the image are the same so I don't have to fetch those again because they are already on my machine and it just fetches the layers that are different so that saves a little bit of time and I think it's it could be actually a good advantage so now we'll wait for other image image layers to load so that we have the second Postgres version running and now you see I have phosphorous 9.6 running in this command line tab and I have Postgres version 10 point and running in the next one so I have two post-crisis with different versions running and I can actually output them here if both of them running and there's no conflict between those two like I can actually run any number of applications with different versions maybe of the same application with no problem at all and we're going to go through the how to use those containers in your application and the port configuration in some of the other configuration stuff later in this tutorial when we do a deep dive but this is just for you to get the first visual image of how docker containers actually work how they look like and how easily you can actually start them on your local machine without having to implement a specific version of post-chorus application and do all the configuration yourself thanks for watching the video I hope it was helpful and if it was don't forget to like it this is a video series so I will create a new one every week so if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in a comment section below and I will try to answer them so thank you and see you in the next video,-0.04686281085014343,0.08056458830833435,0.007140586618334055,0.035346537828445435,0.04074863716959953,-0.037015870213508606,0.054046113044023514,-0.0015649679116904736,-0.026203539222478867,0.022159993648529053,-0.022660911083221436,-0.007721363101154566,0.051411766558885574,-0.07609909027814865,-0.058404888957738876,-0.06313437968492508,0.03276732191443443,0.027328329160809517,-0.011127166450023651,0.026430966332554817,-0.04921328276395798,0.02362877130508423,-0.08433704823255539,-0.030056169256567955,-0.018724262714385986,0.0699775367975235,-0.03323429450392723,-0.04078499972820282,0.02640274353325367,0.009760702960193157,0.030196838080883026,0.0600743442773819,0.06927068531513214,0.037096407264471054,0.023870114237070084,0.06174073740839958,0.08228178322315216,-0.007756016682833433,-0.042757827788591385,-0.012681260704994202,0.001966784941032529,-0.13460494577884674,-0.039761580526828766,0.013911605812609196,-0.001342888455837965,-0.05044160783290863,-0.011421299539506435,-0.10371803492307663,0.012390341609716415,0.023729778826236725,-0.05456351861357689,-0.0541093610227108,-0.003432666650041938,0.002069557784125209,-0.027539849281311035,0.0708770826458931,-0.027899641543626785,0.07976645976305008,-0.007256283424794674,-0.003391678910702467,0.032342784106731415,-0.000937674951273948,0.015427662990987301,0.04817719757556915,0.11541811376810074,-0.08643060177564621,-0.028516210615634918,0.022912587970495224,0.059175360947847366,-0.09298404306173325,-0.017133766785264015,-0.007148125674575567,0.0008886902942322195,-0.013823934830725193,-0.02156032994389534,-0.08084169030189514,0.0018647832330316305,0.04306303709745407,-0.038864895701408386,0.09442918747663498,-0.021274609491229057,0.015040265396237373,0.01266629807651043,-0.05869240313768387,-0.11775220185518265,0.015039444901049137,-0.002895960584282875,-0.014315503649413586,0.023878496140241623,-0.05109445005655289,0.012756755575537682,-0.0017105225706472993,0.02862211875617504,0.03269040584564209,0.004135269671678543,-0.008543473668396473,-0.051876455545425415,-0.004296606406569481,0.0027793629560619593,0.010930093936622143,0.05543805658817291,-0.000498327543027699,0.06151547282934189,-0.05431057885289192,0.02158670499920845,-0.07061225920915604,-0.023984596133232117,-0.04756524786353111,0.028175082057714462,-0.017156366258859634,-0.053737279027700424,-0.04815329238772392,-0.05307769030332565,0.0067827156744897366,-0.031222302466630936,-0.035099465399980545,-0.024829404428601265,-0.05416107177734375,0.05208124592900276,-0.012294511310756207,0.07269193232059479,-0.030115881934762,0.07146762311458588,-0.08533681184053421,-0.02734253741800785,-0.006144192069768906,-0.06139766052365303,-2.0134034381487148e-33,-0.006402525585144758,-0.12147405743598938,0.023942235857248306,0.04778699949383736,0.1468544900417328,-0.014698403887450695,0.03598416969180107,-0.03606123477220535,-0.046800646930933,0.05671697482466698,-0.0013018918689340353,-0.014424284920096397,-0.004019438289105892,0.0949644148349762,0.029292220249772072,-0.08253590762615204,-0.14979687333106995,0.017590945586562157,0.01667160913348198,-0.03168536350131035,0.006435910705476999,0.02034992165863514,0.017173482105135918,-0.03844719007611275,0.06307025253772736,-0.0036690947599709034,0.0253293476998806,-0.09387178719043732,0.03832987695932388,0.009384055621922016,-0.02243092842400074,0.02180405706167221,-0.0018675730098038912,-0.0038477876223623753,0.02268156036734581,0.001026130630634725,0.050071507692337036,0.0025790338404476643,-0.06486646085977554,-0.04664308950304985,-0.06947395205497742,-0.08739455789327621,0.024027958512306213,0.017071116715669632,0.058909885585308075,-0.07230289280414581,0.002433991525322199,-0.04835525155067444,0.0014347166288644075,0.060654446482658386,0.028769323602318764,-0.1122862696647644,-0.0627395361661911,0.03860005736351013,-0.02867860160768032,-0.0035934308543801308,-0.030838994309306145,-0.017915721982717514,-0.040580980479717255,0.03252771124243736,-0.09313180297613144,0.019779041409492493,-0.011802726425230503,-0.014994294382631779,-0.006537461653351784,0.03514532744884491,-0.011994322761893272,0.053211938589811325,0.08276386559009552,0.141091451048851,-0.0076436810195446014,0.04082680866122246,0.0435483455657959,0.03835827857255936,0.006231910083442926,0.008857827633619308,-0.020221609622240067,0.020937159657478333,-0.045644428580999374,0.027598531916737556,-0.031244724988937378,0.0221035685390234,-0.032246485352516174,0.04870893061161041,-0.09523491561412811,-0.09597839415073395,0.004659104160964489,0.048164550215005875,0.030137240886688232,-0.03800305724143982,-0.0013158018700778484,0.04547092318534851,-0.06051848828792572,-0.022549737244844437,-0.03777134045958519,-2.48050668959909e-33,0.03688040003180504,0.032255224883556366,-0.11079256236553192,0.07345867902040482,0.021389253437519073,0.0012408411130309105,0.06696058064699173,0.016973290592432022,0.028949333354830742,-0.07198239862918854,-0.12102940678596497,0.04142634570598602,0.09002003073692322,0.1002974584698677,-0.09785941988229752,0.015260059386491776,-0.02914033643901348,-0.07079742103815079,-0.04012589529156685,-0.0028253381606191397,0.011935231275856495,0.02560999058187008,0.044821515679359436,-0.0038327767979353666,-0.09368100017309189,-0.05484424903988838,0.09572162479162216,-0.060006506741046906,0.023141691461205482,-0.012094848789274693,0.029209651052951813,-0.020840011537075043,0.04192502051591873,0.04139427840709686,0.04069738835096359,0.0345846526324749,0.03600388020277023,0.010577275417745113,-0.06031375750899315,-0.10014311224222183,0.01173913013190031,-0.03105045296251774,-0.002359772799536586,-0.031413350254297256,-0.03643770515918732,0.02098618820309639,0.030314069241285324,0.013009496964514256,-0.059409767389297485,-0.030702603980898857,-0.08891241252422333,-0.04412441328167915,-0.0024831111077219248,-0.009779902175068855,-0.01802813448011875,-0.07635781913995743,-0.04600297659635544,0.02546069212257862,-0.00031181942904368043,0.0833234116435051,0.09533792734146118,-0.008177243173122406,-0.009671744890511036,0.07421883940696716,-0.026110541075468063,-0.02135404571890831,-0.05113769322633743,0.0010833553969860077,-0.1096864566206932,0.017410272732377052,0.08712618052959442,-0.023062899708747864,0.022628962993621826,0.03919510170817375,-0.0013627578737214208,-0.0748453214764595,-0.008424299769103527,-0.004049952141940594,0.03419556841254234,-0.006007622927427292,-0.02887938730418682,-0.03605036064982414,0.03497123718261719,-0.055669013410806656,-0.05901716649532318,0.03124438226222992,0.09223467856645584,0.07399636507034302,0.004432817921042442,-0.025691350921988487,0.033926017582416534,-0.028861423954367638,-0.09222577512264252,0.1207224503159523,-0.01129408460110426,-2.263644383049268e-8,-0.010184919461607933,-0.006632867734879255,-0.046537045389413834,-0.0714104026556015,-0.04580165073275566,-0.006811169441789389,0.11867602169513702,0.05534541234374046,0.0016185293206945062,-0.021327942609786987,-0.029542649164795876,-0.04539768025279045,-0.09563345462083817,-0.05047091841697693,0.08555269241333008,0.09808831661939621,-0.00059388333465904,0.05702165886759758,0.006306772585958242,-0.04886395484209061,0.01606912910938263,-0.02860715612769127,0.0388839989900589,-0.053888145834207535,-0.0156297218054533,0.07870175689458847,0.060981396585702896,0.11475472897291183,0.019692888483405113,-0.07998818159103394,0.0577799528837204,0.040328994393348694,-0.051879726350307465,0.02659219317138195,0.010766219347715378,0.07356566935777664,-0.07151224464178085,-0.06540491431951523,0.015739766880869865,-0.02447885274887085,-0.08823558688163757,-0.008731216192245483,0.006923545151948929,-0.06586059927940369,-0.014683687128126621,0.07943951338529587,0.022771598771214485,-0.03145473077893257,-0.06456033885478973,0.015073148533701897,0.0919855535030365,0.018568584695458412,0.04800504073500633,0.020349277183413506,0.059351228177547455,0.08106455206871033,0.004707088693976402,0.0014877412468194962,0.023005308583378792,-0.013459042645990849,0.028950367122888565,0.15658314526081085,0.07441967725753784,0.035059645771980286,0.042087435722351074,0.023485053330659866,0.0027340580709278584,-0.020538106560707092,0.051221299916505814,-0.0005161662702448666,-0.03273625671863556,0.08630012720823288,0.02978530153632164,-0.021164892241358757,-0.047035977244377136,0.027411727234721184,0.05237243324518204,-0.07216814905405045,-0.0031991638243198395,-0.04721800610423088,0.05228925868868828,0.05140894651412964,0.0013854006538167596,-0.006433597765862942,-0.050689373165369034,-0.04451356828212738,-0.04636146500706673,-0.053943149745464325,-0.04420984536409378,0.13398784399032593,-0.06838025897741318,0.010132292285561562,0.036164768040180206,-0.057147521525621414,0.016383253037929535,0.07313768565654755,0.04412867873907089,0.015801141038537025,-0.041095439344644547,0.11841340363025665,0.02195378579199314,-0.06270772218704224,-0.08604069799184799,-0.0181447584182024,0.0299422275274992,-0.024702129885554314,-0.030395984649658203,0.007293873932212591,-0.025487486273050308,-0.07680357247591019,-0.04283367469906807,-0.05014792084693909,-0.011445705778896809,0.02150380238890648,-0.065260149538517,-0.04985900968313217,-0.03315480053424835,0.02497858926653862,-0.05340332165360451,0.03388720378279686,-0.022973090410232544,0.00984254851937294,-0.020797843113541603,0.04498413950204849,0.061711687594652176,0.011925834231078625,-0.008890584111213684,0.026595940813422203,0.1189243346452713,-0.02663102000951767,-0.005214899778366089,0.0009558406309224665,0.04672669619321823,-0.13552939891815186,0.028232455253601074,-0.007127546239644289,-0.006661990191787481,-0.09909671545028687,-0.08357629179954529,0.00045793841127306223,-0.022782599553465843,0.012722526676952839,-0.08945862203836441,0.026129791513085365,0.061349667608737946,0.11605862528085709,-0.0023455668706446886,-0.06538133323192596,-0.12669847905635834,0.014276036992669106,0.014598576352000237,-0.017582830041646957,-0.06803026795387268,-0.09318436682224274,0.030306776985526085,-0.07344168424606323,-0.01944831758737564,0.014034121297299862,0.11691790819168091,0.021077940240502357,-0.03198729082942009,-0.06291884183883667,0.07641182839870453,0.026005199179053307,0.06730114668607712,-0.0357365719974041,0.08876679092645645,0.004711362067610025,0.04617740586400032,-0.09235034137964249,-0.015461026690900326,0.012107260525226593,-0.022577615454792976,-0.019405074417591095,-0.04849536716938019,-0.04511534422636032,-0.05202539637684822,0.01666763611137867,-0.016638770699501038,-0.04450380802154541,-0.053891878575086594,-0.055387482047080994,0.022594118490815163,-0.0019020960899069905,0.03216460719704628,-0.05866909772157669,0.1120467409491539,-0.0369349829852581,0.032330986112356186,-0.021818064153194427,-0.09905219823122025,4.2309156746123806e-33,0.017079444602131844,-0.07125245034694672,0.08186725527048111,0.03336958959698677,0.12176057696342468,-0.04474888741970062,0.0018212865106761456,-0.03443010151386261,-0.006508002523332834,0.05655272305011749,-0.05235616862773895,0.10048067569732666,-0.048128340393304825,0.0988890528678894,0.01163824275135994,-0.055338770151138306,-0.11215728521347046,0.029431045055389404,0.03098389506340027,-0.018166424706578255,-0.01343576330691576,-0.023463167250156403,-0.01719529740512371,0.06969130784273148,0.06489397585391998,-0.01777266524732113,0.002414378570392728,-0.06617327779531479,-0.06740289181470871,-0.0058602807112038136,-0.002818932058289647,-0.014671038836240768,-0.04087449982762337,-0.025835905224084854,0.04215842857956886,0.02104889787733555,-0.04310010373592377,-0.0026644456665962934,-0.06403116136789322,0.008265849202871323,0.026121461763978004,-0.03122430108487606,0.005963471718132496,0.02189878188073635,0.04498698189854622,-0.008986575528979301,0.021262479946017265,-0.041580237448215485,-0.01941642537713051,-0.019147289916872978,0.10946889221668243,-0.020821548998355865,0.01432483084499836,0.029962651431560516,-0.011335440911352634,-0.030617203563451767,0.010373555123806,-0.024848980829119682,0.03287801891565323,0.07783298939466476,-0.07219358533620834,-0.020320100709795952,-0.019084827974438667,0.03296582028269768,0.003426209557801485,0.06906168162822723,0.008304121904075146,0.0383714884519577,0.05866141989827156,0.07984983175992966,-0.031762413680553436,0.043841779232025146,0.0016241443809121847,0.05236993730068207,-0.001582864671945572,-0.029196251183748245,-0.05252138152718544,0.02389414794743061,-0.04256463795900345,0.062540203332901,-0.031153110787272453,0.021408457309007645,-0.0592191107571125,0.018642893061041832,-0.09933215379714966,-0.0024135373532772064,0.051321499049663544,-0.03555198386311531,-0.0434645339846611,0.04520096257328987,-0.035406552255153656,0.11944267898797989,-0.002918446669355035,-0.014396344311535358,0.04562855884432793,-6.385812082072628e-33,0.017346108332276344,0.0036561598535627127,-0.004514473024755716,-0.03383515402674675,0.01541193202137947,0.04470358416438103,0.085244320333004,-0.005803008563816547,-0.0004304104659240693,0.012920496053993702,-0.08603554964065552,0.04123499244451523,0.03951938822865486,0.0034466441720724106,-0.15393973886966705,0.017323093488812447,0.015686292201280594,-0.08300519734621048,-0.013278953731060028,0.044315483421087265,-0.03862806037068367,0.039137862622737885,0.009782925248146057,0.03863632678985596,-0.011483363807201385,0.030002476647496223,0.0009779671672731638,-0.0530179888010025,-0.027119960635900497,0.010602379217743874,0.02499345690011978,-0.10710246860980988,0.0693315640091896,-0.031368475407361984,-0.033405981957912445,0.019306153059005737,-0.012830370105803013,0.028259236365556717,-0.016815345734357834,-0.0851169228553772,-0.017300643026828766,-0.0432603657245636,-0.0021831984631717205,-0.04104331508278847,0.0012883638264611363,-0.04992053657770157,-0.07395122945308685,0.014041303656995296,-0.038404129445552826,-0.05465388670563698,-0.0292439516633749,0.009366431273519993,-0.027402203530073166,-0.007333052810281515,0.0602165050804615,-0.03895796090364456,-0.03399636968970299,0.06287964433431625,-0.006301538553088903,0.056255023926496506,0.0908239334821701,-0.03323599696159363,-0.0125582842156291,-0.028834905475378036,-0.06413809210062027,-0.08225969970226288,-0.03164564073085785,-0.09210524708032608,-0.1275772750377655,0.0894785076379776,-0.030596645548939705,-0.014504311606287956,0.0629383996129036,0.06453703343868256,-0.010836244560778141,-0.02950361743569374,0.053026072680950165,0.02325505018234253,0.07499603182077408,-0.08168614655733109,-0.09206338226795197,-0.025732852518558502,0.021496359258890152,0.002293533179908991,0.035329412668943405,0.03745615482330322,0.09077776968479156,-0.055878669023513794,0.058236151933670044,-0.015813568606972694,0.03711974620819092,-0.01262962818145752,-0.08545108139514923,0.05470610782504082,0.03034449927508831,-5.464263708176986e-8,0.06201840192079544,-0.03259970247745514,-0.012242319993674755,-0.005143282935023308,-0.04613820090889931,0.020114751532673836,0.10446742177009583,0.020484235137701035,0.04258780553936958,0.01106054987758398,-0.03663717210292816,-0.03552215173840523,-0.09388219565153122,-0.02072909288108349,0.02437290921807289,0.1104382649064064,0.009278105571866035,0.015524341724812984,-0.013036711141467094,-0.022332921624183655,-0.055059123784303665,-0.02684079296886921,0.04900123178958893,0.06694801151752472,0.0349385142326355,0.03363276645541191,0.07514817267656326,0.009159734472632408,0.08777973800897598,0.0007920826901681721,0.0492478609085083,-0.03687368333339691,-0.025845980271697044,0.05225474014878273,0.07140538096427917,-0.008521303534507751,-0.0882335752248764,0.011578499339520931,0.0025599803775548935,-0.04051201418042183,-0.06330782175064087,-0.10481168329715729,0.03398142382502556,-0.05894334986805916,0.01153621356934309,0.02536441758275032,-0.061114903539419174,0.0494331493973732,-0.0429830439388752,0.11536912620067596,0.020847929641604424,-0.03327944129705429,-0.003647829405963421,0.10851342231035233,0.13315421342849731,0.057827141135931015,0.02760656177997589,-0.014398614875972271,0.04808539152145386,0.005692740436643362,-0.024334829300642014,0.04508516192436218,0.025603627786040306,0.007289759814739227
jPdIRX6q4jA,2019-10-11T13:01:36Z,What is Docker? Docker container concept explained || Docker Tutorial 1,[Music] hello and welcome to kubernetes tutorial kubernetes is an open source technology developed by google in order to make orchestrating containerized applications easier that's why an official definition of kubernetes is actually a container orchestration tool so as you can see containers are the base part of kubernetes technology so if you want to learn kubernetes you first have to understand what a container is and why we use them so in this video series we'll talk about container concepts and one of its most popular implementations which is Ducker so we'll talk about what a container is and what problems it solves we will also look at a container repository which is basically a storage for containers we'll see how container can actually make the development process much easier and more efficient and also how they solve some of the problems that we have in the deployment process of applications so let's dive right into it what a container is a container is a way to package applications with everything they need inside of that package including the dependencies and all the configuration necessary and that package is portable just like any other artifact is and that package can be easily shared and moved around between a development team or development and operations team and that portability of containers Plus everything packaged in one isolated environment gives it some of the advantages that makes development and deployment process more efficient and we'll see some of the examples of how that works in later slides so as I mentioned containers are portable so there must be some kind of a storage for those containers so that you can share them and move them around so containers leave in a container repository this is a specific this is a special type of storage for containers many companies have their own private repositories where they host or the way they store all the containers and this will look something like this where you you can push all of the containers that you have but there is also a public repository for docker containers where you can browse and probably find any application container that you want so let's head over to the browser and see how that looks like so if I here search for a docker hub which is the name of the public repository for Tucker I will see this official website so here if you scroll down you see that there are more than hundred thousand container images of different applications hosted or stored in this docker repository so here you see just some of the examples and for every application there is this official docker container container image but if you are looking for something else you can search it here and I see there's an official image for let's say Jenkins but there's also a lot of non official images or container images that developers or or even from Jenkins itself they actually store it here so public repository is where you usually get started when you're using or when you are starting to use the containers where you can find any application image so now let's see how containers improve the development process by specific examples how did we develop applications before the containers usually when you have a team of developers working on some application you would have to install most of the services on your operating system directly right for example you are developing developing some JavaScript application and you need a post Chris Kuehl and you need Redis for messaging and every developer in the team would then have to go and install the binaries of those services and configure them and run them on their local development environment and depending on which operating system they're using the installation process will look actually different also another thing with installing services like this is that you have multiple steps of installation so you have couple of commands that you have to execute and the chances of something going wrong and error happening is actually pretty high because because of the number of steps required to install each service and this and this approach or this process of setting up a new environment can actually be pretty tedious depending on how complex your application is for example if you have 10 services that your application is using and you would have to do that 10 times on each operating system environment so now let's see how containers solve some of these problems with containers you actually do not have to install any of the services directly on your operating system because the container is its own isolated operating system layer with Linux base image as we saw in the previous slides you have everything packaged in one isolated environment so you have the PostgreSQL with a specific version packaged with the configuration in the start script inside inside of one container so the developer you have to go and look for the binaries to download on your machine but rather you just go ahead and check out the container repository to find that specific container and download on your local machine and the Downloads step is just one docker command which fetches the container and starts it at the same time and regardless of which operating system you're on the command the docker command for starting the container will not be different it will be exactly the same so we have ten applications that your app that your JavaScript application you depends on you would just have to run $10 comments for each container and that will be it which makes the setting up your local development environment actually much easier and much more efficient than the previous version also as we saw in the demonstration before you can actually have different versions of the same application running on your local environment without having any conflict so now let's see how containers can improve the deployment process before the containers a traditional deployment process will look like this developer development team will produce artifacts together with set of instructions of how to actually install and configure those artifacts on the server so you would have a jar file or something similar for your application and in addition you would have some kind of a database service or some other service also with a set of instructions of how to configure and set it up on the server so development team would give those artifacts over to the operations team and the operation team will handle setting up the environments to deploy those applications now the problem with this kind of approach is that first of all you need to configure everything and install everything directly on the operating system which we saw in the previous example that could actually lead to conflicts with dependency versions and and the service is running on the same host another problem that could arise from this kind of process is when there is misunderstanding between the development team and operations because everything is in a textual guide there could be cases where developers miss to mention some important point about configuration and when that fails the operations team have to go back to the developers and ask for more details and this could lead to some back-and-forth communication and the application is successfully deployed on the server with containers this process is actually simplified because now you have the developers and operations working in one team to package the whole configuration dependencies inside the application just as we saw previously and since it's already encapsulated in one environment you don't have to configure any of this directly on the server so the only thing you need to do is run a docker command that pulls that container that you've stored somewhere in the repository and then runs it and that makes the process this is of course a simplify simplified version but then makes exactly the problem that we saw on the previous slide much more easier no environmental configuration needed on the server the only thing of course you need to do is you have to prepare you have to install the and set up the docker runtime on the server before you will be able to run containers there but that's just one time effort and later in this tutorial we will also see how kubernetes actually offers even more abstraction of the deployment environment to make the deploying of super complex applications much much easier than it was possible with the traditional approach thanks for watching the video I hope it was helpful and if it was don't forget to like it this is a video series so I will create a new one every week so if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in a comment section below and I will try to answer them so thank you and see you in the next video,-0.07186707854270935,0.08274085819721222,0.019292956218123436,0.02444251999258995,0.04115911200642586,-0.05217990279197693,0.04777534678578377,0.010352427139878273,-0.023476330563426018,0.02134322188794613,-0.04868084192276001,0.001012221910059452,0.0734473243355751,-0.06867110729217529,-0.08972103148698807,-0.07489974051713943,0.014114446006715298,0.017097506672143936,-0.04229553043842316,0.01232938002794981,-0.07417403906583786,0.019220972433686256,-0.09132613241672516,-0.004533038474619389,-0.03685317561030388,0.06972719728946686,-0.013916057534515858,-0.05743785202503204,0.018016476184129715,0.007470820099115372,0.051350098103284836,0.06493701785802841,0.08989766240119934,0.03351123258471489,-0.022147173061966896,0.054956018924713135,0.06403706222772598,-0.0054361820220947266,-0.0477486327290535,-0.008095214143395424,0.007001992780715227,-0.14423350989818573,-0.03909140080213547,-0.009963535703718662,0.0015901743900030851,-0.024720776826143265,-0.023316441103816032,-0.0711190402507782,0.010311819612979889,0.04372556507587433,-0.07124030590057373,-0.049996182322502136,-0.017192067578434944,-0.006728109437972307,-0.026591317728161812,0.06643080711364746,-0.0016035714652389288,0.06667675822973251,-0.02772826887667179,-0.03517565876245499,0.01551020797342062,-0.020363353192806244,0.011183672584593296,0.04584517702460289,0.12138105183839798,-0.08740396052598953,-0.0190947987139225,0.027499089017510414,0.06099541112780571,-0.0800219178199768,0.0002526945900171995,-0.02086775377392769,-0.016762109473347664,-0.027458947151899338,-0.022453684359788895,-0.06472975760698318,-0.011272422038018703,0.08379311114549637,-0.029086746275424957,0.05831947550177574,-0.014389856718480587,0.015792902559041977,-0.00008070559852058068,-0.05085103213787079,-0.09247235953807831,0.024393411353230476,-0.01742885448038578,-0.028169255703687668,0.05754461884498596,-0.0562065951526165,0.0050087012350559235,-0.018511293455958366,0.02160525880753994,0.03602698817849159,0.01828514225780964,-0.009464052505791187,-0.02941109426319599,-0.010885769501328468,-0.0028626169078052044,-0.0031696774531155825,0.04399043321609497,-0.00353428372181952,0.07787099480628967,-0.07070166617631912,0.04123341292142868,-0.0684720128774643,-0.013975062407553196,-0.03742428496479988,0.001154333003796637,-0.017380042001605034,-0.0515342615544796,-0.06513331830501556,-0.03937159478664398,-0.011008372530341148,-0.026063794270157814,-0.025971826165914536,-0.00905520934611559,-0.03737485781311989,0.06440497189760208,-0.023333273828029633,0.06459411978721619,-0.006809091195464134,0.09692394733428955,-0.10021413862705231,-0.012491881847381592,-0.014886146411299706,-0.05805022269487381,-2.1480932339048633e-33,-0.029730208218097687,-0.13490720093250275,0.017573684453964233,0.016539281234145164,0.13566714525222778,-0.03222707659006119,0.020210081711411476,-0.04240908473730087,-0.03001837246119976,0.03849488124251366,0.020330673083662987,0.01837834343314171,0.021605217829346657,0.09191668033599854,0.054024554789066315,-0.0653715580701828,-0.14091840386390686,0.010859673842787743,0.019359024241566658,-0.03195739537477493,0.01145661436021328,0.010592791251838207,0.0018020260613411665,-0.044183969497680664,0.06363292038440704,-0.007672907318919897,0.0225213710218668,-0.0847710594534874,-0.0054806917905807495,-0.007434263359755278,-0.01408730261027813,0.03480575233697891,-0.01263045147061348,-0.03973257541656494,0.02910456620156765,0.014401866123080254,0.06260258704423904,-0.0015216036699712276,-0.05725044384598732,-0.026857247576117516,-0.0658303052186966,-0.10499231517314911,-0.008871032856404781,0.01771872118115425,0.05456322431564331,-0.053001768887043,-0.00510819535702467,-0.027162011712789536,-0.015337919816374779,0.07318828254938126,0.05188588798046112,-0.09918416291475296,-0.05639437586069107,0.05603077635169029,-0.01864631474018097,-0.005883798003196716,-0.034381184726953506,-0.03897374868392944,-0.04166436940431595,0.02139848656952381,-0.0843726322054863,0.01435632910579443,0.012909448705613613,-0.014070983044803143,-0.011046083644032478,-0.003191901370882988,0.007409524638205767,0.07248145341873169,0.06036469340324402,0.1378224790096283,-0.009378799237310886,0.0410742349922657,0.04836868867278099,0.023318007588386536,0.0032120938412845135,0.028138678520917892,-0.02726580947637558,0.022807786241173744,-0.01769726537168026,0.01228981465101242,-0.05310708284378052,0.03836262226104736,-0.003998363856226206,0.044302016496658325,-0.10406457632780075,-0.06572816520929337,0.023976553231477737,0.059115901589393616,-0.005605103448033333,-0.02401590161025524,0.02829812280833721,0.04676613584160805,-0.05125417932868004,-0.010734055191278458,-0.02850170060992241,-2.9336483742395584e-33,0.01887982338666916,0.019276730716228485,-0.08639398217201233,0.06330782920122147,0.010755925439298153,-0.003545373445376754,0.050473690032958984,0.012194033712148666,0.01180469524115324,-0.08626775443553925,-0.1366780400276184,0.05576189607381821,0.09064240753650665,0.0807633176445961,-0.08877160400152206,0.0123774204403162,-0.04131107032299042,-0.05576974153518677,-0.06620357185602188,-0.006569949444383383,0.03685673698782921,0.011749637313187122,0.02262558788061142,-0.022561926394701004,-0.10832010954618454,-0.06385602802038193,0.06332274526357651,-0.046316418796777725,0.015426898375153542,0.012611882761120796,0.03510810807347298,-0.02033293806016445,0.04142584651708603,0.04802161827683449,0.04035424813628197,0.0520658902823925,0.022292740643024445,0.03869727626442909,-0.03400878980755806,-0.08452753722667694,0.014293182641267776,-0.056466493755578995,0.013266870751976967,-0.03257778286933899,-0.031999047845602036,0.006546126678586006,0.015860049054026604,0.0400998629629612,-0.09284237772226334,-0.02156972512602806,-0.05694347992539406,-0.03412709757685661,0.030402256175875664,0.007687915116548538,-0.02006303146481514,-0.049515534192323685,-0.02377818338572979,0.006663767620921135,-0.025845548138022423,0.09656891226768494,0.11096643656492233,-0.02691546268761158,0.00482590077444911,0.09088048338890076,-0.028378363698720932,-0.038959287106990814,-0.04097706079483032,-0.00856709573417902,-0.07692616432905197,0.03794874623417854,0.08496064692735672,-0.06554044783115387,0.016650820150971413,0.03916747123003006,0.01412548590451479,-0.046998098492622375,-0.02102789096534252,-0.02429719641804695,-0.0045403726398944855,-0.02522466331720352,-0.03691621124744415,-0.027859121561050415,0.03898175433278084,-0.08676479756832123,-0.0510357990860939,0.019926751032471657,0.09089015424251556,0.06199367344379425,0.03521892800927162,-0.05283055454492569,0.04022366926074028,-0.054267752915620804,-0.10379335284233093,0.11410275101661682,-0.04987921193242073,-2.213696603803328e-8,-0.023638729006052017,-0.041237056255340576,-0.04373834654688835,-0.05708523467183113,-0.03357764706015587,-0.0024364262353628874,0.08764389902353287,0.053656771779060364,0.010490551590919495,-0.003288596635684371,-0.016551053151488304,-0.03835523873567581,-0.10729357600212097,-0.018526803702116013,0.11009129136800766,0.11181304603815079,0.0314628966152668,0.06093825027346611,-0.0008631389355286956,-0.05306599661707878,0.016817433759570122,-0.020982662215828896,0.034958772361278534,-0.0643758699297905,-0.00151771679520607,0.08141457289457321,0.05656862258911133,0.1353430449962616,0.00418282113969326,-0.05695232003927231,0.08117231726646423,0.041156165301799774,-0.0587783008813858,0.037770677357912064,0.023260125890374184,0.06351400166749954,-0.05576811730861664,-0.06198880821466446,0.004106885753571987,-0.031032206490635872,-0.10274545103311539,-0.017997192218899727,-0.008226603269577026,-0.05612212046980858,-0.016968801617622375,0.07024040073156357,0.012567100115120411,-0.027287030592560768,-0.06557486951351166,0.04239525645971298,0.06958294659852982,0.043736089020967484,0.03529313579201698,0.02346723899245262,0.04955759644508362,0.078017957508564,0.008295171894133091,0.018101666122674942,0.05316360294818878,-0.004535961896181107,0.029732907190918922,0.14296451210975647,0.055349595844745636,0.06709430366754532,0.0005519208498299122,0.0006139417528174818,0.04678092896938324,-0.0009232027223333716,0.0030937795527279377,0.01201201044023037,0.05135473236441612,-0.007475120015442371,0.041996944695711136,0.03168175742030144,-0.06460759788751602,0.004907483700662851,0.003958225715905428,-0.06730390340089798,-0.013064759783446789,-0.06908959150314331,0.11462171375751495,0.0011589598143473268,-0.06334623694419861,-0.03917556256055832,-0.04438404738903046,-0.008042075671255589,-0.018846698105335236,-0.008352925069630146,-0.06922998279333115,0.07613195478916168,-0.03586200252175331,-0.05223499983549118,0.038927316665649414,-0.05169062688946724,-0.03185798227787018,0.07831934094429016,0.020475264638662338,0.006954180542379618,-0.021049119532108307,0.0951504111289978,0.06283164024353027,-0.027145884931087494,-0.055201124399900436,0.00782619509845972,-0.04100555181503296,-0.06331754475831985,-0.09125107526779175,-0.003692144062370062,0.0023180125281214714,-0.07211767137050629,-0.016825050115585327,-0.14654618501663208,-0.01335438247770071,-0.0003914655826520175,0.0009728597360663116,-0.06862107664346695,0.023532837629318237,0.02645736373960972,-0.017691142857074738,0.03544452413916588,-0.04015454649925232,0.07382426410913467,0.0390886552631855,0.01779916137456894,0.059780851006507874,-0.031036444008350372,0.015785295516252518,-0.004999624565243721,0.058836981654167175,-0.07452600449323654,0.0347328819334507,0.06805205345153809,0.04632563143968582,-0.10943420231342316,0.02374601922929287,0.021586662158370018,0.017911674454808235,0.00564231863245368,0.0020837553311139345,-0.04090519994497299,-0.013909266330301762,0.052937887609004974,0.009123665280640125,0.0832127258181572,0.04963305965065956,0.08964800089597702,0.028082270175218582,-0.06459954380989075,-0.14276154339313507,-0.03463660925626755,-0.007043155375868082,0.03880704939365387,-0.019773660227656364,-0.02868826687335968,0.012678069062530994,-0.0017270005773752928,0.05650617927312851,-0.09665705263614655,0.10261958092451096,0.011792035773396492,-0.03798035904765129,-0.015189425088465214,0.05216258391737938,0.0003922485338989645,0.04276057332754135,0.03132973238825798,0.046611346304416656,-0.06410267949104309,0.0277094766497612,-0.031428758054971695,-0.05207521840929985,-0.026800695806741714,0.05653829500079155,-0.0031254563946276903,-0.07979921251535416,-0.017558667808771133,-0.016051633283495903,-0.02287345565855503,0.016852332279086113,-0.03283261880278587,-0.04244019463658333,-0.055929526686668396,0.06148398667573929,0.04943361505866051,0.024464644491672516,-0.08470235019922256,0.05461784452199936,-0.014877725392580032,-0.00068606500281021,0.024751173332333565,-0.07261206954717636,4.6929448312290346e-33,0.01888466626405716,-0.04198192432522774,0.03920772299170494,0.025855090469121933,0.10320024192333221,-0.12076950073242188,0.05623378977179527,-0.017491374164819717,-0.023789236322045326,0.00415662070736289,0.007248592097312212,0.08315738290548325,-0.027758076786994934,0.02027585729956627,0.04930948093533516,-0.030752677470445633,-0.147564098238945,0.0022180008236318827,0.04776829108595848,-0.03086819313466549,-0.024121416732668877,-0.061461590230464935,0.05180317163467407,-0.011044801212847233,0.1256742924451828,-0.047029681503772736,0.04465174302458763,-0.08867200464010239,-0.013373041525483131,0.0038952711038291454,-0.025105660781264305,-0.0072849951684474945,0.000860216561704874,0.0250068511813879,-0.07064702361822128,-0.010293439961969852,-0.009720373898744583,-0.0064296540804207325,-0.051877494901418686,-0.09364544600248337,-0.04845964163541794,-0.029498741030693054,0.003518857527524233,0.0207352377474308,0.0670509785413742,-0.01689797081053257,0.05956899747252464,-0.0886228159070015,0.026236949488520622,0.009160134010016918,-0.002811770886182785,-0.09685440361499786,-0.005079144611954689,0.0015139910392463207,0.012733828276395798,0.060362011194229126,0.09763112664222717,-0.059379685670137405,-0.0674455463886261,0.015001186169683933,-0.08249376714229584,0.001542218029499054,-0.014706296846270561,-0.01738205924630165,0.018988385796546936,0.045391298830509186,-0.014993623830378056,0.08382292091846466,0.0347512848675251,-0.012774661183357239,-0.03536514192819595,-0.004897436127066612,0.0018202544888481498,0.0015276498161256313,0.021932922303676605,-0.0007088290876708925,-0.0187966451048851,0.00785693060606718,-0.06184276565909386,0.05473222956061363,-0.03473378345370293,0.003465009853243828,-0.03742711991071701,0.0721738412976265,-0.10304836183786392,-0.04321355000138283,0.012242109514772892,0.015300710685551167,0.026561718434095383,0.008463360369205475,0.02841818518936634,0.009495362639427185,-0.044293783605098724,0.03756530582904816,-0.005190073512494564,-6.830877753180962e-33,0.07025699317455292,0.04983110725879669,-0.09246104955673218,0.05504511669278145,0.06507586687803268,0.029248956590890884,-0.007795930840075016,-0.008125250227749348,0.022793198004364967,-0.101448655128479,-0.16271626949310303,0.023285532370209694,0.040422987192869186,0.09211870282888412,-0.14745403826236725,-0.031216280534863472,-0.01742801070213318,-0.04552841559052467,-0.009690595790743828,0.017056185752153397,-0.03169741854071617,-0.007906774058938026,0.020721551030874252,-0.01834969036281109,-0.07182739675045013,-0.034851327538490295,0.026324652135372162,-0.043782059103250504,0.0006183960358612239,0.025282762944698334,0.05553209409117699,-0.11124112457036972,0.08356256783008575,-0.007550086826086044,0.0227992981672287,-0.015128863975405693,0.017831334844231606,-0.026518264785408974,-0.023281002417206764,-0.10305900871753693,0.02084421180188656,-0.0017394603928551078,0.007567980792373419,-0.11283590644598007,-0.04929265007376671,-0.00015845477173570544,-0.026385055854916573,0.03215070068836212,0.014036400243639946,-0.08218933641910553,0.006157770752906799,-0.012953990139067173,-0.0404045544564724,-0.04672849178314209,-0.005753431934863329,0.004838680382817984,-0.01632782816886902,0.046894002705812454,-0.005089666694402695,0.050636615604162216,0.06174541264772415,-0.025283705443143845,0.0434749573469162,0.09267878532409668,-0.04951271787285805,-0.025951718911528587,-0.04291297122836113,0.044988177716732025,-0.09243857860565186,0.016710326075553894,-0.004676199983805418,-0.030129145830869675,0.028090978041291237,0.10404448211193085,-0.02690551057457924,-0.08900660276412964,0.02623637393116951,-0.027416154742240906,0.04372265189886093,-0.015124800615012646,-0.010138509795069695,-0.012054347433149815,-0.031224282458424568,0.00037105404771864414,0.005299894139170647,0.0730597972869873,0.1540202796459198,0.004612956661731005,0.02220207452774048,-0.02257799729704857,0.009670061059296131,0.023356087505817413,-0.07430257648229599,0.12183897197246552,0.0069036358036100864,-5.645072320703548e-8,0.04828951880335808,-0.01750856265425682,-0.041992008686065674,-0.004554055165499449,-0.04107755050063133,0.0063582612201571465,0.07793937623500824,0.0531872920691967,-0.01639169454574585,0.05478344112634659,-0.07767203450202942,0.005975410807877779,-0.08856590837240219,-0.025043189525604248,0.04683433845639229,0.09628622233867645,-0.01688472367823124,0.031313732266426086,0.0009658415801823139,-0.07387718558311462,0.025098474696278572,-0.0288673248142004,0.04448525607585907,0.018194952979683876,-0.009565604850649834,0.042942121624946594,0.08155182749032974,0.05183093622326851,0.09055202454328537,0.017045510932803154,0.0009304162813350558,0.026120701804757118,-0.07817842066287994,0.04214182868599892,0.0368206650018692,0.029713738709688187,-0.09772949665784836,-0.031662438064813614,0.03528337925672531,0.019835257902741432,-0.07355514168739319,-0.0031892352271825075,-0.020939117297530174,-0.04804782569408417,-0.025267552584409714,0.07110985368490219,-0.04333662614226341,-0.006597178056836128,-0.06794906407594681,0.050937470048666,0.06540969014167786,-0.011171878315508366,-0.030418695881962776,0.062272291630506516,0.07824122905731201,0.09686335176229477,-0.005580942612141371,0.00022222356346901506,0.07315308600664139,-0.009141783230006695,-0.045550886541604996,0.11536344885826111,0.06869526952505112,0.04841228947043419
